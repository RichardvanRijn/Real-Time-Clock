
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000c4e  00000ce2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800074  00800074  00000cf6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cf6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016bd  00000000  00000000  00000eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070c  00000000  00000000  000025a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000674  00000000  00000000  00002cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000048c  00000000  00000000  00003328  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000063c  00000000  00000000  000037b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d26  00000000  00000000  00003df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00004b16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_11>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	a6 01       	movw	r20, r12

00000056 <__ctors_end>:
  56:	ac 01       	movw	r20, r24

00000058 <__dtors_end>:
  58:	11 24       	eor	r1, r1
  5a:	1f be       	out	0x3f, r1	; 63
  5c:	cf e5       	ldi	r28, 0x5F	; 95
  5e:	d8 e0       	ldi	r29, 0x08	; 8
  60:	de bf       	out	0x3e, r29	; 62
  62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
  64:	10 e0       	ldi	r17, 0x00	; 0
  66:	a0 e6       	ldi	r26, 0x60	; 96
  68:	b0 e0       	ldi	r27, 0x00	; 0
  6a:	ee e4       	ldi	r30, 0x4E	; 78
  6c:	fc e0       	ldi	r31, 0x0C	; 12
  6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
  70:	05 90       	lpm	r0, Z+
  72:	0d 92       	st	X+, r0
  74:	a4 37       	cpi	r26, 0x74	; 116
  76:	b1 07       	cpc	r27, r17
  78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	a4 e7       	ldi	r26, 0x74	; 116
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
  82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
  84:	a5 39       	cpi	r26, 0x95	; 149
  86:	b2 07       	cpc	r27, r18
  88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
  8a:	10 e0       	ldi	r17, 0x00	; 0
  8c:	c6 e5       	ldi	r28, 0x56	; 86
  8e:	d0 e0       	ldi	r29, 0x00	; 0
  90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
  92:	22 97       	sbiw	r28, 0x02	; 2
  94:	fe 01       	movw	r30, r28
  96:	0e 94 37 03 	call	0x66e	; 0x66e <__tablejump__>
  9a:	c4 35       	cpi	r28, 0x54	; 84
  9c:	d1 07       	cpc	r29, r17
  9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
  a0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  a4:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__do_global_dtors>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_Z7init_T0v>:

I2C TWI(address);

void init_T0(void)
{
	TCCR0 = (1<<CS02) && (1<<CS00);
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  b0:	12 be       	out	0x32, r1	; 50
	TIMSK = (1<<TOIE0);
  b2:	89 bf       	out	0x39, r24	; 57
  b4:	08 95       	ret

000000b6 <_Z8bcdToDech>:
}

unsigned char bcdToDec(unsigned char val)
{
	return ((val/16*10) + (val%16) );
  b6:	98 2f       	mov	r25, r24
  b8:	92 95       	swap	r25
  ba:	9f 70       	andi	r25, 0x0F	; 15
  bc:	99 0f       	add	r25, r25
  be:	29 2f       	mov	r18, r25
  c0:	22 0f       	add	r18, r18
  c2:	22 0f       	add	r18, r18
  c4:	92 0f       	add	r25, r18
  c6:	8f 70       	andi	r24, 0x0F	; 15
}
  c8:	89 0f       	add	r24, r25
  ca:	08 95       	ret

000000cc <_Z11writeScreenv>:

//unsigned char timeIn[8] {0x00,	 decToBcd(0), decToBcd(0), decToBcd(0), decToBcd(0),	 decToBcd(0), decToBcd(0), decToBcd(0)};
//						   Address	,Seconds,	  Minutes,	   Hours,	    Day of the week, Date,		  month,	   Year.

void writeScreen(void)
{
  cc:	df 92       	push	r13
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
	lcd_home();
  da:	0e 94 0c 03 	call	0x618	; 0x618 <_Z8lcd_homev>
	snprintf(buffer, sizeof buffer,"%d:",time[2]);
  de:	80 91 7f 00 	lds	r24, 0x007F
  e2:	1f 92       	push	r1
  e4:	8f 93       	push	r24
  e6:	00 e6       	ldi	r16, 0x60	; 96
  e8:	10 e0       	ldi	r17, 0x00	; 0
  ea:	1f 93       	push	r17
  ec:	0f 93       	push	r16
  ee:	1f 92       	push	r1
  f0:	0f 2e       	mov	r0, r31
  f2:	f1 e1       	ldi	r31, 0x11	; 17
  f4:	df 2e       	mov	r13, r31
  f6:	f0 2d       	mov	r31, r0
  f8:	df 92       	push	r13
  fa:	c4 e8       	ldi	r28, 0x84	; 132
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	df 93       	push	r29
 100:	cf 93       	push	r28
 102:	0e 94 3b 03 	call	0x676	; 0x676 <snprintf>
	lcd_puts(buffer);
 106:	ce 01       	movw	r24, r28
 108:	0e 94 26 03 	call	0x64c	; 0x64c <_Z8lcd_putsPc>
	lcd_goto(0,3);
 10c:	63 e0       	ldi	r22, 0x03	; 3
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 19 03 	call	0x632	; 0x632 <_Z8lcd_gotohh>
	snprintf(buffer, sizeof buffer,"%d:",time[1]);
 114:	80 91 7e 00 	lds	r24, 0x007E
 118:	1f 92       	push	r1
 11a:	8f 93       	push	r24
 11c:	1f 93       	push	r17
 11e:	0f 93       	push	r16
 120:	1f 92       	push	r1
 122:	df 92       	push	r13
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	0e 94 3b 03 	call	0x676	; 0x676 <snprintf>
	lcd_puts(buffer);
 12c:	ce 01       	movw	r24, r28
 12e:	0e 94 26 03 	call	0x64c	; 0x64c <_Z8lcd_putsPc>
	lcd_goto(0,6);
 132:	66 e0       	ldi	r22, 0x06	; 6
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 19 03 	call	0x632	; 0x632 <_Z8lcd_gotohh>
	snprintf(buffer, sizeof buffer,"%d ",time[0]);
 13a:	80 91 7d 00 	lds	r24, 0x007D
 13e:	1f 92       	push	r1
 140:	8f 93       	push	r24
 142:	04 e6       	ldi	r16, 0x64	; 100
 144:	10 e0       	ldi	r17, 0x00	; 0
 146:	1f 93       	push	r17
 148:	0f 93       	push	r16
 14a:	1f 92       	push	r1
 14c:	df 92       	push	r13
 14e:	df 93       	push	r29
 150:	cf 93       	push	r28
 152:	0e 94 3b 03 	call	0x676	; 0x676 <snprintf>
	lcd_puts(buffer);
 156:	ce 01       	movw	r24, r28
 158:	0e 94 26 03 	call	0x64c	; 0x64c <_Z8lcd_putsPc>
	lcd_goto(1,0);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 19 03 	call	0x632	; 0x632 <_Z8lcd_gotohh>
	snprintf(buffer, sizeof buffer,"%d-",time[4]);
 164:	80 91 81 00 	lds	r24, 0x0081
 168:	1f 92       	push	r1
 16a:	8f 93       	push	r24
 16c:	0f 2e       	mov	r0, r31
 16e:	f8 e6       	ldi	r31, 0x68	; 104
 170:	ef 2e       	mov	r14, r31
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ff 2e       	mov	r15, r31
 176:	f0 2d       	mov	r31, r0
 178:	ff 92       	push	r15
 17a:	ef 92       	push	r14
 17c:	1f 92       	push	r1
 17e:	df 92       	push	r13
 180:	df 93       	push	r29
 182:	cf 93       	push	r28
 184:	0e 94 3b 03 	call	0x676	; 0x676 <snprintf>
	lcd_puts(buffer);
 188:	8d b7       	in	r24, 0x3d	; 61
 18a:	9e b7       	in	r25, 0x3e	; 62
 18c:	80 96       	adiw	r24, 0x20	; 32
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	9e bf       	out	0x3e, r25	; 62
 194:	0f be       	out	0x3f, r0	; 63
 196:	8d bf       	out	0x3d, r24	; 61
 198:	ce 01       	movw	r24, r28
 19a:	0e 94 26 03 	call	0x64c	; 0x64c <_Z8lcd_putsPc>
	lcd_goto(1,3);
 19e:	63 e0       	ldi	r22, 0x03	; 3
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 19 03 	call	0x632	; 0x632 <_Z8lcd_gotohh>
	snprintf(buffer, sizeof buffer,"%d-",time[5]);
 1a6:	80 91 82 00 	lds	r24, 0x0082
 1aa:	1f 92       	push	r1
 1ac:	8f 93       	push	r24
 1ae:	ff 92       	push	r15
 1b0:	ef 92       	push	r14
 1b2:	1f 92       	push	r1
 1b4:	df 92       	push	r13
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	0e 94 3b 03 	call	0x676	; 0x676 <snprintf>
	lcd_puts(buffer);
 1be:	ce 01       	movw	r24, r28
 1c0:	0e 94 26 03 	call	0x64c	; 0x64c <_Z8lcd_putsPc>
	lcd_goto(1,6);
 1c4:	66 e0       	ldi	r22, 0x06	; 6
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 19 03 	call	0x632	; 0x632 <_Z8lcd_gotohh>
	snprintf(buffer, sizeof buffer,"%d ",time[6]);
 1cc:	80 91 83 00 	lds	r24, 0x0083
 1d0:	1f 92       	push	r1
 1d2:	8f 93       	push	r24
 1d4:	1f 93       	push	r17
 1d6:	0f 93       	push	r16
 1d8:	1f 92       	push	r1
 1da:	df 92       	push	r13
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	0e 94 3b 03 	call	0x676	; 0x676 <snprintf>
	lcd_puts(buffer);	
 1e4:	ce 01       	movw	r24, r28
 1e6:	0e 94 26 03 	call	0x64c	; 0x64c <_Z8lcd_putsPc>
 1ea:	8d b7       	in	r24, 0x3d	; 61
 1ec:	9e b7       	in	r25, 0x3e	; 62
 1ee:	40 96       	adiw	r24, 0x10	; 16
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	9e bf       	out	0x3e, r25	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	8d bf       	out	0x3d, r24	; 61
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	df 90       	pop	r13
 208:	08 95       	ret

0000020a <__vector_11>:
	lcd_cursor(true,true);
	lcd_home();
	
}

ISR(TIMER0_OVF_vect) {
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	ef 92       	push	r14
 216:	ff 92       	push	r15
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
	static unsigned char x = 0;

	if ( x == 15 )
 238:	80 91 74 00 	lds	r24, 0x0074
 23c:	8f 30       	cpi	r24, 0x0F	; 15
 23e:	39 f5       	brne	.+78     	; 0x28e <__vector_11+0x84>
	{
		TWI.start_wait(I2C_WRITE);			// set device address and write mode
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	85 e7       	ldi	r24, 0x75	; 117
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN3I2C10start_waitEh>
		TWI.readXBytes(data,7,0x00);
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	47 e0       	ldi	r20, 0x07	; 7
 24e:	66 e7       	ldi	r22, 0x76	; 118
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	85 e7       	ldi	r24, 0x75	; 117
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 1e 02 	call	0x43c	; 0x43c <_ZN3I2C10readXBytesEPhhh>
		TWI.stop();
 25a:	85 e7       	ldi	r24, 0x75	; 117
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <_ZN3I2C4stopEv>
 262:	c6 e7       	ldi	r28, 0x76	; 118
 264:	d0 e0       	ldi	r29, 0x00	; 0
 266:	0d e7       	ldi	r16, 0x7D	; 125
 268:	10 e0       	ldi	r17, 0x00	; 0
 26a:	0f 2e       	mov	r0, r31
 26c:	fe e7       	ldi	r31, 0x7E	; 126
 26e:	ef 2e       	mov	r14, r31
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	ff 2e       	mov	r15, r31
 274:	f0 2d       	mov	r31, r0
		for (uint8_t i = 0; i <= 7 ; i++)
		{
			time[i] = bcdToDec(data[i]);
 276:	89 91       	ld	r24, Y+
 278:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8bcdToDech>
 27c:	f8 01       	movw	r30, r16
 27e:	81 93       	st	Z+, r24
 280:	8f 01       	movw	r16, r30
	if ( x == 15 )
	{
		TWI.start_wait(I2C_WRITE);			// set device address and write mode
		TWI.readXBytes(data,7,0x00);
		TWI.stop();
		for (uint8_t i = 0; i <= 7 ; i++)
 282:	ce 15       	cp	r28, r14
 284:	df 05       	cpc	r29, r15
 286:	b9 f7       	brne	.-18     	; 0x276 <__vector_11+0x6c>
		{
			time[i] = bcdToDec(data[i]);
		}
		x = 0;
 288:	10 92 74 00 	sts	0x0074, r1
 28c:	03 c0       	rjmp	.+6      	; 0x294 <__vector_11+0x8a>
	}
	else
	{
		x++;
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 74 00 	sts	0x0074, r24
	}
	TCNT0 = 0;
 294:	12 be       	out	0x32, r1	; 50
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <main>:

int main(void)
{
	DDRD = 0x00;
 2c4:	11 ba       	out	0x11, r1	; 17
	lcd_init();
 2c6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_Z8lcd_initv>
	lcd_cursor(false, false);							//  cursor off
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 10 03 	call	0x620	; 0x620 <_Z10lcd_cursorbb>
	lcd_home();
 2d2:	0e 94 0c 03 	call	0x618	; 0x618 <_Z8lcd_homev>
	snprintf(buffer, sizeof buffer, "int");
 2d6:	89 e6       	ldi	r24, 0x69	; 105
 2d8:	9e e6       	ldi	r25, 0x6E	; 110
 2da:	a4 e7       	ldi	r26, 0x74	; 116
 2dc:	b0 e0       	ldi	r27, 0x00	; 0
 2de:	80 93 84 00 	sts	0x0084, r24
 2e2:	90 93 85 00 	sts	0x0085, r25
 2e6:	a0 93 86 00 	sts	0x0086, r26
 2ea:	b0 93 87 00 	sts	0x0087, r27
	lcd_puts(buffer);
 2ee:	84 e8       	ldi	r24, 0x84	; 132
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 26 03 	call	0x64c	; 0x64c <_Z8lcd_putsPc>
	lcd_home();
 2f6:	0e 94 0c 03 	call	0x618	; 0x618 <_Z8lcd_homev>
	TWI.init();									// Function to initialize TWI
 2fa:	85 e7       	ldi	r24, 0x75	; 117
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN3I2C4initEv>
	int ret = TWI.start(I2C_WRITE);				// set device address and write mode
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	85 e7       	ldi	r24, 0x75	; 117
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3I2C5startEh>
	if ( ret ) 
 30c:	81 11       	cpse	r24, r1
 30e:	08 c0       	rjmp	.+16     	; 0x320 <main+0x5c>
/*		TWI.stop();
		TWI.start_wait(I2C_WRITE);
		TWI.writeXBytes(timeIn,8);
		TWI.stop();
*/
		init_T0();
 310:	0e 94 56 00 	call	0xac	; 0xac <_Z7init_T0v>
		sei();
 314:	78 94       	sei
		while(1)
		{
			cli();
 316:	f8 94       	cli
			writeScreen();
 318:	0e 94 66 00 	call	0xcc	; 0xcc <_Z11writeScreenv>
			sei();
 31c:	78 94       	sei
 31e:	fb cf       	rjmp	.-10     	; 0x316 <main+0x52>
	lcd_home();
	TWI.init();									// Function to initialize TWI
	int ret = TWI.start(I2C_WRITE);				// set device address and write mode
	if ( ret ) 
	{										// failed to issue start condition, possibly no device found
		TWI.stop();
 320:	85 e7       	ldi	r24, 0x75	; 117
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 fd 01 	call	0x3fa	; 0x3fa <_ZN3I2C4stopEv>
		snprintf(buffer, sizeof buffer, "Failed");
 328:	87 e0       	ldi	r24, 0x07	; 7
 32a:	ec e6       	ldi	r30, 0x6C	; 108
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	a4 e8       	ldi	r26, 0x84	; 132
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	01 90       	ld	r0, Z+
 334:	0d 92       	st	X+, r0
 336:	8a 95       	dec	r24
 338:	e1 f7       	brne	.-8      	; 0x332 <main+0x6e>
		lcd_puts(buffer);
 33a:	84 e8       	ldi	r24, 0x84	; 132
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 26 03 	call	0x64c	; 0x64c <_Z8lcd_putsPc>
		lcd_home();
 342:	0e 94 0c 03 	call	0x618	; 0x618 <_Z8lcd_homev>
//			{
//				changeTime();	
//			}
		}
	}
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	08 95       	ret

0000034c <_GLOBAL__sub_I_buffer>:

char buffer[17];
unsigned char time[7];
unsigned char data[7];

I2C TWI(address);
 34c:	60 ed       	ldi	r22, 0xD0	; 208
 34e:	85 e7       	ldi	r24, 0x75	; 117
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN3I2CC1Eh>
 356:	08 95       	ret

00000358 <_GLOBAL__sub_D_buffer>:
 358:	85 e7       	ldi	r24, 0x75	; 117
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN3I2CD1Ev>
 360:	08 95       	ret

00000362 <_ZN3I2CC1Eh>:
#define SCL_CLOCK  100000L

// default constructor
I2C::I2C():address(0) {}

I2C::I2C(unsigned char newaddress) : address(newaddress) {}
 362:	fc 01       	movw	r30, r24
 364:	60 83       	st	Z, r22
 366:	08 95       	ret

00000368 <_ZN3I2C4initEv>:

void I2C::init(void)
{
	 /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
	 TWSR = 0;                         /* no prescaler */
 368:	11 b8       	out	0x01, r1	; 1
	 TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 36a:	8c e0       	ldi	r24, 0x0C	; 12
 36c:	80 b9       	out	0x00, r24	; 0
 36e:	08 95       	ret

00000370 <_ZN3I2C5startEh>:
}

unsigned char I2C::start(unsigned char RW)
{
	uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);				// send START condition
 370:	24 ea       	ldi	r18, 0xA4	; 164
 372:	26 bf       	out	0x36, r18	; 54
	while(!(TWCR & (1<<TWINT)));							// wait until transmission completed
 374:	06 b6       	in	r0, 0x36	; 54
 376:	07 fe       	sbrs	r0, 7
 378:	fd cf       	rjmp	.-6      	; 0x374 <_ZN3I2C5startEh+0x4>
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
 37a:	21 b1       	in	r18, 0x01	; 1
 37c:	28 7f       	andi	r18, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 37e:	28 30       	cpi	r18, 0x08	; 8
 380:	11 f0       	breq	.+4      	; 0x386 <_ZN3I2C5startEh+0x16>
 382:	20 31       	cpi	r18, 0x10	; 16
 384:	91 f4       	brne	.+36     	; 0x3aa <_ZN3I2C5startEh+0x3a>
	TWDR = address + RW;									// send device address
 386:	fc 01       	movw	r30, r24
 388:	80 81       	ld	r24, Z
 38a:	68 0f       	add	r22, r24
 38c:	63 b9       	out	0x03, r22	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 38e:	84 e8       	ldi	r24, 0x84	; 132
 390:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));							// wail until transmission completed and ACK/NACK has been received
 392:	06 b6       	in	r0, 0x36	; 54
 394:	07 fe       	sbrs	r0, 7
 396:	fd cf       	rjmp	.-6      	; 0x392 <_ZN3I2C5startEh+0x22>
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
 398:	91 b1       	in	r25, 0x01	; 1
 39a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 39c:	98 31       	cpi	r25, 0x18	; 24
 39e:	39 f0       	breq	.+14     	; 0x3ae <_ZN3I2C5startEh+0x3e>
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 34       	cpi	r25, 0x40	; 64
 3a4:	29 f4       	brne	.+10     	; 0x3b0 <_ZN3I2C5startEh+0x40>
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	08 95       	ret
{
	uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);				// send START condition
	while(!(TWCR & (1<<TWINT)));							// wait until transmission completed
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	08 95       	ret
	TWDR = address + RW;									// send device address
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));							// wail until transmission completed and ACK/NACK has been received
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	return 0;
 3ae:	80 e0       	ldi	r24, 0x00	; 0
}
 3b0:	08 95       	ret

000003b2 <_ZN3I2C9rep_startEh>:

unsigned char I2C::rep_start(unsigned char RW)
{
	return start(RW);
 3b2:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3I2C5startEh>
}
 3b6:	08 95       	ret

000003b8 <_ZN3I2C10start_waitEh>:

void I2C::start_wait(unsigned char RW)
{
 3b8:	fc 01       	movw	r30, r24
	uint8_t   twst;
	while ( 1 )
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);						// send START condition
 3ba:	94 ea       	ldi	r25, 0xA4	; 164
		while(!(TWCR & (1<<TWINT)));									// wait until transmission completed
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
		TWDR = address + RW;											// send device address
		TWCR = (1<<TWINT) | (1<<TWEN);
 3bc:	24 e8       	ldi	r18, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));									// wail until transmission completed
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);					//device busy, send stop condition to terminate write operation
 3be:	34 e9       	ldi	r19, 0x94	; 148
void I2C::start_wait(unsigned char RW)
{
	uint8_t   twst;
	while ( 1 )
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);						// send START condition
 3c0:	96 bf       	out	0x36, r25	; 54
		while(!(TWCR & (1<<TWINT)));									// wait until transmission completed
 3c2:	06 b6       	in	r0, 0x36	; 54
 3c4:	07 fe       	sbrs	r0, 7
 3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <_ZN3I2C10start_waitEh+0xa>
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
 3c8:	81 b1       	in	r24, 0x01	; 1
 3ca:	88 7f       	andi	r24, 0xF8	; 248
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 3cc:	88 30       	cpi	r24, 0x08	; 8
 3ce:	11 f0       	breq	.+4      	; 0x3d4 <_ZN3I2C10start_waitEh+0x1c>
 3d0:	80 31       	cpi	r24, 0x10	; 16
 3d2:	b1 f7       	brne	.-20     	; 0x3c0 <_ZN3I2C10start_waitEh+0x8>
		TWDR = address + RW;											// send device address
 3d4:	80 81       	ld	r24, Z
 3d6:	86 0f       	add	r24, r22
 3d8:	83 b9       	out	0x03, r24	; 3
		TWCR = (1<<TWINT) | (1<<TWEN);
 3da:	26 bf       	out	0x36, r18	; 54
		while(!(TWCR & (1<<TWINT)));									// wail until transmission completed
 3dc:	06 b6       	in	r0, 0x36	; 54
 3de:	07 fe       	sbrs	r0, 7
 3e0:	fd cf       	rjmp	.-6      	; 0x3dc <_ZN3I2C10start_waitEh+0x24>
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
 3e2:	81 b1       	in	r24, 0x01	; 1
 3e4:	88 7f       	andi	r24, 0xF8	; 248
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
 3e6:	80 32       	cpi	r24, 0x20	; 32
 3e8:	11 f0       	breq	.+4      	; 0x3ee <_ZN3I2C10start_waitEh+0x36>
 3ea:	88 35       	cpi	r24, 0x58	; 88
 3ec:	29 f4       	brne	.+10     	; 0x3f8 <_ZN3I2C10start_waitEh+0x40>
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);					//device busy, send stop condition to terminate write operation
 3ee:	36 bf       	out	0x36, r19	; 54
			while(TWCR & (1<<TWSTO));									// wait until stop condition is executed and bus released
 3f0:	06 b6       	in	r0, 0x36	; 54
 3f2:	04 fc       	sbrc	r0, 4
 3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <_ZN3I2C10start_waitEh+0x38>
 3f6:	e4 cf       	rjmp	.-56     	; 0x3c0 <_ZN3I2C10start_waitEh+0x8>
 3f8:	08 95       	ret

000003fa <_ZN3I2C4stopEv>:
	}
}

void I2C::stop(void)
{
	 TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);						//send stop condition
 3fa:	84 e9       	ldi	r24, 0x94	; 148
 3fc:	86 bf       	out	0x36, r24	; 54
	 while(TWCR & (1<<TWSTO));											// wait until stop condition is executed and bus released
 3fe:	06 b6       	in	r0, 0x36	; 54
 400:	04 fc       	sbrc	r0, 4
 402:	fd cf       	rjmp	.-6      	; 0x3fe <_ZN3I2C4stopEv+0x4>
}
 404:	08 95       	ret

00000406 <_ZN3I2C5writeEh>:


unsigned char I2C::write(unsigned char data)
{
	uint8_t   twst;
	TWDR = data;														// send data to the previously addressed device
 406:	63 b9       	out	0x03, r22	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 408:	84 e8       	ldi	r24, 0x84	; 132
 40a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT))){}										// wait until transmission completed
 40c:	06 b6       	in	r0, 0x36	; 54
 40e:	07 fe       	sbrs	r0, 7
 410:	fd cf       	rjmp	.-6      	; 0x40c <_ZN3I2C5writeEh+0x6>
	twst = TW_STATUS & 0xF8;											// check value of TWI Status Register. Mask prescaler bits
 412:	91 b1       	in	r25, 0x01	; 1
 414:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	98 32       	cpi	r25, 0x28	; 40
 41a:	09 f4       	brne	.+2      	; 0x41e <_ZN3I2C5writeEh+0x18>
 41c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 41e:	08 95       	ret

00000420 <_ZN3I2C7readAckEv>:

unsigned char I2C::readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 420:	84 ec       	ldi	r24, 0xC4	; 196
 422:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 424:	06 b6       	in	r0, 0x36	; 54
 426:	07 fe       	sbrs	r0, 7
 428:	fd cf       	rjmp	.-6      	; 0x424 <_ZN3I2C7readAckEv+0x4>
	return TWDR;
 42a:	83 b1       	in	r24, 0x03	; 3
}
 42c:	08 95       	ret

0000042e <_ZN3I2C7readNakEv>:

unsigned char I2C::readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 42e:	84 e8       	ldi	r24, 0x84	; 132
 430:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));	
 432:	06 b6       	in	r0, 0x36	; 54
 434:	07 fe       	sbrs	r0, 7
 436:	fd cf       	rjmp	.-6      	; 0x432 <_ZN3I2C7readNakEv+0x4>
	return TWDR;
 438:	83 b1       	in	r24, 0x03	; 3
}
 43a:	08 95       	ret

0000043c <_ZN3I2C10readXBytesEPhhh>:
{
	return address;
}

void I2C::readXBytes(unsigned char data[], unsigned char amount, unsigned char startAddress)	//data[x] : x >= amount
{
 43c:	af 92       	push	r10
 43e:	bf 92       	push	r11
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	8c 01       	movw	r16, r24
 452:	6b 01       	movw	r12, r22
 454:	a4 2e       	mov	r10, r20
//	if ((sizeof (data)/sizeof (data[0])) >= amount){
		write(startAddress);
 456:	62 2f       	mov	r22, r18
 458:	0e 94 03 02 	call	0x406	; 0x406 <_ZN3I2C5writeEh>
		rep_start(I2C_READ);
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	c8 01       	movw	r24, r16
 460:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN3I2C9rep_startEh>
		for (uint8_t i = 0; i < amount - 1; i++){
 464:	ea 2c       	mov	r14, r10
 466:	f1 2c       	mov	r15, r1
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	e8 1a       	sub	r14, r24
 46c:	f1 08       	sbc	r15, r1
 46e:	1e 14       	cp	r1, r14
 470:	1f 04       	cpc	r1, r15
 472:	74 f4       	brge	.+28     	; 0x490 <_ZN3I2C10readXBytesEPhhh+0x54>
 474:	b1 2c       	mov	r11, r1
			data[i] = readAck();
 476:	e6 01       	movw	r28, r12
 478:	cb 0d       	add	r28, r11
 47a:	d1 1d       	adc	r29, r1
 47c:	c8 01       	movw	r24, r16
 47e:	0e 94 10 02 	call	0x420	; 0x420 <_ZN3I2C7readAckEv>
 482:	88 83       	st	Y, r24
void I2C::readXBytes(unsigned char data[], unsigned char amount, unsigned char startAddress)	//data[x] : x >= amount
{
//	if ((sizeof (data)/sizeof (data[0])) >= amount){
		write(startAddress);
		rep_start(I2C_READ);
		for (uint8_t i = 0; i < amount - 1; i++){
 484:	b3 94       	inc	r11
 486:	2b 2d       	mov	r18, r11
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	2e 15       	cp	r18, r14
 48c:	3f 05       	cpc	r19, r15
 48e:	9c f3       	brlt	.-26     	; 0x476 <_ZN3I2C10readXBytesEPhhh+0x3a>
			data[i] = readAck();
		}
		data[amount - 1] = readNak();
 490:	8a 2d       	mov	r24, r10
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	e6 01       	movw	r28, r12
 498:	c8 0f       	add	r28, r24
 49a:	d9 1f       	adc	r29, r25
 49c:	c8 01       	movw	r24, r16
 49e:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3I2C7readNakEv>
 4a2:	88 83       	st	Y, r24
//	}
}
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	ff 90       	pop	r15
 4ae:	ef 90       	pop	r14
 4b0:	df 90       	pop	r13
 4b2:	cf 90       	pop	r12
 4b4:	bf 90       	pop	r11
 4b6:	af 90       	pop	r10
 4b8:	08 95       	ret

000004ba <_ZN3I2CD1Ev>:
		write(data[i]);	
	}
}

// default destructor
I2C::~I2C()
 4ba:	08 95       	ret

000004bc <_Z12_lcd_delay_8h>:
 4bc:	81 50       	subi	r24, 0x01	; 1
 4be:	f0 f7       	brcc	.-4      	; 0x4bc <_Z12_lcd_delay_8h>
 4c0:	08 95       	ret

000004c2 <_ZL11pos_pulse_Ev>:
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_Z12_lcd_delay_8h>
 4c8:	d9 9a       	sbi	0x1b, 1	; 27
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_Z12_lcd_delay_8h>
 4d0:	d9 98       	cbi	0x1b, 1	; 27
 4d2:	08 95       	ret

000004d4 <_Z13_lcd_delay_16j>:
 4d4:	81 50       	subi	r24, 0x01	; 1
 4d6:	90 40       	sbci	r25, 0x00	; 0
 4d8:	e8 f7       	brcc	.-6      	; 0x4d4 <_Z13_lcd_delay_16j>
 4da:	08 95       	ret

000004dc <_Z16lcd_read_commandv>:
 4dc:	cf 93       	push	r28
 4de:	8a b3       	in	r24, 0x1a	; 26
 4e0:	8e 60       	ori	r24, 0x0E	; 14
 4e2:	8a bb       	out	0x1a, r24	; 26
 4e4:	8a b3       	in	r24, 0x1a	; 26
 4e6:	8f 70       	andi	r24, 0x0F	; 15
 4e8:	8a bb       	out	0x1a, r24	; 26
 4ea:	8b b3       	in	r24, 0x1b	; 27
 4ec:	84 6f       	ori	r24, 0xF4	; 244
 4ee:	8b bb       	out	0x1b, r24	; 27
 4f0:	db 98       	cbi	0x1b, 3	; 27
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_Z12_lcd_delay_8h>
 4f8:	d9 9a       	sbi	0x1b, 1	; 27
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_Z12_lcd_delay_8h>
 500:	c9 b3       	in	r28, 0x19	; 25
 502:	d9 98       	cbi	0x1b, 1	; 27
 504:	82 e0       	ldi	r24, 0x02	; 2
 506:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_Z12_lcd_delay_8h>
 50a:	d9 9a       	sbi	0x1b, 1	; 27
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_Z12_lcd_delay_8h>
 512:	89 b3       	in	r24, 0x19	; 25
 514:	c0 7f       	andi	r28, 0xF0	; 240
 516:	82 95       	swap	r24
 518:	8f 70       	andi	r24, 0x0F	; 15
 51a:	d9 98       	cbi	0x1b, 1	; 27
 51c:	8c 2b       	or	r24, r28
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <_ZL4waitv>:
 522:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_Z16lcd_read_commandv>
 526:	88 23       	and	r24, r24
 528:	e4 f3       	brlt	.-8      	; 0x522 <_ZL4waitv>
 52a:	08 95       	ret

0000052c <_Z17lcd_write_commandh>:
 52c:	cf 93       	push	r28
 52e:	c8 2f       	mov	r28, r24
 530:	0e 94 91 02 	call	0x522	; 0x522 <_ZL4waitv>
 534:	8a b3       	in	r24, 0x1a	; 26
 536:	8e 6f       	ori	r24, 0xFE	; 254
 538:	8a bb       	out	0x1a, r24	; 26
 53a:	8b b3       	in	r24, 0x1b	; 27
 53c:	81 70       	andi	r24, 0x01	; 1
 53e:	8b bb       	out	0x1b, r24	; 27
 540:	8b b3       	in	r24, 0x1b	; 27
 542:	9c 2f       	mov	r25, r28
 544:	90 7f       	andi	r25, 0xF0	; 240
 546:	89 2b       	or	r24, r25
 548:	8b bb       	out	0x1b, r24	; 27
 54a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZL11pos_pulse_Ev>
 54e:	8b b3       	in	r24, 0x1b	; 27
 550:	81 70       	andi	r24, 0x01	; 1
 552:	8b bb       	out	0x1b, r24	; 27
 554:	2b b3       	in	r18, 0x1b	; 27
 556:	30 e1       	ldi	r19, 0x10	; 16
 558:	c3 9f       	mul	r28, r19
 55a:	c0 01       	movw	r24, r0
 55c:	11 24       	eor	r1, r1
 55e:	82 2b       	or	r24, r18
 560:	8b bb       	out	0x1b, r24	; 27
 562:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZL11pos_pulse_Ev>
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <_Z14lcd_write_datah>:
 56a:	cf 93       	push	r28
 56c:	c8 2f       	mov	r28, r24
 56e:	0e 94 91 02 	call	0x522	; 0x522 <_ZL4waitv>
 572:	8a b3       	in	r24, 0x1a	; 26
 574:	8e 6f       	ori	r24, 0xFE	; 254
 576:	8a bb       	out	0x1a, r24	; 26
 578:	8b b3       	in	r24, 0x1b	; 27
 57a:	81 70       	andi	r24, 0x01	; 1
 57c:	8b bb       	out	0x1b, r24	; 27
 57e:	8b b3       	in	r24, 0x1b	; 27
 580:	88 60       	ori	r24, 0x08	; 8
 582:	9c 2f       	mov	r25, r28
 584:	90 7f       	andi	r25, 0xF0	; 240
 586:	89 2b       	or	r24, r25
 588:	8b bb       	out	0x1b, r24	; 27
 58a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZL11pos_pulse_Ev>
 58e:	8b b3       	in	r24, 0x1b	; 27
 590:	81 70       	andi	r24, 0x01	; 1
 592:	8b bb       	out	0x1b, r24	; 27
 594:	2b b3       	in	r18, 0x1b	; 27
 596:	28 60       	ori	r18, 0x08	; 8
 598:	30 e1       	ldi	r19, 0x10	; 16
 59a:	c3 9f       	mul	r28, r19
 59c:	c0 01       	movw	r24, r0
 59e:	11 24       	eor	r1, r1
 5a0:	82 2b       	or	r24, r18
 5a2:	8b bb       	out	0x1b, r24	; 27
 5a4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZL11pos_pulse_Ev>
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

000005ac <_Z7lcd_clsv>:
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 96 02 	call	0x52c	; 0x52c <_Z17lcd_write_commandh>
 5b2:	08 95       	ret

000005b4 <_Z8lcd_initv>:
 5b4:	8a b3       	in	r24, 0x1a	; 26
 5b6:	8e 6f       	ori	r24, 0xFE	; 254
 5b8:	8a bb       	out	0x1a, r24	; 26
 5ba:	8e ef       	ldi	r24, 0xFE	; 254
 5bc:	95 e3       	ldi	r25, 0x35	; 53
 5be:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_Z13_lcd_delay_16j>
 5c2:	8b b3       	in	r24, 0x1b	; 27
 5c4:	81 70       	andi	r24, 0x01	; 1
 5c6:	8b bb       	out	0x1b, r24	; 27
 5c8:	8b b3       	in	r24, 0x1b	; 27
 5ca:	80 63       	ori	r24, 0x30	; 48
 5cc:	8b bb       	out	0x1b, r24	; 27
 5ce:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZL11pos_pulse_Ev>
 5d2:	82 ec       	ldi	r24, 0xC2	; 194
 5d4:	9e e0       	ldi	r25, 0x0E	; 14
 5d6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_Z13_lcd_delay_16j>
 5da:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZL11pos_pulse_Ev>
 5de:	8c e5       	ldi	r24, 0x5C	; 92
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_Z13_lcd_delay_16j>
 5e6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZL11pos_pulse_Ev>
 5ea:	8c e5       	ldi	r24, 0x5C	; 92
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_Z13_lcd_delay_16j>
 5f2:	dc 98       	cbi	0x1b, 4	; 27
 5f4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZL11pos_pulse_Ev>
 5f8:	8c e5       	ldi	r24, 0x5C	; 92
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_Z13_lcd_delay_16j>
 600:	88 e2       	ldi	r24, 0x28	; 40
 602:	0e 94 96 02 	call	0x52c	; 0x52c <_Z17lcd_write_commandh>
 606:	86 e0       	ldi	r24, 0x06	; 6
 608:	0e 94 96 02 	call	0x52c	; 0x52c <_Z17lcd_write_commandh>
 60c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z7lcd_clsv>
 610:	8f e0       	ldi	r24, 0x0F	; 15
 612:	0e 94 96 02 	call	0x52c	; 0x52c <_Z17lcd_write_commandh>
 616:	08 95       	ret

00000618 <_Z8lcd_homev>:
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	0e 94 96 02 	call	0x52c	; 0x52c <_Z17lcd_write_commandh>
 61e:	08 95       	ret

00000620 <_Z10lcd_cursorbb>:
 620:	88 23       	and	r24, r24
 622:	11 f0       	breq	.+4      	; 0x628 <_Z10lcd_cursorbb+0x8>
 624:	8e e0       	ldi	r24, 0x0E	; 14
 626:	01 c0       	rjmp	.+2      	; 0x62a <_Z10lcd_cursorbb+0xa>
 628:	8c e0       	ldi	r24, 0x0C	; 12
 62a:	86 0f       	add	r24, r22
 62c:	0e 94 96 02 	call	0x52c	; 0x52c <_Z17lcd_write_commandh>
 630:	08 95       	ret

00000632 <_Z8lcd_gotohh>:
 632:	82 30       	cpi	r24, 0x02	; 2
 634:	50 f4       	brcc	.+20     	; 0x64a <_Z8lcd_gotohh+0x18>
 636:	60 31       	cpi	r22, 0x10	; 16
 638:	40 f4       	brcc	.+16     	; 0x64a <_Z8lcd_gotohh+0x18>
 63a:	90 e4       	ldi	r25, 0x40	; 64
 63c:	89 9f       	mul	r24, r25
 63e:	60 0d       	add	r22, r0
 640:	11 24       	eor	r1, r1
 642:	86 2f       	mov	r24, r22
 644:	80 58       	subi	r24, 0x80	; 128
 646:	0e 94 96 02 	call	0x52c	; 0x52c <_Z17lcd_write_commandh>
 64a:	08 95       	ret

0000064c <_Z8lcd_putsPc>:
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	ec 01       	movw	r28, r24
 652:	88 81       	ld	r24, Y
 654:	88 23       	and	r24, r24
 656:	31 f0       	breq	.+12     	; 0x664 <_Z8lcd_putsPc+0x18>
 658:	21 96       	adiw	r28, 0x01	; 1
 65a:	0e 94 b5 02 	call	0x56a	; 0x56a <_Z14lcd_write_datah>
 65e:	89 91       	ld	r24, Y+
 660:	81 11       	cpse	r24, r1
 662:	fb cf       	rjmp	.-10     	; 0x65a <_Z8lcd_putsPc+0xe>
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <__tablejump2__>:
 66a:	ee 0f       	add	r30, r30
 66c:	ff 1f       	adc	r31, r31

0000066e <__tablejump__>:
 66e:	05 90       	lpm	r0, Z+
 670:	f4 91       	lpm	r31, Z
 672:	e0 2d       	mov	r30, r0
 674:	09 94       	ijmp

00000676 <snprintf>:
 676:	ae e0       	ldi	r26, 0x0E	; 14
 678:	b0 e0       	ldi	r27, 0x00	; 0
 67a:	e1 e4       	ldi	r30, 0x41	; 65
 67c:	f3 e0       	ldi	r31, 0x03	; 3
 67e:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__prologue_saves__+0x1c>
 682:	0d 89       	ldd	r16, Y+21	; 0x15
 684:	1e 89       	ldd	r17, Y+22	; 0x16
 686:	8f 89       	ldd	r24, Y+23	; 0x17
 688:	98 8d       	ldd	r25, Y+24	; 0x18
 68a:	26 e0       	ldi	r18, 0x06	; 6
 68c:	2c 83       	std	Y+4, r18	; 0x04
 68e:	1a 83       	std	Y+2, r17	; 0x02
 690:	09 83       	std	Y+1, r16	; 0x01
 692:	97 ff       	sbrs	r25, 7
 694:	02 c0       	rjmp	.+4      	; 0x69a <snprintf+0x24>
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	90 e8       	ldi	r25, 0x80	; 128
 69a:	01 97       	sbiw	r24, 0x01	; 1
 69c:	9e 83       	std	Y+6, r25	; 0x06
 69e:	8d 83       	std	Y+5, r24	; 0x05
 6a0:	ae 01       	movw	r20, r28
 6a2:	45 5e       	subi	r20, 0xE5	; 229
 6a4:	5f 4f       	sbci	r21, 0xFF	; 255
 6a6:	69 8d       	ldd	r22, Y+25	; 0x19
 6a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
 6aa:	ce 01       	movw	r24, r28
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vfprintf>
 6b2:	4d 81       	ldd	r20, Y+5	; 0x05
 6b4:	5e 81       	ldd	r21, Y+6	; 0x06
 6b6:	57 fd       	sbrc	r21, 7
 6b8:	0a c0       	rjmp	.+20     	; 0x6ce <snprintf+0x58>
 6ba:	2f 81       	ldd	r18, Y+7	; 0x07
 6bc:	38 85       	ldd	r19, Y+8	; 0x08
 6be:	42 17       	cp	r20, r18
 6c0:	53 07       	cpc	r21, r19
 6c2:	0c f4       	brge	.+2      	; 0x6c6 <snprintf+0x50>
 6c4:	9a 01       	movw	r18, r20
 6c6:	f8 01       	movw	r30, r16
 6c8:	e2 0f       	add	r30, r18
 6ca:	f3 1f       	adc	r31, r19
 6cc:	10 82       	st	Z, r1
 6ce:	2e 96       	adiw	r28, 0x0e	; 14
 6d0:	e4 e0       	ldi	r30, 0x04	; 4
 6d2:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__epilogue_restores__+0x1c>

000006d6 <vfprintf>:
 6d6:	ac e0       	ldi	r26, 0x0C	; 12
 6d8:	b0 e0       	ldi	r27, 0x00	; 0
 6da:	e1 e7       	ldi	r30, 0x71	; 113
 6dc:	f3 e0       	ldi	r31, 0x03	; 3
 6de:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__prologue_saves__>
 6e2:	7c 01       	movw	r14, r24
 6e4:	6b 01       	movw	r12, r22
 6e6:	8a 01       	movw	r16, r20
 6e8:	fc 01       	movw	r30, r24
 6ea:	17 82       	std	Z+7, r1	; 0x07
 6ec:	16 82       	std	Z+6, r1	; 0x06
 6ee:	83 81       	ldd	r24, Z+3	; 0x03
 6f0:	81 ff       	sbrs	r24, 1
 6f2:	bd c1       	rjmp	.+890    	; 0xa6e <__stack+0x20f>
 6f4:	ce 01       	movw	r24, r28
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	4c 01       	movw	r8, r24
 6fa:	f7 01       	movw	r30, r14
 6fc:	93 81       	ldd	r25, Z+3	; 0x03
 6fe:	f6 01       	movw	r30, r12
 700:	93 fd       	sbrc	r25, 3
 702:	85 91       	lpm	r24, Z+
 704:	93 ff       	sbrs	r25, 3
 706:	81 91       	ld	r24, Z+
 708:	6f 01       	movw	r12, r30
 70a:	88 23       	and	r24, r24
 70c:	09 f4       	brne	.+2      	; 0x710 <vfprintf+0x3a>
 70e:	ab c1       	rjmp	.+854    	; 0xa66 <__stack+0x207>
 710:	85 32       	cpi	r24, 0x25	; 37
 712:	39 f4       	brne	.+14     	; 0x722 <vfprintf+0x4c>
 714:	93 fd       	sbrc	r25, 3
 716:	85 91       	lpm	r24, Z+
 718:	93 ff       	sbrs	r25, 3
 71a:	81 91       	ld	r24, Z+
 71c:	6f 01       	movw	r12, r30
 71e:	85 32       	cpi	r24, 0x25	; 37
 720:	29 f4       	brne	.+10     	; 0x72c <vfprintf+0x56>
 722:	b7 01       	movw	r22, r14
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 72a:	e7 cf       	rjmp	.-50     	; 0x6fa <vfprintf+0x24>
 72c:	51 2c       	mov	r5, r1
 72e:	31 2c       	mov	r3, r1
 730:	20 e0       	ldi	r18, 0x00	; 0
 732:	20 32       	cpi	r18, 0x20	; 32
 734:	a0 f4       	brcc	.+40     	; 0x75e <vfprintf+0x88>
 736:	8b 32       	cpi	r24, 0x2B	; 43
 738:	69 f0       	breq	.+26     	; 0x754 <vfprintf+0x7e>
 73a:	30 f4       	brcc	.+12     	; 0x748 <vfprintf+0x72>
 73c:	80 32       	cpi	r24, 0x20	; 32
 73e:	59 f0       	breq	.+22     	; 0x756 <vfprintf+0x80>
 740:	83 32       	cpi	r24, 0x23	; 35
 742:	69 f4       	brne	.+26     	; 0x75e <vfprintf+0x88>
 744:	20 61       	ori	r18, 0x10	; 16
 746:	2c c0       	rjmp	.+88     	; 0x7a0 <vfprintf+0xca>
 748:	8d 32       	cpi	r24, 0x2D	; 45
 74a:	39 f0       	breq	.+14     	; 0x75a <vfprintf+0x84>
 74c:	80 33       	cpi	r24, 0x30	; 48
 74e:	39 f4       	brne	.+14     	; 0x75e <vfprintf+0x88>
 750:	21 60       	ori	r18, 0x01	; 1
 752:	26 c0       	rjmp	.+76     	; 0x7a0 <vfprintf+0xca>
 754:	22 60       	ori	r18, 0x02	; 2
 756:	24 60       	ori	r18, 0x04	; 4
 758:	23 c0       	rjmp	.+70     	; 0x7a0 <vfprintf+0xca>
 75a:	28 60       	ori	r18, 0x08	; 8
 75c:	21 c0       	rjmp	.+66     	; 0x7a0 <vfprintf+0xca>
 75e:	27 fd       	sbrc	r18, 7
 760:	27 c0       	rjmp	.+78     	; 0x7b0 <vfprintf+0xda>
 762:	30 ed       	ldi	r19, 0xD0	; 208
 764:	38 0f       	add	r19, r24
 766:	3a 30       	cpi	r19, 0x0A	; 10
 768:	78 f4       	brcc	.+30     	; 0x788 <vfprintf+0xb2>
 76a:	26 ff       	sbrs	r18, 6
 76c:	06 c0       	rjmp	.+12     	; 0x77a <vfprintf+0xa4>
 76e:	fa e0       	ldi	r31, 0x0A	; 10
 770:	5f 9e       	mul	r5, r31
 772:	30 0d       	add	r19, r0
 774:	11 24       	eor	r1, r1
 776:	53 2e       	mov	r5, r19
 778:	13 c0       	rjmp	.+38     	; 0x7a0 <vfprintf+0xca>
 77a:	8a e0       	ldi	r24, 0x0A	; 10
 77c:	38 9e       	mul	r3, r24
 77e:	30 0d       	add	r19, r0
 780:	11 24       	eor	r1, r1
 782:	33 2e       	mov	r3, r19
 784:	20 62       	ori	r18, 0x20	; 32
 786:	0c c0       	rjmp	.+24     	; 0x7a0 <vfprintf+0xca>
 788:	8e 32       	cpi	r24, 0x2E	; 46
 78a:	21 f4       	brne	.+8      	; 0x794 <vfprintf+0xbe>
 78c:	26 fd       	sbrc	r18, 6
 78e:	6b c1       	rjmp	.+726    	; 0xa66 <__stack+0x207>
 790:	20 64       	ori	r18, 0x40	; 64
 792:	06 c0       	rjmp	.+12     	; 0x7a0 <vfprintf+0xca>
 794:	8c 36       	cpi	r24, 0x6C	; 108
 796:	11 f4       	brne	.+4      	; 0x79c <vfprintf+0xc6>
 798:	20 68       	ori	r18, 0x80	; 128
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <vfprintf+0xca>
 79c:	88 36       	cpi	r24, 0x68	; 104
 79e:	41 f4       	brne	.+16     	; 0x7b0 <vfprintf+0xda>
 7a0:	f6 01       	movw	r30, r12
 7a2:	93 fd       	sbrc	r25, 3
 7a4:	85 91       	lpm	r24, Z+
 7a6:	93 ff       	sbrs	r25, 3
 7a8:	81 91       	ld	r24, Z+
 7aa:	6f 01       	movw	r12, r30
 7ac:	81 11       	cpse	r24, r1
 7ae:	c1 cf       	rjmp	.-126    	; 0x732 <vfprintf+0x5c>
 7b0:	98 2f       	mov	r25, r24
 7b2:	9f 7d       	andi	r25, 0xDF	; 223
 7b4:	95 54       	subi	r25, 0x45	; 69
 7b6:	93 30       	cpi	r25, 0x03	; 3
 7b8:	28 f4       	brcc	.+10     	; 0x7c4 <vfprintf+0xee>
 7ba:	0c 5f       	subi	r16, 0xFC	; 252
 7bc:	1f 4f       	sbci	r17, 0xFF	; 255
 7be:	ff e3       	ldi	r31, 0x3F	; 63
 7c0:	f9 83       	std	Y+1, r31	; 0x01
 7c2:	0d c0       	rjmp	.+26     	; 0x7de <vfprintf+0x108>
 7c4:	83 36       	cpi	r24, 0x63	; 99
 7c6:	31 f0       	breq	.+12     	; 0x7d4 <vfprintf+0xfe>
 7c8:	83 37       	cpi	r24, 0x73	; 115
 7ca:	71 f0       	breq	.+28     	; 0x7e8 <vfprintf+0x112>
 7cc:	83 35       	cpi	r24, 0x53	; 83
 7ce:	09 f0       	breq	.+2      	; 0x7d2 <vfprintf+0xfc>
 7d0:	5b c0       	rjmp	.+182    	; 0x888 <__stack+0x29>
 7d2:	22 c0       	rjmp	.+68     	; 0x818 <vfprintf+0x142>
 7d4:	f8 01       	movw	r30, r16
 7d6:	80 81       	ld	r24, Z
 7d8:	89 83       	std	Y+1, r24	; 0x01
 7da:	0e 5f       	subi	r16, 0xFE	; 254
 7dc:	1f 4f       	sbci	r17, 0xFF	; 255
 7de:	44 24       	eor	r4, r4
 7e0:	43 94       	inc	r4
 7e2:	51 2c       	mov	r5, r1
 7e4:	54 01       	movw	r10, r8
 7e6:	15 c0       	rjmp	.+42     	; 0x812 <vfprintf+0x13c>
 7e8:	38 01       	movw	r6, r16
 7ea:	f2 e0       	ldi	r31, 0x02	; 2
 7ec:	6f 0e       	add	r6, r31
 7ee:	71 1c       	adc	r7, r1
 7f0:	f8 01       	movw	r30, r16
 7f2:	a0 80       	ld	r10, Z
 7f4:	b1 80       	ldd	r11, Z+1	; 0x01
 7f6:	26 ff       	sbrs	r18, 6
 7f8:	03 c0       	rjmp	.+6      	; 0x800 <vfprintf+0x12a>
 7fa:	65 2d       	mov	r22, r5
 7fc:	70 e0       	ldi	r23, 0x00	; 0
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <vfprintf+0x12e>
 800:	6f ef       	ldi	r22, 0xFF	; 255
 802:	7f ef       	ldi	r23, 0xFF	; 255
 804:	c5 01       	movw	r24, r10
 806:	2c 87       	std	Y+12, r18	; 0x0c
 808:	0e 94 48 05 	call	0xa90	; 0xa90 <strnlen>
 80c:	2c 01       	movw	r4, r24
 80e:	83 01       	movw	r16, r6
 810:	2c 85       	ldd	r18, Y+12	; 0x0c
 812:	2f 77       	andi	r18, 0x7F	; 127
 814:	22 2e       	mov	r2, r18
 816:	17 c0       	rjmp	.+46     	; 0x846 <vfprintf+0x170>
 818:	38 01       	movw	r6, r16
 81a:	f2 e0       	ldi	r31, 0x02	; 2
 81c:	6f 0e       	add	r6, r31
 81e:	71 1c       	adc	r7, r1
 820:	f8 01       	movw	r30, r16
 822:	a0 80       	ld	r10, Z
 824:	b1 80       	ldd	r11, Z+1	; 0x01
 826:	26 ff       	sbrs	r18, 6
 828:	03 c0       	rjmp	.+6      	; 0x830 <vfprintf+0x15a>
 82a:	65 2d       	mov	r22, r5
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <vfprintf+0x15e>
 830:	6f ef       	ldi	r22, 0xFF	; 255
 832:	7f ef       	ldi	r23, 0xFF	; 255
 834:	c5 01       	movw	r24, r10
 836:	2c 87       	std	Y+12, r18	; 0x0c
 838:	0e 94 3d 05 	call	0xa7a	; 0xa7a <strnlen_P>
 83c:	2c 01       	movw	r4, r24
 83e:	2c 85       	ldd	r18, Y+12	; 0x0c
 840:	20 68       	ori	r18, 0x80	; 128
 842:	22 2e       	mov	r2, r18
 844:	83 01       	movw	r16, r6
 846:	23 fc       	sbrc	r2, 3
 848:	1b c0       	rjmp	.+54     	; 0x880 <__stack+0x21>
 84a:	83 2d       	mov	r24, r3
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	48 16       	cp	r4, r24
 850:	59 06       	cpc	r5, r25
 852:	b0 f4       	brcc	.+44     	; 0x880 <__stack+0x21>
 854:	b7 01       	movw	r22, r14
 856:	80 e2       	ldi	r24, 0x20	; 32
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 85e:	3a 94       	dec	r3
 860:	f4 cf       	rjmp	.-24     	; 0x84a <vfprintf+0x174>
 862:	f5 01       	movw	r30, r10
 864:	27 fc       	sbrc	r2, 7
 866:	85 91       	lpm	r24, Z+
 868:	27 fe       	sbrs	r2, 7
 86a:	81 91       	ld	r24, Z+
 86c:	5f 01       	movw	r10, r30
 86e:	b7 01       	movw	r22, r14
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 876:	31 10       	cpse	r3, r1
 878:	3a 94       	dec	r3
 87a:	f1 e0       	ldi	r31, 0x01	; 1
 87c:	4f 1a       	sub	r4, r31
 87e:	51 08       	sbc	r5, r1
 880:	41 14       	cp	r4, r1
 882:	51 04       	cpc	r5, r1
 884:	71 f7       	brne	.-36     	; 0x862 <__stack+0x3>
 886:	e5 c0       	rjmp	.+458    	; 0xa52 <__stack+0x1f3>
 888:	84 36       	cpi	r24, 0x64	; 100
 88a:	11 f0       	breq	.+4      	; 0x890 <__stack+0x31>
 88c:	89 36       	cpi	r24, 0x69	; 105
 88e:	39 f5       	brne	.+78     	; 0x8de <__stack+0x7f>
 890:	f8 01       	movw	r30, r16
 892:	27 ff       	sbrs	r18, 7
 894:	07 c0       	rjmp	.+14     	; 0x8a4 <__stack+0x45>
 896:	60 81       	ld	r22, Z
 898:	71 81       	ldd	r23, Z+1	; 0x01
 89a:	82 81       	ldd	r24, Z+2	; 0x02
 89c:	93 81       	ldd	r25, Z+3	; 0x03
 89e:	0c 5f       	subi	r16, 0xFC	; 252
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <__stack+0x55>
 8a4:	60 81       	ld	r22, Z
 8a6:	71 81       	ldd	r23, Z+1	; 0x01
 8a8:	88 27       	eor	r24, r24
 8aa:	77 fd       	sbrc	r23, 7
 8ac:	80 95       	com	r24
 8ae:	98 2f       	mov	r25, r24
 8b0:	0e 5f       	subi	r16, 0xFE	; 254
 8b2:	1f 4f       	sbci	r17, 0xFF	; 255
 8b4:	2f 76       	andi	r18, 0x6F	; 111
 8b6:	b2 2e       	mov	r11, r18
 8b8:	97 ff       	sbrs	r25, 7
 8ba:	09 c0       	rjmp	.+18     	; 0x8ce <__stack+0x6f>
 8bc:	90 95       	com	r25
 8be:	80 95       	com	r24
 8c0:	70 95       	com	r23
 8c2:	61 95       	neg	r22
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255
 8c6:	8f 4f       	sbci	r24, 0xFF	; 255
 8c8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ca:	20 68       	ori	r18, 0x80	; 128
 8cc:	b2 2e       	mov	r11, r18
 8ce:	2a e0       	ldi	r18, 0x0A	; 10
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	a4 01       	movw	r20, r8
 8d4:	0e 94 85 05 	call	0xb0a	; 0xb0a <__ultoa_invert>
 8d8:	a8 2e       	mov	r10, r24
 8da:	a8 18       	sub	r10, r8
 8dc:	44 c0       	rjmp	.+136    	; 0x966 <__stack+0x107>
 8de:	85 37       	cpi	r24, 0x75	; 117
 8e0:	29 f4       	brne	.+10     	; 0x8ec <__stack+0x8d>
 8e2:	2f 7e       	andi	r18, 0xEF	; 239
 8e4:	b2 2e       	mov	r11, r18
 8e6:	2a e0       	ldi	r18, 0x0A	; 10
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	25 c0       	rjmp	.+74     	; 0x936 <__stack+0xd7>
 8ec:	f2 2f       	mov	r31, r18
 8ee:	f9 7f       	andi	r31, 0xF9	; 249
 8f0:	bf 2e       	mov	r11, r31
 8f2:	8f 36       	cpi	r24, 0x6F	; 111
 8f4:	c1 f0       	breq	.+48     	; 0x926 <__stack+0xc7>
 8f6:	18 f4       	brcc	.+6      	; 0x8fe <__stack+0x9f>
 8f8:	88 35       	cpi	r24, 0x58	; 88
 8fa:	79 f0       	breq	.+30     	; 0x91a <__stack+0xbb>
 8fc:	b4 c0       	rjmp	.+360    	; 0xa66 <__stack+0x207>
 8fe:	80 37       	cpi	r24, 0x70	; 112
 900:	19 f0       	breq	.+6      	; 0x908 <__stack+0xa9>
 902:	88 37       	cpi	r24, 0x78	; 120
 904:	21 f0       	breq	.+8      	; 0x90e <__stack+0xaf>
 906:	af c0       	rjmp	.+350    	; 0xa66 <__stack+0x207>
 908:	2f 2f       	mov	r18, r31
 90a:	20 61       	ori	r18, 0x10	; 16
 90c:	b2 2e       	mov	r11, r18
 90e:	b4 fe       	sbrs	r11, 4
 910:	0d c0       	rjmp	.+26     	; 0x92c <__stack+0xcd>
 912:	8b 2d       	mov	r24, r11
 914:	84 60       	ori	r24, 0x04	; 4
 916:	b8 2e       	mov	r11, r24
 918:	09 c0       	rjmp	.+18     	; 0x92c <__stack+0xcd>
 91a:	24 ff       	sbrs	r18, 4
 91c:	0a c0       	rjmp	.+20     	; 0x932 <__stack+0xd3>
 91e:	9f 2f       	mov	r25, r31
 920:	96 60       	ori	r25, 0x06	; 6
 922:	b9 2e       	mov	r11, r25
 924:	06 c0       	rjmp	.+12     	; 0x932 <__stack+0xd3>
 926:	28 e0       	ldi	r18, 0x08	; 8
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	05 c0       	rjmp	.+10     	; 0x936 <__stack+0xd7>
 92c:	20 e1       	ldi	r18, 0x10	; 16
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0xd7>
 932:	20 e1       	ldi	r18, 0x10	; 16
 934:	32 e0       	ldi	r19, 0x02	; 2
 936:	f8 01       	movw	r30, r16
 938:	b7 fe       	sbrs	r11, 7
 93a:	07 c0       	rjmp	.+14     	; 0x94a <__stack+0xeb>
 93c:	60 81       	ld	r22, Z
 93e:	71 81       	ldd	r23, Z+1	; 0x01
 940:	82 81       	ldd	r24, Z+2	; 0x02
 942:	93 81       	ldd	r25, Z+3	; 0x03
 944:	0c 5f       	subi	r16, 0xFC	; 252
 946:	1f 4f       	sbci	r17, 0xFF	; 255
 948:	06 c0       	rjmp	.+12     	; 0x956 <__stack+0xf7>
 94a:	60 81       	ld	r22, Z
 94c:	71 81       	ldd	r23, Z+1	; 0x01
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	0e 5f       	subi	r16, 0xFE	; 254
 954:	1f 4f       	sbci	r17, 0xFF	; 255
 956:	a4 01       	movw	r20, r8
 958:	0e 94 85 05 	call	0xb0a	; 0xb0a <__ultoa_invert>
 95c:	a8 2e       	mov	r10, r24
 95e:	a8 18       	sub	r10, r8
 960:	fb 2d       	mov	r31, r11
 962:	ff 77       	andi	r31, 0x7F	; 127
 964:	bf 2e       	mov	r11, r31
 966:	b6 fe       	sbrs	r11, 6
 968:	0b c0       	rjmp	.+22     	; 0x980 <__stack+0x121>
 96a:	2b 2d       	mov	r18, r11
 96c:	2e 7f       	andi	r18, 0xFE	; 254
 96e:	a5 14       	cp	r10, r5
 970:	50 f4       	brcc	.+20     	; 0x986 <__stack+0x127>
 972:	b4 fe       	sbrs	r11, 4
 974:	0a c0       	rjmp	.+20     	; 0x98a <__stack+0x12b>
 976:	b2 fc       	sbrc	r11, 2
 978:	08 c0       	rjmp	.+16     	; 0x98a <__stack+0x12b>
 97a:	2b 2d       	mov	r18, r11
 97c:	2e 7e       	andi	r18, 0xEE	; 238
 97e:	05 c0       	rjmp	.+10     	; 0x98a <__stack+0x12b>
 980:	7a 2c       	mov	r7, r10
 982:	2b 2d       	mov	r18, r11
 984:	03 c0       	rjmp	.+6      	; 0x98c <__stack+0x12d>
 986:	7a 2c       	mov	r7, r10
 988:	01 c0       	rjmp	.+2      	; 0x98c <__stack+0x12d>
 98a:	75 2c       	mov	r7, r5
 98c:	24 ff       	sbrs	r18, 4
 98e:	0d c0       	rjmp	.+26     	; 0x9aa <__stack+0x14b>
 990:	fe 01       	movw	r30, r28
 992:	ea 0d       	add	r30, r10
 994:	f1 1d       	adc	r31, r1
 996:	80 81       	ld	r24, Z
 998:	80 33       	cpi	r24, 0x30	; 48
 99a:	11 f4       	brne	.+4      	; 0x9a0 <__stack+0x141>
 99c:	29 7e       	andi	r18, 0xE9	; 233
 99e:	09 c0       	rjmp	.+18     	; 0x9b2 <__stack+0x153>
 9a0:	22 ff       	sbrs	r18, 2
 9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <__stack+0x151>
 9a4:	73 94       	inc	r7
 9a6:	73 94       	inc	r7
 9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__stack+0x153>
 9aa:	82 2f       	mov	r24, r18
 9ac:	86 78       	andi	r24, 0x86	; 134
 9ae:	09 f0       	breq	.+2      	; 0x9b2 <__stack+0x153>
 9b0:	73 94       	inc	r7
 9b2:	23 fd       	sbrc	r18, 3
 9b4:	13 c0       	rjmp	.+38     	; 0x9dc <__stack+0x17d>
 9b6:	20 ff       	sbrs	r18, 0
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <__stack+0x167>
 9ba:	5a 2c       	mov	r5, r10
 9bc:	73 14       	cp	r7, r3
 9be:	18 f4       	brcc	.+6      	; 0x9c6 <__stack+0x167>
 9c0:	53 0c       	add	r5, r3
 9c2:	57 18       	sub	r5, r7
 9c4:	73 2c       	mov	r7, r3
 9c6:	73 14       	cp	r7, r3
 9c8:	68 f4       	brcc	.+26     	; 0x9e4 <__stack+0x185>
 9ca:	b7 01       	movw	r22, r14
 9cc:	80 e2       	ldi	r24, 0x20	; 32
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	2c 87       	std	Y+12, r18	; 0x0c
 9d2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 9d6:	73 94       	inc	r7
 9d8:	2c 85       	ldd	r18, Y+12	; 0x0c
 9da:	f5 cf       	rjmp	.-22     	; 0x9c6 <__stack+0x167>
 9dc:	73 14       	cp	r7, r3
 9de:	10 f4       	brcc	.+4      	; 0x9e4 <__stack+0x185>
 9e0:	37 18       	sub	r3, r7
 9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <__stack+0x187>
 9e4:	31 2c       	mov	r3, r1
 9e6:	24 ff       	sbrs	r18, 4
 9e8:	12 c0       	rjmp	.+36     	; 0xa0e <__stack+0x1af>
 9ea:	b7 01       	movw	r22, r14
 9ec:	80 e3       	ldi	r24, 0x30	; 48
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	2c 87       	std	Y+12, r18	; 0x0c
 9f2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 9f6:	2c 85       	ldd	r18, Y+12	; 0x0c
 9f8:	22 ff       	sbrs	r18, 2
 9fa:	17 c0       	rjmp	.+46     	; 0xa2a <__stack+0x1cb>
 9fc:	21 ff       	sbrs	r18, 1
 9fe:	03 c0       	rjmp	.+6      	; 0xa06 <__stack+0x1a7>
 a00:	88 e5       	ldi	r24, 0x58	; 88
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <__stack+0x1ab>
 a06:	88 e7       	ldi	r24, 0x78	; 120
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	b7 01       	movw	r22, r14
 a0c:	0c c0       	rjmp	.+24     	; 0xa26 <__stack+0x1c7>
 a0e:	82 2f       	mov	r24, r18
 a10:	86 78       	andi	r24, 0x86	; 134
 a12:	59 f0       	breq	.+22     	; 0xa2a <__stack+0x1cb>
 a14:	21 fd       	sbrc	r18, 1
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <__stack+0x1bd>
 a18:	80 e2       	ldi	r24, 0x20	; 32
 a1a:	01 c0       	rjmp	.+2      	; 0xa1e <__stack+0x1bf>
 a1c:	8b e2       	ldi	r24, 0x2B	; 43
 a1e:	27 fd       	sbrc	r18, 7
 a20:	8d e2       	ldi	r24, 0x2D	; 45
 a22:	b7 01       	movw	r22, r14
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 a2a:	a5 14       	cp	r10, r5
 a2c:	38 f4       	brcc	.+14     	; 0xa3c <__stack+0x1dd>
 a2e:	b7 01       	movw	r22, r14
 a30:	80 e3       	ldi	r24, 0x30	; 48
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 a38:	5a 94       	dec	r5
 a3a:	f7 cf       	rjmp	.-18     	; 0xa2a <__stack+0x1cb>
 a3c:	aa 94       	dec	r10
 a3e:	f4 01       	movw	r30, r8
 a40:	ea 0d       	add	r30, r10
 a42:	f1 1d       	adc	r31, r1
 a44:	80 81       	ld	r24, Z
 a46:	b7 01       	movw	r22, r14
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 a4e:	a1 10       	cpse	r10, r1
 a50:	f5 cf       	rjmp	.-22     	; 0xa3c <__stack+0x1dd>
 a52:	33 20       	and	r3, r3
 a54:	09 f4       	brne	.+2      	; 0xa58 <__stack+0x1f9>
 a56:	51 ce       	rjmp	.-862    	; 0x6fa <vfprintf+0x24>
 a58:	b7 01       	movw	r22, r14
 a5a:	80 e2       	ldi	r24, 0x20	; 32
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 a62:	3a 94       	dec	r3
 a64:	f6 cf       	rjmp	.-20     	; 0xa52 <__stack+0x1f3>
 a66:	f7 01       	movw	r30, r14
 a68:	86 81       	ldd	r24, Z+6	; 0x06
 a6a:	97 81       	ldd	r25, Z+7	; 0x07
 a6c:	02 c0       	rjmp	.+4      	; 0xa72 <__stack+0x213>
 a6e:	8f ef       	ldi	r24, 0xFF	; 255
 a70:	9f ef       	ldi	r25, 0xFF	; 255
 a72:	2c 96       	adiw	r28, 0x0c	; 12
 a74:	e2 e1       	ldi	r30, 0x12	; 18
 a76:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__epilogue_restores__>

00000a7a <strnlen_P>:
 a7a:	fc 01       	movw	r30, r24
 a7c:	05 90       	lpm	r0, Z+
 a7e:	61 50       	subi	r22, 0x01	; 1
 a80:	70 40       	sbci	r23, 0x00	; 0
 a82:	01 10       	cpse	r0, r1
 a84:	d8 f7       	brcc	.-10     	; 0xa7c <strnlen_P+0x2>
 a86:	80 95       	com	r24
 a88:	90 95       	com	r25
 a8a:	8e 0f       	add	r24, r30
 a8c:	9f 1f       	adc	r25, r31
 a8e:	08 95       	ret

00000a90 <strnlen>:
 a90:	fc 01       	movw	r30, r24
 a92:	61 50       	subi	r22, 0x01	; 1
 a94:	70 40       	sbci	r23, 0x00	; 0
 a96:	01 90       	ld	r0, Z+
 a98:	01 10       	cpse	r0, r1
 a9a:	d8 f7       	brcc	.-10     	; 0xa92 <strnlen+0x2>
 a9c:	80 95       	com	r24
 a9e:	90 95       	com	r25
 aa0:	8e 0f       	add	r24, r30
 aa2:	9f 1f       	adc	r25, r31
 aa4:	08 95       	ret

00000aa6 <fputc>:
 aa6:	0f 93       	push	r16
 aa8:	1f 93       	push	r17
 aaa:	cf 93       	push	r28
 aac:	df 93       	push	r29
 aae:	18 2f       	mov	r17, r24
 ab0:	09 2f       	mov	r16, r25
 ab2:	eb 01       	movw	r28, r22
 ab4:	8b 81       	ldd	r24, Y+3	; 0x03
 ab6:	81 fd       	sbrc	r24, 1
 ab8:	03 c0       	rjmp	.+6      	; 0xac0 <fputc+0x1a>
 aba:	8f ef       	ldi	r24, 0xFF	; 255
 abc:	9f ef       	ldi	r25, 0xFF	; 255
 abe:	20 c0       	rjmp	.+64     	; 0xb00 <fputc+0x5a>
 ac0:	82 ff       	sbrs	r24, 2
 ac2:	10 c0       	rjmp	.+32     	; 0xae4 <fputc+0x3e>
 ac4:	4e 81       	ldd	r20, Y+6	; 0x06
 ac6:	5f 81       	ldd	r21, Y+7	; 0x07
 ac8:	2c 81       	ldd	r18, Y+4	; 0x04
 aca:	3d 81       	ldd	r19, Y+5	; 0x05
 acc:	42 17       	cp	r20, r18
 ace:	53 07       	cpc	r21, r19
 ad0:	7c f4       	brge	.+30     	; 0xaf0 <fputc+0x4a>
 ad2:	e8 81       	ld	r30, Y
 ad4:	f9 81       	ldd	r31, Y+1	; 0x01
 ad6:	9f 01       	movw	r18, r30
 ad8:	2f 5f       	subi	r18, 0xFF	; 255
 ada:	3f 4f       	sbci	r19, 0xFF	; 255
 adc:	39 83       	std	Y+1, r19	; 0x01
 ade:	28 83       	st	Y, r18
 ae0:	10 83       	st	Z, r17
 ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <fputc+0x4a>
 ae4:	e8 85       	ldd	r30, Y+8	; 0x08
 ae6:	f9 85       	ldd	r31, Y+9	; 0x09
 ae8:	81 2f       	mov	r24, r17
 aea:	09 95       	icall
 aec:	89 2b       	or	r24, r25
 aee:	29 f7       	brne	.-54     	; 0xaba <fputc+0x14>
 af0:	2e 81       	ldd	r18, Y+6	; 0x06
 af2:	3f 81       	ldd	r19, Y+7	; 0x07
 af4:	2f 5f       	subi	r18, 0xFF	; 255
 af6:	3f 4f       	sbci	r19, 0xFF	; 255
 af8:	3f 83       	std	Y+7, r19	; 0x07
 afa:	2e 83       	std	Y+6, r18	; 0x06
 afc:	81 2f       	mov	r24, r17
 afe:	90 2f       	mov	r25, r16
 b00:	df 91       	pop	r29
 b02:	cf 91       	pop	r28
 b04:	1f 91       	pop	r17
 b06:	0f 91       	pop	r16
 b08:	08 95       	ret

00000b0a <__ultoa_invert>:
 b0a:	fa 01       	movw	r30, r20
 b0c:	aa 27       	eor	r26, r26
 b0e:	28 30       	cpi	r18, 0x08	; 8
 b10:	51 f1       	breq	.+84     	; 0xb66 <__ultoa_invert+0x5c>
 b12:	20 31       	cpi	r18, 0x10	; 16
 b14:	81 f1       	breq	.+96     	; 0xb76 <__ultoa_invert+0x6c>
 b16:	e8 94       	clt
 b18:	6f 93       	push	r22
 b1a:	6e 7f       	andi	r22, 0xFE	; 254
 b1c:	6e 5f       	subi	r22, 0xFE	; 254
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255
 b20:	8f 4f       	sbci	r24, 0xFF	; 255
 b22:	9f 4f       	sbci	r25, 0xFF	; 255
 b24:	af 4f       	sbci	r26, 0xFF	; 255
 b26:	b1 e0       	ldi	r27, 0x01	; 1
 b28:	3e d0       	rcall	.+124    	; 0xba6 <__ultoa_invert+0x9c>
 b2a:	b4 e0       	ldi	r27, 0x04	; 4
 b2c:	3c d0       	rcall	.+120    	; 0xba6 <__ultoa_invert+0x9c>
 b2e:	67 0f       	add	r22, r23
 b30:	78 1f       	adc	r23, r24
 b32:	89 1f       	adc	r24, r25
 b34:	9a 1f       	adc	r25, r26
 b36:	a1 1d       	adc	r26, r1
 b38:	68 0f       	add	r22, r24
 b3a:	79 1f       	adc	r23, r25
 b3c:	8a 1f       	adc	r24, r26
 b3e:	91 1d       	adc	r25, r1
 b40:	a1 1d       	adc	r26, r1
 b42:	6a 0f       	add	r22, r26
 b44:	71 1d       	adc	r23, r1
 b46:	81 1d       	adc	r24, r1
 b48:	91 1d       	adc	r25, r1
 b4a:	a1 1d       	adc	r26, r1
 b4c:	20 d0       	rcall	.+64     	; 0xb8e <__ultoa_invert+0x84>
 b4e:	09 f4       	brne	.+2      	; 0xb52 <__ultoa_invert+0x48>
 b50:	68 94       	set
 b52:	3f 91       	pop	r19
 b54:	2a e0       	ldi	r18, 0x0A	; 10
 b56:	26 9f       	mul	r18, r22
 b58:	11 24       	eor	r1, r1
 b5a:	30 19       	sub	r19, r0
 b5c:	30 5d       	subi	r19, 0xD0	; 208
 b5e:	31 93       	st	Z+, r19
 b60:	de f6       	brtc	.-74     	; 0xb18 <__ultoa_invert+0xe>
 b62:	cf 01       	movw	r24, r30
 b64:	08 95       	ret
 b66:	46 2f       	mov	r20, r22
 b68:	47 70       	andi	r20, 0x07	; 7
 b6a:	40 5d       	subi	r20, 0xD0	; 208
 b6c:	41 93       	st	Z+, r20
 b6e:	b3 e0       	ldi	r27, 0x03	; 3
 b70:	0f d0       	rcall	.+30     	; 0xb90 <__ultoa_invert+0x86>
 b72:	c9 f7       	brne	.-14     	; 0xb66 <__ultoa_invert+0x5c>
 b74:	f6 cf       	rjmp	.-20     	; 0xb62 <__ultoa_invert+0x58>
 b76:	46 2f       	mov	r20, r22
 b78:	4f 70       	andi	r20, 0x0F	; 15
 b7a:	40 5d       	subi	r20, 0xD0	; 208
 b7c:	4a 33       	cpi	r20, 0x3A	; 58
 b7e:	18 f0       	brcs	.+6      	; 0xb86 <__ultoa_invert+0x7c>
 b80:	49 5d       	subi	r20, 0xD9	; 217
 b82:	31 fd       	sbrc	r19, 1
 b84:	40 52       	subi	r20, 0x20	; 32
 b86:	41 93       	st	Z+, r20
 b88:	02 d0       	rcall	.+4      	; 0xb8e <__ultoa_invert+0x84>
 b8a:	a9 f7       	brne	.-22     	; 0xb76 <__ultoa_invert+0x6c>
 b8c:	ea cf       	rjmp	.-44     	; 0xb62 <__ultoa_invert+0x58>
 b8e:	b4 e0       	ldi	r27, 0x04	; 4
 b90:	a6 95       	lsr	r26
 b92:	97 95       	ror	r25
 b94:	87 95       	ror	r24
 b96:	77 95       	ror	r23
 b98:	67 95       	ror	r22
 b9a:	ba 95       	dec	r27
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__ultoa_invert+0x86>
 b9e:	00 97       	sbiw	r24, 0x00	; 0
 ba0:	61 05       	cpc	r22, r1
 ba2:	71 05       	cpc	r23, r1
 ba4:	08 95       	ret
 ba6:	9b 01       	movw	r18, r22
 ba8:	ac 01       	movw	r20, r24
 baa:	0a 2e       	mov	r0, r26
 bac:	06 94       	lsr	r0
 bae:	57 95       	ror	r21
 bb0:	47 95       	ror	r20
 bb2:	37 95       	ror	r19
 bb4:	27 95       	ror	r18
 bb6:	ba 95       	dec	r27
 bb8:	c9 f7       	brne	.-14     	; 0xbac <__ultoa_invert+0xa2>
 bba:	62 0f       	add	r22, r18
 bbc:	73 1f       	adc	r23, r19
 bbe:	84 1f       	adc	r24, r20
 bc0:	95 1f       	adc	r25, r21
 bc2:	a0 1d       	adc	r26, r0
 bc4:	08 95       	ret

00000bc6 <__prologue_saves__>:
 bc6:	2f 92       	push	r2
 bc8:	3f 92       	push	r3
 bca:	4f 92       	push	r4
 bcc:	5f 92       	push	r5
 bce:	6f 92       	push	r6
 bd0:	7f 92       	push	r7
 bd2:	8f 92       	push	r8
 bd4:	9f 92       	push	r9
 bd6:	af 92       	push	r10
 bd8:	bf 92       	push	r11
 bda:	cf 92       	push	r12
 bdc:	df 92       	push	r13
 bde:	ef 92       	push	r14
 be0:	ff 92       	push	r15
 be2:	0f 93       	push	r16
 be4:	1f 93       	push	r17
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	cd b7       	in	r28, 0x3d	; 61
 bec:	de b7       	in	r29, 0x3e	; 62
 bee:	ca 1b       	sub	r28, r26
 bf0:	db 0b       	sbc	r29, r27
 bf2:	0f b6       	in	r0, 0x3f	; 63
 bf4:	f8 94       	cli
 bf6:	de bf       	out	0x3e, r29	; 62
 bf8:	0f be       	out	0x3f, r0	; 63
 bfa:	cd bf       	out	0x3d, r28	; 61
 bfc:	09 94       	ijmp

00000bfe <__epilogue_restores__>:
 bfe:	2a 88       	ldd	r2, Y+18	; 0x12
 c00:	39 88       	ldd	r3, Y+17	; 0x11
 c02:	48 88       	ldd	r4, Y+16	; 0x10
 c04:	5f 84       	ldd	r5, Y+15	; 0x0f
 c06:	6e 84       	ldd	r6, Y+14	; 0x0e
 c08:	7d 84       	ldd	r7, Y+13	; 0x0d
 c0a:	8c 84       	ldd	r8, Y+12	; 0x0c
 c0c:	9b 84       	ldd	r9, Y+11	; 0x0b
 c0e:	aa 84       	ldd	r10, Y+10	; 0x0a
 c10:	b9 84       	ldd	r11, Y+9	; 0x09
 c12:	c8 84       	ldd	r12, Y+8	; 0x08
 c14:	df 80       	ldd	r13, Y+7	; 0x07
 c16:	ee 80       	ldd	r14, Y+6	; 0x06
 c18:	fd 80       	ldd	r15, Y+5	; 0x05
 c1a:	0c 81       	ldd	r16, Y+4	; 0x04
 c1c:	1b 81       	ldd	r17, Y+3	; 0x03
 c1e:	aa 81       	ldd	r26, Y+2	; 0x02
 c20:	b9 81       	ldd	r27, Y+1	; 0x01
 c22:	ce 0f       	add	r28, r30
 c24:	d1 1d       	adc	r29, r1
 c26:	0f b6       	in	r0, 0x3f	; 63
 c28:	f8 94       	cli
 c2a:	de bf       	out	0x3e, r29	; 62
 c2c:	0f be       	out	0x3f, r0	; 63
 c2e:	cd bf       	out	0x3d, r28	; 61
 c30:	ed 01       	movw	r28, r26
 c32:	08 95       	ret

00000c34 <__do_global_dtors>:
 c34:	10 e0       	ldi	r17, 0x00	; 0
 c36:	c6 e5       	ldi	r28, 0x56	; 86
 c38:	d0 e0       	ldi	r29, 0x00	; 0
 c3a:	04 c0       	rjmp	.+8      	; 0xc44 <__do_global_dtors+0x10>
 c3c:	fe 01       	movw	r30, r28
 c3e:	0e 94 37 03 	call	0x66e	; 0x66e <__tablejump__>
 c42:	22 96       	adiw	r28, 0x02	; 2
 c44:	c8 35       	cpi	r28, 0x58	; 88
 c46:	d1 07       	cpc	r29, r17
 c48:	c9 f7       	brne	.-14     	; 0xc3c <__do_global_dtors+0x8>
 c4a:	f8 94       	cli

00000c4c <__stop_program>:
 c4c:	ff cf       	rjmp	.-2      	; 0xc4c <__stop_program>
