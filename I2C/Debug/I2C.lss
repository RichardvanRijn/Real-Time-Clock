
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000de8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000de8  00000e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800096  00800096  00000eb2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b8  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019ba  00000000  00000000  000010c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000799  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000079d  00000000  00000000  00003219  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000049c  00000000  00000000  000039b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e8  00000000  00000000  00003e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e6f  00000000  00000000  0000453c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  000053ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_11>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	43 02       	muls	r20, r19

00000056 <__ctors_end>:
  56:	49 02       	muls	r20, r25

00000058 <__dtors_end>:
  58:	11 24       	eor	r1, r1
  5a:	1f be       	out	0x3f, r1	; 63
  5c:	cf e5       	ldi	r28, 0x5F	; 95
  5e:	d8 e0       	ldi	r29, 0x08	; 8
  60:	de bf       	out	0x3e, r29	; 62
  62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
  64:	10 e0       	ldi	r17, 0x00	; 0
  66:	a0 e6       	ldi	r26, 0x60	; 96
  68:	b0 e0       	ldi	r27, 0x00	; 0
  6a:	e8 ee       	ldi	r30, 0xE8	; 232
  6c:	fd e0       	ldi	r31, 0x0D	; 13
  6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
  70:	05 90       	lpm	r0, Z+
  72:	0d 92       	st	X+, r0
  74:	a6 39       	cpi	r26, 0x96	; 150
  76:	b1 07       	cpc	r27, r17
  78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	a6 e9       	ldi	r26, 0x96	; 150
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
  82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
  84:	ad 3b       	cpi	r26, 0xBD	; 189
  86:	b2 07       	cpc	r27, r18
  88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
  8a:	10 e0       	ldi	r17, 0x00	; 0
  8c:	c6 e5       	ldi	r28, 0x56	; 86
  8e:	d0 e0       	ldi	r29, 0x00	; 0
  90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
  92:	22 97       	sbiw	r28, 0x02	; 2
  94:	fe 01       	movw	r30, r28
  96:	0e 94 04 04 	call	0x808	; 0x808 <__tablejump__>
  9a:	c4 35       	cpi	r28, 0x54	; 84
  9c:	d1 07       	cpc	r29, r17
  9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
  a0:	0e 94 2f 02 	call	0x45e	; 0x45e <main>
  a4:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__do_global_dtors>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_Z7init_T0v>:
							{ 8, 7, 16, 10, 9, 16, 12, 11, 16 ,16, 16, 16, 16, 16, 16, 16}
							};

void init_T0(void)
{
	TCCR0 = (1<<CS02) && (1<<CS00);
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  b0:	12 be       	out	0x32, r1	; 50
	TIMSK = (1<<TOIE0);
  b2:	89 bf       	out	0x39, r24	; 57
  b4:	08 95       	ret

000000b6 <_Z8init_lcdv>:
}

void init_lcd(void)
{
	lcd_init();
  b6:	0e 94 99 03 	call	0x732	; 0x732 <_Z8lcd_initv>
	lcd_cursor(false, false);							//  cursor off
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 cf 03 	call	0x79e	; 0x79e <_Z10lcd_cursorbb>
	lcd_home();
  c2:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8lcd_homev>
  c6:	08 95       	ret

000000c8 <_Z4initv>:
}

void init(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	DDRD = 0x00;
  cc:	11 ba       	out	0x11, r1	; 17
	init_lcd();
  ce:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8init_lcdv>
	TWI.init();												// Function to initialize TWI
  d2:	87 e9       	ldi	r24, 0x97	; 151
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN3I2C4initEv>
	unsigned char ret = TWI.start(I2C_WRITE);				// set device address and write mode
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	87 e9       	ldi	r24, 0x97	; 151
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 55 02 	call	0x4aa	; 0x4aa <_ZN3I2C5startEh>
	while(ret)
  e4:	88 23       	and	r24, r24
  e6:	e1 f0       	breq	.+56     	; 0x120 <_Z4initv+0x58>
	{
		TWI.stop();
		ret = TWI.start(I2C_WRITE);
		snprintf(buffer, sizeof buffer, "Failed");
  e8:	d7 e0       	ldi	r29, 0x07	; 7
	init_lcd();
	TWI.init();												// Function to initialize TWI
	unsigned char ret = TWI.start(I2C_WRITE);				// set device address and write mode
	while(ret)
	{
		TWI.stop();
  ea:	87 e9       	ldi	r24, 0x97	; 151
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 9a 02 	call	0x534	; 0x534 <_ZN3I2C4stopEv>
		ret = TWI.start(I2C_WRITE);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	87 e9       	ldi	r24, 0x97	; 151
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 55 02 	call	0x4aa	; 0x4aa <_ZN3I2C5startEh>
  fc:	c8 2f       	mov	r28, r24
		snprintf(buffer, sizeof buffer, "Failed");
  fe:	e0 e8       	ldi	r30, 0x80	; 128
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ac ea       	ldi	r26, 0xAC	; 172
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	8d 2f       	mov	r24, r29
 108:	01 90       	ld	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	8a 95       	dec	r24
 10e:	e1 f7       	brne	.-8      	; 0x108 <_Z4initv+0x40>
		lcd_puts(buffer);
 110:	8c ea       	ldi	r24, 0xAC	; 172
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_Z8lcd_putsPc>
		lcd_home();
 118:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8lcd_homev>
{
	DDRD = 0x00;
	init_lcd();
	TWI.init();												// Function to initialize TWI
	unsigned char ret = TWI.start(I2C_WRITE);				// set device address and write mode
	while(ret)
 11c:	c1 11       	cpse	r28, r1
 11e:	e5 cf       	rjmp	.-54     	; 0xea <_Z4initv+0x22>
		ret = TWI.start(I2C_WRITE);
		snprintf(buffer, sizeof buffer, "Failed");
		lcd_puts(buffer);
		lcd_home();
	}
	init_T0();
 120:	0e 94 56 00 	call	0xac	; 0xac <_Z7init_T0v>
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <_Z11t1_Stop_TOIv>:

void t1_Stop_TOI(void)
{
	TIMSK &= ~(1<<TOIE0);
 12a:	89 b7       	in	r24, 0x39	; 57
 12c:	8e 7f       	andi	r24, 0xFE	; 254
 12e:	89 bf       	out	0x39, r24	; 57
 130:	08 95       	ret

00000132 <_Z12t1_Start_TOIv>:
}

void t1_Start_TOI(void)
{
	TIMSK |= (1<<TOIE0);
 132:	89 b7       	in	r24, 0x39	; 57
 134:	81 60       	ori	r24, 0x01	; 1
 136:	89 bf       	out	0x39, r24	; 57
 138:	08 95       	ret

0000013a <_Z11writeScreenv>:

//unsigned char timeIn[8] = {0x00,	 decToBcd(30), decToBcd(41), decToBcd(17), decToBcd(5),	 decToBcd(6), decToBcd(2), decToBcd(15)};
//						   Address	,Seconds,	  Minutes,	   Hours,	    Day of the week, Date,		  month,	   Year.

void writeScreen(void)
{
 13a:	ff 92       	push	r15
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
	lcd_home();
 144:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8lcd_homev>
	snprintf(buffer, sizeof buffer, "%d%d:%d%d:%d%d",time[5],time[4],time[3],time[2],time[1],time[0]);
 148:	80 91 9f 00 	lds	r24, 0x009F
 14c:	1f 92       	push	r1
 14e:	8f 93       	push	r24
 150:	80 91 a0 00 	lds	r24, 0x00A0
 154:	1f 92       	push	r1
 156:	8f 93       	push	r24
 158:	80 91 a1 00 	lds	r24, 0x00A1
 15c:	1f 92       	push	r1
 15e:	8f 93       	push	r24
 160:	80 91 a2 00 	lds	r24, 0x00A2
 164:	1f 92       	push	r1
 166:	8f 93       	push	r24
 168:	80 91 a3 00 	lds	r24, 0x00A3
 16c:	1f 92       	push	r1
 16e:	8f 93       	push	r24
 170:	80 91 a4 00 	lds	r24, 0x00A4
 174:	1f 92       	push	r1
 176:	8f 93       	push	r24
 178:	07 e8       	ldi	r16, 0x87	; 135
 17a:	10 e0       	ldi	r17, 0x00	; 0
 17c:	1f 93       	push	r17
 17e:	0f 93       	push	r16
 180:	1f 92       	push	r1
 182:	0f 2e       	mov	r0, r31
 184:	f1 e1       	ldi	r31, 0x11	; 17
 186:	ff 2e       	mov	r15, r31
 188:	f0 2d       	mov	r31, r0
 18a:	ff 92       	push	r15
 18c:	cc ea       	ldi	r28, 0xAC	; 172
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	df 93       	push	r29
 192:	cf 93       	push	r28
 194:	0e 94 08 04 	call	0x810	; 0x810 <snprintf>
	lcd_puts(buffer);
 198:	ce 01       	movw	r24, r28
 19a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_Z8lcd_putsPc>
	lcd_goto(1,0);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_Z8lcd_gotohh>
	snprintf(buffer, sizeof buffer, "%d%d:%d%d:%d%d",time[8],time[7],time[10],time[9],time[12],time[11]);
 1a6:	80 91 aa 00 	lds	r24, 0x00AA
 1aa:	1f 92       	push	r1
 1ac:	8f 93       	push	r24
 1ae:	80 91 ab 00 	lds	r24, 0x00AB
 1b2:	1f 92       	push	r1
 1b4:	8f 93       	push	r24
 1b6:	80 91 a8 00 	lds	r24, 0x00A8
 1ba:	1f 92       	push	r1
 1bc:	8f 93       	push	r24
 1be:	80 91 a9 00 	lds	r24, 0x00A9
 1c2:	1f 92       	push	r1
 1c4:	8f 93       	push	r24
 1c6:	80 91 a6 00 	lds	r24, 0x00A6
 1ca:	1f 92       	push	r1
 1cc:	8f 93       	push	r24
 1ce:	80 91 a7 00 	lds	r24, 0x00A7
 1d2:	1f 92       	push	r1
 1d4:	8f 93       	push	r24
 1d6:	1f 93       	push	r17
 1d8:	0f 93       	push	r16
 1da:	1f 92       	push	r1
 1dc:	ff 92       	push	r15
 1de:	df 93       	push	r29
 1e0:	cf 93       	push	r28
 1e2:	0e 94 08 04 	call	0x810	; 0x810 <snprintf>
	lcd_puts(buffer);
 1e6:	8d b7       	in	r24, 0x3d	; 61
 1e8:	9e b7       	in	r25, 0x3e	; 62
 1ea:	84 96       	adiw	r24, 0x24	; 36
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	9e bf       	out	0x3e, r25	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	8d bf       	out	0x3d, r24	; 61
 1f6:	ce 01       	movw	r24, r28
 1f8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_Z8lcd_putsPc>
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	08 95       	ret

00000208 <_Z10changeTimev>:

void changeTime(void)
{
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
	uint8_t x = 0, y = 0;
	t1_Stop_TOI();
 210:	0e 94 95 00 	call	0x12a	; 0x12a <_Z11t1_Stop_TOIv>
	lcd_cursor(true,true);
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 cf 03 	call	0x79e	; 0x79e <_Z10lcd_cursorbb>
	lcd_home();
 21c:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8lcd_homev>
	while ((PIND & (1<<PD0)) == 1) {}
 220:	80 99       	sbic	0x10, 0	; 16
 222:	fe cf       	rjmp	.-4      	; 0x220 <_Z10changeTimev+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	87 ea       	ldi	r24, 0xA7	; 167
 226:	91 e6       	ldi	r25, 0x61	; 97
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <_Z10changeTimev+0x20>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <_Z10changeTimev+0x26>
 22e:	00 00       	nop
	lcd_puts(buffer);
}

void changeTime(void)
{
	uint8_t x = 0, y = 0;
 230:	d0 e0       	ldi	r29, 0x00	; 0
 232:	c0 e0       	ldi	r28, 0x00	; 0
		if ((PIND & (1<<PD1)) == 2)						//button 2
		{
			if (x == 7)
			{
				x = 0;
				y = 1 - y;
 234:	11 e0       	ldi	r17, 0x01	; 1
 236:	6b c0       	rjmp	.+214    	; 0x30e <_Z10changeTimev+0x106>
	lcd_home();
	while ((PIND & (1<<PD0)) == 1) {}
	_delay_ms(100);
	while ((PIND & (1<<PD0)) != 1)						//button 1
	{
		if ((PIND & (1<<PD1)) == 2)						//button 2
 238:	81 9b       	sbis	0x10, 1	; 16
 23a:	1e c0       	rjmp	.+60     	; 0x278 <_Z10changeTimev+0x70>
		{
			if (x == 7)
 23c:	c7 30       	cpi	r28, 0x07	; 7
 23e:	49 f4       	brne	.+18     	; 0x252 <_Z10changeTimev+0x4a>
			{
				x = 0;
				y = 1 - y;
 240:	91 2f       	mov	r25, r17
 242:	9d 1b       	sub	r25, r29
 244:	d9 2f       	mov	r29, r25
				lcd_goto(y,x);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	89 2f       	mov	r24, r25
 24a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_Z8lcd_gotohh>
	{
		if ((PIND & (1<<PD1)) == 2)						//button 2
		{
			if (x == 7)
			{
				x = 0;
 24e:	c0 e0       	ldi	r28, 0x00	; 0
 250:	0a c0       	rjmp	.+20     	; 0x266 <_Z10changeTimev+0x5e>
				y = 1 - y;
				lcd_goto(y,x);
			}
			else
			{
				if (x == 1 || x == 4)
 252:	c1 30       	cpi	r28, 0x01	; 1
 254:	11 f0       	breq	.+4      	; 0x25a <_Z10changeTimev+0x52>
 256:	c4 30       	cpi	r28, 0x04	; 4
 258:	09 f4       	brne	.+2      	; 0x25c <_Z10changeTimev+0x54>
				{
					x++;	
 25a:	cf 5f       	subi	r28, 0xFF	; 255
				}
				x++;
 25c:	cf 5f       	subi	r28, 0xFF	; 255
				lcd_goto(y,x);
 25e:	6c 2f       	mov	r22, r28
 260:	8d 2f       	mov	r24, r29
 262:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_Z8lcd_gotohh>
			}
			while((PIND & (1<<PD1)) == 2) {}
 266:	81 99       	sbic	0x10, 1	; 16
 268:	fe cf       	rjmp	.-4      	; 0x266 <_Z10changeTimev+0x5e>
 26a:	87 ea       	ldi	r24, 0xA7	; 167
 26c:	91 e6       	ldi	r25, 0x61	; 97
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <_Z10changeTimev+0x66>
 272:	00 c0       	rjmp	.+0      	; 0x274 <_Z10changeTimev+0x6c>
 274:	00 00       	nop
 276:	4b c0       	rjmp	.+150    	; 0x30e <_Z10changeTimev+0x106>
			_delay_ms(100);
		}
		else if ((PIND & (1<<PD2)) == 4)				//button 3
 278:	82 9b       	sbis	0x10, 2	; 16
 27a:	24 c0       	rjmp	.+72     	; 0x2c4 <_Z10changeTimev+0xbc>
		{
			time[index[lcd_get_row()][lcd_get_column()]]++;
 27c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z11lcd_get_rowv>
 280:	08 2f       	mov	r16, r24
 282:	0e 94 ed 03 	call	0x7da	; 0x7da <_Z14lcd_get_columnv>
 286:	90 e1       	ldi	r25, 0x10	; 16
 288:	09 9f       	mul	r16, r25
 28a:	90 01       	movw	r18, r0
 28c:	11 24       	eor	r1, r1
 28e:	28 0f       	add	r18, r24
 290:	31 1d       	adc	r19, r1
 292:	f9 01       	movw	r30, r18
 294:	e0 5a       	subi	r30, 0xA0	; 160
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	e0 81       	ld	r30, Z
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	e1 56       	subi	r30, 0x61	; 97
 29e:	ff 4f       	sbci	r31, 0xFF	; 255
 2a0:	80 81       	ld	r24, Z
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 83       	st	Z, r24
			writeScreen();
 2a6:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z11writeScreenv>
			lcd_goto(y,x);
 2aa:	6c 2f       	mov	r22, r28
 2ac:	8d 2f       	mov	r24, r29
 2ae:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_Z8lcd_gotohh>
			while ((PIND & (1<<PD2)) == 4) {}
 2b2:	82 99       	sbic	0x10, 2	; 16
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <_Z10changeTimev+0xaa>
 2b6:	87 ea       	ldi	r24, 0xA7	; 167
 2b8:	91 e6       	ldi	r25, 0x61	; 97
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <_Z10changeTimev+0xb2>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <_Z10changeTimev+0xb8>
 2c0:	00 00       	nop
 2c2:	25 c0       	rjmp	.+74     	; 0x30e <_Z10changeTimev+0x106>
			_delay_ms(100);
		}
		else if ((PIND & (1<<PD3)) == 8)				// button 4
 2c4:	83 9b       	sbis	0x10, 3	; 16
 2c6:	23 c0       	rjmp	.+70     	; 0x30e <_Z10changeTimev+0x106>
		{
			time[index[lcd_get_row()][lcd_get_column()]]--;
 2c8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z11lcd_get_rowv>
 2cc:	08 2f       	mov	r16, r24
 2ce:	0e 94 ed 03 	call	0x7da	; 0x7da <_Z14lcd_get_columnv>
 2d2:	90 e1       	ldi	r25, 0x10	; 16
 2d4:	09 9f       	mul	r16, r25
 2d6:	90 01       	movw	r18, r0
 2d8:	11 24       	eor	r1, r1
 2da:	28 0f       	add	r18, r24
 2dc:	31 1d       	adc	r19, r1
 2de:	f9 01       	movw	r30, r18
 2e0:	e0 5a       	subi	r30, 0xA0	; 160
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	e0 81       	ld	r30, Z
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	e1 56       	subi	r30, 0x61	; 97
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	80 81       	ld	r24, Z
 2ee:	81 50       	subi	r24, 0x01	; 1
 2f0:	80 83       	st	Z, r24
			writeScreen();
 2f2:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z11writeScreenv>
			lcd_goto(y,x);
 2f6:	6c 2f       	mov	r22, r28
 2f8:	8d 2f       	mov	r24, r29
 2fa:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_Z8lcd_gotohh>
			while ((PIND & (1<<PD3)) == 8) {}
 2fe:	83 99       	sbic	0x10, 3	; 16
 300:	fe cf       	rjmp	.-4      	; 0x2fe <_Z10changeTimev+0xf6>
 302:	87 ea       	ldi	r24, 0xA7	; 167
 304:	91 e6       	ldi	r25, 0x61	; 97
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <_Z10changeTimev+0xfe>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <_Z10changeTimev+0x104>
 30c:	00 00       	nop
	t1_Stop_TOI();
	lcd_cursor(true,true);
	lcd_home();
	while ((PIND & (1<<PD0)) == 1) {}
	_delay_ms(100);
	while ((PIND & (1<<PD0)) != 1)						//button 1
 30e:	80 9b       	sbis	0x10, 0	; 16
 310:	93 cf       	rjmp	.-218    	; 0x238 <_Z10changeTimev+0x30>
 312:	22 e0       	ldi	r18, 0x02	; 2
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
			data[i] = ((time[j] & 0x0F) + (time[j+1] << 4));
			j++;
		}
		else
		{
			data[i] = time[j];
 318:	cc e9       	ldi	r28, 0x9C	; 156
 31a:	d0 e0       	ldi	r29, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <_Z10changeTimev+0x11a>
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	2f 5f       	subi	r18, 0xFF	; 255
			_delay_ms(100);
		}
	}
	for (uint8_t i = 1, j = 0; i <= 7 ; i++, j++)
	{
		if ( i != 4 )
 322:	84 30       	cpi	r24, 0x04	; 4
 324:	a1 f0       	breq	.+40     	; 0x34e <_Z10changeTimev+0x146>
		{
			data[i] = ((time[j] & 0x0F) + (time[j+1] << 4));
 326:	e9 2f       	mov	r30, r25
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	a8 2f       	mov	r26, r24
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	a8 56       	subi	r26, 0x68	; 104
 330:	bf 4f       	sbci	r27, 0xFF	; 255
 332:	e1 56       	subi	r30, 0x61	; 97
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	41 81       	ldd	r20, Z+1	; 0x01
 338:	30 81       	ld	r19, Z
 33a:	3f 70       	andi	r19, 0x0F	; 15
 33c:	50 e1       	ldi	r21, 0x10	; 16
 33e:	45 9f       	mul	r20, r21
 340:	30 0d       	add	r19, r0
 342:	11 24       	eor	r1, r1
 344:	3c 93       	st	X, r19
			lcd_goto(y,x);
			while ((PIND & (1<<PD3)) == 8) {}
			_delay_ms(100);
		}
	}
	for (uint8_t i = 1, j = 0; i <= 7 ; i++, j++)
 346:	9e 5f       	subi	r25, 0xFE	; 254
 348:	28 30       	cpi	r18, 0x08	; 8
 34a:	48 f3       	brcs	.-46     	; 0x31e <_Z10changeTimev+0x116>
 34c:	08 c0       	rjmp	.+16     	; 0x35e <_Z10changeTimev+0x156>
			data[i] = ((time[j] & 0x0F) + (time[j+1] << 4));
			j++;
		}
		else
		{
			data[i] = time[j];
 34e:	e9 2f       	mov	r30, r25
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	e1 56       	subi	r30, 0x61	; 97
 354:	ff 4f       	sbci	r31, 0xFF	; 255
 356:	30 81       	ld	r19, Z
 358:	38 83       	st	Y, r19
			lcd_goto(y,x);
			while ((PIND & (1<<PD3)) == 8) {}
			_delay_ms(100);
		}
	}
	for (uint8_t i = 1, j = 0; i <= 7 ; i++, j++)
 35a:	9f 5f       	subi	r25, 0xFF	; 255
 35c:	e0 cf       	rjmp	.-64     	; 0x31e <_Z10changeTimev+0x116>
		else
		{
			data[i] = time[j];
		}
	}
	data[0] = 0;
 35e:	10 92 98 00 	sts	0x0098, r1
	TWI.start_wait(I2C_WRITE);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	87 e9       	ldi	r24, 0x97	; 151
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN3I2C10start_waitEh>
	TWI.writeXBytes(data,8);
 36c:	48 e0       	ldi	r20, 0x08	; 8
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	68 e9       	ldi	r22, 0x98	; 152
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	87 e9       	ldi	r24, 0x97	; 151
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN3I2C11writeXBytesEPhj>
	TWI.stop();
 37c:	87 e9       	ldi	r24, 0x97	; 151
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 9a 02 	call	0x534	; 0x534 <_ZN3I2C4stopEv>
	t1_Start_TOI();
 384:	0e 94 99 00 	call	0x132	; 0x132 <_Z12t1_Start_TOIv>
	lcd_cursor(false,false);
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 cf 03 	call	0x79e	; 0x79e <_Z10lcd_cursorbb>
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <__vector_11>:

ISR(TIMER0_OVF_vect) {
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	2f 93       	push	r18
 3a6:	3f 93       	push	r19
 3a8:	4f 93       	push	r20
 3aa:	5f 93       	push	r21
 3ac:	6f 93       	push	r22
 3ae:	7f 93       	push	r23
 3b0:	8f 93       	push	r24
 3b2:	9f 93       	push	r25
 3b4:	af 93       	push	r26
 3b6:	bf 93       	push	r27
 3b8:	ef 93       	push	r30
 3ba:	ff 93       	push	r31
	static unsigned char x = 0;
	if ( x == 15 )
 3bc:	80 91 96 00 	lds	r24, 0x0096
 3c0:	8f 30       	cpi	r24, 0x0F	; 15
 3c2:	c1 f5       	brne	.+112    	; 0x434 <__vector_11+0x9a>
	{
		TWI.start_wait(I2C_WRITE);			// set device address and write mode
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	87 e9       	ldi	r24, 0x97	; 151
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN3I2C10start_waitEh>
		TWI.readXBytes(data,7,0x00);
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	47 e0       	ldi	r20, 0x07	; 7
 3d2:	68 e9       	ldi	r22, 0x98	; 152
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	87 e9       	ldi	r24, 0x97	; 151
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN3I2C10readXBytesEPhhh>
		TWI.stop();
 3de:	87 e9       	ldi	r24, 0x97	; 151
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 9a 02 	call	0x534	; 0x534 <_ZN3I2C4stopEv>
				time[j + 1] = (((data[i] >> 4) & 0x0F));
				j++;
			}
			else
			{
				time[j] = data[i];
 3e6:	50 91 9b 00 	lds	r21, 0x009B
 3ea:	31 e0       	ldi	r19, 0x01	; 1
 3ec:	80 e0       	ldi	r24, 0x00	; 0
	if ( x == 15 )
	{
		TWI.start_wait(I2C_WRITE);			// set device address and write mode
		TWI.readXBytes(data,7,0x00);
		TWI.stop();
		for (uint8_t i = 0, j = 0; i <= 6 ; i++, j++)
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <__vector_11+0x5c>
 3f2:	8f 5f       	subi	r24, 0xFF	; 255
 3f4:	3f 5f       	subi	r19, 0xFF	; 255
		{
			if ( i != 3 )
 3f6:	83 30       	cpi	r24, 0x03	; 3
 3f8:	99 f0       	breq	.+38     	; 0x420 <__vector_11+0x86>
			{
				time[j] = ((data[i] & 0x0F));
 3fa:	e9 2f       	mov	r30, r25
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	a8 2f       	mov	r26, r24
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	a8 56       	subi	r26, 0x68	; 104
 404:	bf 4f       	sbci	r27, 0xFF	; 255
 406:	2c 91       	ld	r18, X
 408:	e1 56       	subi	r30, 0x61	; 97
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	42 2f       	mov	r20, r18
 40e:	4f 70       	andi	r20, 0x0F	; 15
 410:	40 83       	st	Z, r20
				time[j + 1] = (((data[i] >> 4) & 0x0F));
 412:	22 95       	swap	r18
 414:	2f 70       	andi	r18, 0x0F	; 15
 416:	21 83       	std	Z+1, r18	; 0x01
	if ( x == 15 )
	{
		TWI.start_wait(I2C_WRITE);			// set device address and write mode
		TWI.readXBytes(data,7,0x00);
		TWI.stop();
		for (uint8_t i = 0, j = 0; i <= 6 ; i++, j++)
 418:	9e 5f       	subi	r25, 0xFE	; 254
 41a:	37 30       	cpi	r19, 0x07	; 7
 41c:	50 f3       	brcs	.-44     	; 0x3f2 <__vector_11+0x58>
 41e:	07 c0       	rjmp	.+14     	; 0x42e <__vector_11+0x94>
				time[j + 1] = (((data[i] >> 4) & 0x0F));
				j++;
			}
			else
			{
				time[j] = data[i];
 420:	e9 2f       	mov	r30, r25
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	e1 56       	subi	r30, 0x61	; 97
 426:	ff 4f       	sbci	r31, 0xFF	; 255
 428:	50 83       	st	Z, r21
	if ( x == 15 )
	{
		TWI.start_wait(I2C_WRITE);			// set device address and write mode
		TWI.readXBytes(data,7,0x00);
		TWI.stop();
		for (uint8_t i = 0, j = 0; i <= 6 ; i++, j++)
 42a:	9f 5f       	subi	r25, 0xFF	; 255
 42c:	e2 cf       	rjmp	.-60     	; 0x3f2 <__vector_11+0x58>
			else
			{
				time[j] = data[i];
			}
		}
		x = 0;
 42e:	10 92 96 00 	sts	0x0096, r1
 432:	03 c0       	rjmp	.+6      	; 0x43a <__vector_11+0xa0>
	}
	else
	{
		x++;
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	80 93 96 00 	sts	0x0096, r24
	}
	TCNT0 = 0;
 43a:	12 be       	out	0x32, r1	; 50
}
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	7f 91       	pop	r23
 44a:	6f 91       	pop	r22
 44c:	5f 91       	pop	r21
 44e:	4f 91       	pop	r20
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <main>:

int main(void)
{
	init();
 45e:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z4initv>
	sei();
 462:	78 94       	sei
	while(1)
	{
		cli();
 464:	f8 94       	cli
		writeScreen();
 466:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z11writeScreenv>
		sei();
 46a:	78 94       	sei
		if ((PIND & (1<<PD0)) == 1)
 46c:	80 9b       	sbis	0x10, 0	; 16
 46e:	fa cf       	rjmp	.-12     	; 0x464 <main+0x6>
		{
			changeTime();
 470:	0e 94 04 01 	call	0x208	; 0x208 <_Z10changeTimev>
			while((PIND & (1<<PD0)) == 1) {}
 474:	80 99       	sbic	0x10, 0	; 16
 476:	fe cf       	rjmp	.-4      	; 0x474 <main+0x16>
 478:	87 ea       	ldi	r24, 0xA7	; 167
 47a:	91 e6       	ldi	r25, 0x61	; 97
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <main+0x1e>
 480:	00 c0       	rjmp	.+0      	; 0x482 <main+0x24>
 482:	00 00       	nop
 484:	ef cf       	rjmp	.-34     	; 0x464 <main+0x6>

00000486 <_GLOBAL__sub_I_buffer>:

char buffer[17];
unsigned char time[13];
unsigned char data[7];

I2C TWI(address);
 486:	60 ed       	ldi	r22, 0xD0	; 208
 488:	87 e9       	ldi	r24, 0x97	; 151
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN3I2CC1Eh>
 490:	08 95       	ret

00000492 <_GLOBAL__sub_D_buffer>:
 492:	87 e9       	ldi	r24, 0x97	; 151
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN3I2CD1Ev>
 49a:	08 95       	ret

0000049c <_ZN3I2CC1Eh>:
#define SCL_CLOCK  100000L

// default constructor
I2C::I2C():address(0) {}

I2C::I2C(unsigned char newaddress) : address(newaddress) {}
 49c:	fc 01       	movw	r30, r24
 49e:	60 83       	st	Z, r22
 4a0:	08 95       	ret

000004a2 <_ZN3I2C4initEv>:

void I2C::init(void)
{
	 /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
	 TWSR = 0;                         /* no prescaler */
 4a2:	11 b8       	out	0x01, r1	; 1
	 TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 4a4:	8c e0       	ldi	r24, 0x0C	; 12
 4a6:	80 b9       	out	0x00, r24	; 0
 4a8:	08 95       	ret

000004aa <_ZN3I2C5startEh>:
}

unsigned char I2C::start(unsigned char RW)
{
	uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);				// send START condition
 4aa:	24 ea       	ldi	r18, 0xA4	; 164
 4ac:	26 bf       	out	0x36, r18	; 54
	while(!(TWCR & (1<<TWINT)));							// wait until transmission completed
 4ae:	06 b6       	in	r0, 0x36	; 54
 4b0:	07 fe       	sbrs	r0, 7
 4b2:	fd cf       	rjmp	.-6      	; 0x4ae <_ZN3I2C5startEh+0x4>
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
 4b4:	21 b1       	in	r18, 0x01	; 1
 4b6:	28 7f       	andi	r18, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 4b8:	28 30       	cpi	r18, 0x08	; 8
 4ba:	11 f0       	breq	.+4      	; 0x4c0 <_ZN3I2C5startEh+0x16>
 4bc:	20 31       	cpi	r18, 0x10	; 16
 4be:	91 f4       	brne	.+36     	; 0x4e4 <_ZN3I2C5startEh+0x3a>
	TWDR = address + RW;									// send device address
 4c0:	fc 01       	movw	r30, r24
 4c2:	80 81       	ld	r24, Z
 4c4:	68 0f       	add	r22, r24
 4c6:	63 b9       	out	0x03, r22	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 4c8:	84 e8       	ldi	r24, 0x84	; 132
 4ca:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));							// wail until transmission completed and ACK/NACK has been received
 4cc:	06 b6       	in	r0, 0x36	; 54
 4ce:	07 fe       	sbrs	r0, 7
 4d0:	fd cf       	rjmp	.-6      	; 0x4cc <_ZN3I2C5startEh+0x22>
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
 4d2:	91 b1       	in	r25, 0x01	; 1
 4d4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 4d6:	98 31       	cpi	r25, 0x18	; 24
 4d8:	39 f0       	breq	.+14     	; 0x4e8 <_ZN3I2C5startEh+0x3e>
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 34       	cpi	r25, 0x40	; 64
 4de:	29 f4       	brne	.+10     	; 0x4ea <_ZN3I2C5startEh+0x40>
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	08 95       	ret
{
	uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);				// send START condition
	while(!(TWCR & (1<<TWINT)));							// wait until transmission completed
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	08 95       	ret
	TWDR = address + RW;									// send device address
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));							// wail until transmission completed and ACK/NACK has been received
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	return 0;
 4e8:	80 e0       	ldi	r24, 0x00	; 0
}
 4ea:	08 95       	ret

000004ec <_ZN3I2C9rep_startEh>:

unsigned char I2C::rep_start(unsigned char RW)
{
	return start(RW);
 4ec:	0e 94 55 02 	call	0x4aa	; 0x4aa <_ZN3I2C5startEh>
}
 4f0:	08 95       	ret

000004f2 <_ZN3I2C10start_waitEh>:

void I2C::start_wait(unsigned char RW)
{
 4f2:	fc 01       	movw	r30, r24
	uint8_t   twst;
	while ( 1 )
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);						// send START condition
 4f4:	94 ea       	ldi	r25, 0xA4	; 164
		while(!(TWCR & (1<<TWINT)));									// wait until transmission completed
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
		TWDR = address + RW;											// send device address
		TWCR = (1<<TWINT) | (1<<TWEN);
 4f6:	24 e8       	ldi	r18, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));									// wail until transmission completed
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);					//device busy, send stop condition to terminate write operation
 4f8:	34 e9       	ldi	r19, 0x94	; 148
void I2C::start_wait(unsigned char RW)
{
	uint8_t   twst;
	while ( 1 )
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);						// send START condition
 4fa:	96 bf       	out	0x36, r25	; 54
		while(!(TWCR & (1<<TWINT)));									// wait until transmission completed
 4fc:	06 b6       	in	r0, 0x36	; 54
 4fe:	07 fe       	sbrs	r0, 7
 500:	fd cf       	rjmp	.-6      	; 0x4fc <_ZN3I2C10start_waitEh+0xa>
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
 502:	81 b1       	in	r24, 0x01	; 1
 504:	88 7f       	andi	r24, 0xF8	; 248
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 506:	88 30       	cpi	r24, 0x08	; 8
 508:	11 f0       	breq	.+4      	; 0x50e <_ZN3I2C10start_waitEh+0x1c>
 50a:	80 31       	cpi	r24, 0x10	; 16
 50c:	b1 f7       	brne	.-20     	; 0x4fa <_ZN3I2C10start_waitEh+0x8>
		TWDR = address + RW;											// send device address
 50e:	80 81       	ld	r24, Z
 510:	86 0f       	add	r24, r22
 512:	83 b9       	out	0x03, r24	; 3
		TWCR = (1<<TWINT) | (1<<TWEN);
 514:	26 bf       	out	0x36, r18	; 54
		while(!(TWCR & (1<<TWINT)));									// wail until transmission completed
 516:	06 b6       	in	r0, 0x36	; 54
 518:	07 fe       	sbrs	r0, 7
 51a:	fd cf       	rjmp	.-6      	; 0x516 <_ZN3I2C10start_waitEh+0x24>
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
 51c:	81 b1       	in	r24, 0x01	; 1
 51e:	88 7f       	andi	r24, 0xF8	; 248
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
 520:	80 32       	cpi	r24, 0x20	; 32
 522:	11 f0       	breq	.+4      	; 0x528 <_ZN3I2C10start_waitEh+0x36>
 524:	88 35       	cpi	r24, 0x58	; 88
 526:	29 f4       	brne	.+10     	; 0x532 <_ZN3I2C10start_waitEh+0x40>
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);					//device busy, send stop condition to terminate write operation
 528:	36 bf       	out	0x36, r19	; 54
			while(TWCR & (1<<TWSTO));									// wait until stop condition is executed and bus released
 52a:	06 b6       	in	r0, 0x36	; 54
 52c:	04 fc       	sbrc	r0, 4
 52e:	fd cf       	rjmp	.-6      	; 0x52a <_ZN3I2C10start_waitEh+0x38>
 530:	e4 cf       	rjmp	.-56     	; 0x4fa <_ZN3I2C10start_waitEh+0x8>
 532:	08 95       	ret

00000534 <_ZN3I2C4stopEv>:
	}
}

void I2C::stop(void)
{
	 TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);						//send stop condition
 534:	84 e9       	ldi	r24, 0x94	; 148
 536:	86 bf       	out	0x36, r24	; 54
	 while(TWCR & (1<<TWSTO));											// wait until stop condition is executed and bus released
 538:	06 b6       	in	r0, 0x36	; 54
 53a:	04 fc       	sbrc	r0, 4
 53c:	fd cf       	rjmp	.-6      	; 0x538 <_ZN3I2C4stopEv+0x4>
}
 53e:	08 95       	ret

00000540 <_ZN3I2C5writeEh>:


unsigned char I2C::write(unsigned char data)
{
	uint8_t   twst;
	TWDR = data;														// send data to the previously addressed device
 540:	63 b9       	out	0x03, r22	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 542:	84 e8       	ldi	r24, 0x84	; 132
 544:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT))){}										// wait until transmission completed
 546:	06 b6       	in	r0, 0x36	; 54
 548:	07 fe       	sbrs	r0, 7
 54a:	fd cf       	rjmp	.-6      	; 0x546 <_ZN3I2C5writeEh+0x6>
	twst = TW_STATUS & 0xF8;											// check value of TWI Status Register. Mask prescaler bits
 54c:	91 b1       	in	r25, 0x01	; 1
 54e:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	98 32       	cpi	r25, 0x28	; 40
 554:	09 f4       	brne	.+2      	; 0x558 <_ZN3I2C5writeEh+0x18>
 556:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 558:	08 95       	ret

0000055a <_ZN3I2C7readAckEv>:

unsigned char I2C::readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 55a:	84 ec       	ldi	r24, 0xC4	; 196
 55c:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 55e:	06 b6       	in	r0, 0x36	; 54
 560:	07 fe       	sbrs	r0, 7
 562:	fd cf       	rjmp	.-6      	; 0x55e <_ZN3I2C7readAckEv+0x4>
	return TWDR;
 564:	83 b1       	in	r24, 0x03	; 3
}
 566:	08 95       	ret

00000568 <_ZN3I2C7readNakEv>:

unsigned char I2C::readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 568:	84 e8       	ldi	r24, 0x84	; 132
 56a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));	
 56c:	06 b6       	in	r0, 0x36	; 54
 56e:	07 fe       	sbrs	r0, 7
 570:	fd cf       	rjmp	.-6      	; 0x56c <_ZN3I2C7readNakEv+0x4>
	return TWDR;
 572:	83 b1       	in	r24, 0x03	; 3
}
 574:	08 95       	ret

00000576 <_ZN3I2C10readXBytesEPhhh>:
{
	return address;
}

void I2C::readXBytes(unsigned char data[], unsigned char amount, unsigned char startAddress)	//data[x] : x >= amount
{
 576:	af 92       	push	r10
 578:	bf 92       	push	r11
 57a:	cf 92       	push	r12
 57c:	df 92       	push	r13
 57e:	ef 92       	push	r14
 580:	ff 92       	push	r15
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	8c 01       	movw	r16, r24
 58c:	6b 01       	movw	r12, r22
 58e:	a4 2e       	mov	r10, r20
//	if ((sizeof (data)/sizeof (data[0])) >= amount){
		write(startAddress);
 590:	62 2f       	mov	r22, r18
 592:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN3I2C5writeEh>
		rep_start(I2C_READ);
 596:	61 e0       	ldi	r22, 0x01	; 1
 598:	c8 01       	movw	r24, r16
 59a:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN3I2C9rep_startEh>
		for (uint8_t i = 0; i < amount - 1; i++){
 59e:	ea 2c       	mov	r14, r10
 5a0:	f1 2c       	mov	r15, r1
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	e8 1a       	sub	r14, r24
 5a6:	f1 08       	sbc	r15, r1
 5a8:	1e 14       	cp	r1, r14
 5aa:	1f 04       	cpc	r1, r15
 5ac:	74 f4       	brge	.+28     	; 0x5ca <_ZN3I2C10readXBytesEPhhh+0x54>
 5ae:	b1 2c       	mov	r11, r1
			data[i] = readAck();
 5b0:	e6 01       	movw	r28, r12
 5b2:	cb 0d       	add	r28, r11
 5b4:	d1 1d       	adc	r29, r1
 5b6:	c8 01       	movw	r24, r16
 5b8:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN3I2C7readAckEv>
 5bc:	88 83       	st	Y, r24
void I2C::readXBytes(unsigned char data[], unsigned char amount, unsigned char startAddress)	//data[x] : x >= amount
{
//	if ((sizeof (data)/sizeof (data[0])) >= amount){
		write(startAddress);
		rep_start(I2C_READ);
		for (uint8_t i = 0; i < amount - 1; i++){
 5be:	b3 94       	inc	r11
 5c0:	2b 2d       	mov	r18, r11
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	2e 15       	cp	r18, r14
 5c6:	3f 05       	cpc	r19, r15
 5c8:	9c f3       	brlt	.-26     	; 0x5b0 <_ZN3I2C10readXBytesEPhhh+0x3a>
			data[i] = readAck();
		}
		data[amount - 1] = readNak();
 5ca:	8a 2d       	mov	r24, r10
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	e6 01       	movw	r28, r12
 5d2:	c8 0f       	add	r28, r24
 5d4:	d9 1f       	adc	r29, r25
 5d6:	c8 01       	movw	r24, r16
 5d8:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN3I2C7readNakEv>
 5dc:	88 83       	st	Y, r24
//	}
}
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	ef 90       	pop	r14
 5ea:	df 90       	pop	r13
 5ec:	cf 90       	pop	r12
 5ee:	bf 90       	pop	r11
 5f0:	af 90       	pop	r10
 5f2:	08 95       	ret

000005f4 <_ZN3I2C11writeXBytesEPhj>:

void I2C::writeXBytes(unsigned char data[], unsigned int amount)	//data[x] : x >= amount
{
 5f4:	df 92       	push	r13
 5f6:	ef 92       	push	r14
 5f8:	ff 92       	push	r15
 5fa:	0f 93       	push	r16
 5fc:	1f 93       	push	r17
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	7c 01       	movw	r14, r24
 604:	8b 01       	movw	r16, r22
 606:	ea 01       	movw	r28, r20
	for (uint8_t i = 0; i <= amount; i++){
 608:	20 e0       	ldi	r18, 0x00	; 0
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	d1 2c       	mov	r13, r1
		write(data[i]);	
 60e:	f8 01       	movw	r30, r16
 610:	e2 0f       	add	r30, r18
 612:	f3 1f       	adc	r31, r19
 614:	60 81       	ld	r22, Z
 616:	c7 01       	movw	r24, r14
 618:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN3I2C5writeEh>
//	}
}

void I2C::writeXBytes(unsigned char data[], unsigned int amount)	//data[x] : x >= amount
{
	for (uint8_t i = 0; i <= amount; i++){
 61c:	d3 94       	inc	r13
 61e:	2d 2d       	mov	r18, r13
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	c2 17       	cp	r28, r18
 624:	d3 07       	cpc	r29, r19
 626:	98 f7       	brcc	.-26     	; 0x60e <_ZN3I2C11writeXBytesEPhj+0x1a>
		write(data[i]);	
	}
}
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	1f 91       	pop	r17
 62e:	0f 91       	pop	r16
 630:	ff 90       	pop	r15
 632:	ef 90       	pop	r14
 634:	df 90       	pop	r13
 636:	08 95       	ret

00000638 <_ZN3I2CD1Ev>:

// default destructor
I2C::~I2C()
 638:	08 95       	ret

0000063a <_Z12_lcd_delay_8h>:
 63a:	81 50       	subi	r24, 0x01	; 1
 63c:	f0 f7       	brcc	.-4      	; 0x63a <_Z12_lcd_delay_8h>
 63e:	08 95       	ret

00000640 <_ZL11pos_pulse_Ev>:
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	0e 94 1d 03 	call	0x63a	; 0x63a <_Z12_lcd_delay_8h>
 646:	d9 9a       	sbi	0x1b, 1	; 27
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	0e 94 1d 03 	call	0x63a	; 0x63a <_Z12_lcd_delay_8h>
 64e:	d9 98       	cbi	0x1b, 1	; 27
 650:	08 95       	ret

00000652 <_Z13_lcd_delay_16j>:
 652:	81 50       	subi	r24, 0x01	; 1
 654:	90 40       	sbci	r25, 0x00	; 0
 656:	e8 f7       	brcc	.-6      	; 0x652 <_Z13_lcd_delay_16j>
 658:	08 95       	ret

0000065a <_Z16lcd_read_commandv>:
 65a:	cf 93       	push	r28
 65c:	8a b3       	in	r24, 0x1a	; 26
 65e:	8e 60       	ori	r24, 0x0E	; 14
 660:	8a bb       	out	0x1a, r24	; 26
 662:	8a b3       	in	r24, 0x1a	; 26
 664:	8f 70       	andi	r24, 0x0F	; 15
 666:	8a bb       	out	0x1a, r24	; 26
 668:	8b b3       	in	r24, 0x1b	; 27
 66a:	84 6f       	ori	r24, 0xF4	; 244
 66c:	8b bb       	out	0x1b, r24	; 27
 66e:	db 98       	cbi	0x1b, 3	; 27
 670:	82 e0       	ldi	r24, 0x02	; 2
 672:	0e 94 1d 03 	call	0x63a	; 0x63a <_Z12_lcd_delay_8h>
 676:	d9 9a       	sbi	0x1b, 1	; 27
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	0e 94 1d 03 	call	0x63a	; 0x63a <_Z12_lcd_delay_8h>
 67e:	c9 b3       	in	r28, 0x19	; 25
 680:	d9 98       	cbi	0x1b, 1	; 27
 682:	82 e0       	ldi	r24, 0x02	; 2
 684:	0e 94 1d 03 	call	0x63a	; 0x63a <_Z12_lcd_delay_8h>
 688:	d9 9a       	sbi	0x1b, 1	; 27
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	0e 94 1d 03 	call	0x63a	; 0x63a <_Z12_lcd_delay_8h>
 690:	89 b3       	in	r24, 0x19	; 25
 692:	c0 7f       	andi	r28, 0xF0	; 240
 694:	82 95       	swap	r24
 696:	8f 70       	andi	r24, 0x0F	; 15
 698:	d9 98       	cbi	0x1b, 1	; 27
 69a:	8c 2b       	or	r24, r28
 69c:	cf 91       	pop	r28
 69e:	08 95       	ret

000006a0 <_ZL4waitv>:
 6a0:	0e 94 2d 03 	call	0x65a	; 0x65a <_Z16lcd_read_commandv>
 6a4:	88 23       	and	r24, r24
 6a6:	e4 f3       	brlt	.-8      	; 0x6a0 <_ZL4waitv>
 6a8:	08 95       	ret

000006aa <_Z17lcd_write_commandh>:
 6aa:	cf 93       	push	r28
 6ac:	c8 2f       	mov	r28, r24
 6ae:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_ZL4waitv>
 6b2:	8a b3       	in	r24, 0x1a	; 26
 6b4:	8e 6f       	ori	r24, 0xFE	; 254
 6b6:	8a bb       	out	0x1a, r24	; 26
 6b8:	8b b3       	in	r24, 0x1b	; 27
 6ba:	81 70       	andi	r24, 0x01	; 1
 6bc:	8b bb       	out	0x1b, r24	; 27
 6be:	8b b3       	in	r24, 0x1b	; 27
 6c0:	9c 2f       	mov	r25, r28
 6c2:	90 7f       	andi	r25, 0xF0	; 240
 6c4:	89 2b       	or	r24, r25
 6c6:	8b bb       	out	0x1b, r24	; 27
 6c8:	0e 94 20 03 	call	0x640	; 0x640 <_ZL11pos_pulse_Ev>
 6cc:	8b b3       	in	r24, 0x1b	; 27
 6ce:	81 70       	andi	r24, 0x01	; 1
 6d0:	8b bb       	out	0x1b, r24	; 27
 6d2:	2b b3       	in	r18, 0x1b	; 27
 6d4:	30 e1       	ldi	r19, 0x10	; 16
 6d6:	c3 9f       	mul	r28, r19
 6d8:	c0 01       	movw	r24, r0
 6da:	11 24       	eor	r1, r1
 6dc:	82 2b       	or	r24, r18
 6de:	8b bb       	out	0x1b, r24	; 27
 6e0:	0e 94 20 03 	call	0x640	; 0x640 <_ZL11pos_pulse_Ev>
 6e4:	cf 91       	pop	r28
 6e6:	08 95       	ret

000006e8 <_Z14lcd_write_datah>:
 6e8:	cf 93       	push	r28
 6ea:	c8 2f       	mov	r28, r24
 6ec:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_ZL4waitv>
 6f0:	8a b3       	in	r24, 0x1a	; 26
 6f2:	8e 6f       	ori	r24, 0xFE	; 254
 6f4:	8a bb       	out	0x1a, r24	; 26
 6f6:	8b b3       	in	r24, 0x1b	; 27
 6f8:	81 70       	andi	r24, 0x01	; 1
 6fa:	8b bb       	out	0x1b, r24	; 27
 6fc:	8b b3       	in	r24, 0x1b	; 27
 6fe:	88 60       	ori	r24, 0x08	; 8
 700:	9c 2f       	mov	r25, r28
 702:	90 7f       	andi	r25, 0xF0	; 240
 704:	89 2b       	or	r24, r25
 706:	8b bb       	out	0x1b, r24	; 27
 708:	0e 94 20 03 	call	0x640	; 0x640 <_ZL11pos_pulse_Ev>
 70c:	8b b3       	in	r24, 0x1b	; 27
 70e:	81 70       	andi	r24, 0x01	; 1
 710:	8b bb       	out	0x1b, r24	; 27
 712:	2b b3       	in	r18, 0x1b	; 27
 714:	28 60       	ori	r18, 0x08	; 8
 716:	30 e1       	ldi	r19, 0x10	; 16
 718:	c3 9f       	mul	r28, r19
 71a:	c0 01       	movw	r24, r0
 71c:	11 24       	eor	r1, r1
 71e:	82 2b       	or	r24, r18
 720:	8b bb       	out	0x1b, r24	; 27
 722:	0e 94 20 03 	call	0x640	; 0x640 <_ZL11pos_pulse_Ev>
 726:	cf 91       	pop	r28
 728:	08 95       	ret

0000072a <_Z7lcd_clsv>:
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	0e 94 55 03 	call	0x6aa	; 0x6aa <_Z17lcd_write_commandh>
 730:	08 95       	ret

00000732 <_Z8lcd_initv>:
 732:	8a b3       	in	r24, 0x1a	; 26
 734:	8e 6f       	ori	r24, 0xFE	; 254
 736:	8a bb       	out	0x1a, r24	; 26
 738:	8e ef       	ldi	r24, 0xFE	; 254
 73a:	95 e3       	ldi	r25, 0x35	; 53
 73c:	0e 94 29 03 	call	0x652	; 0x652 <_Z13_lcd_delay_16j>
 740:	8b b3       	in	r24, 0x1b	; 27
 742:	81 70       	andi	r24, 0x01	; 1
 744:	8b bb       	out	0x1b, r24	; 27
 746:	8b b3       	in	r24, 0x1b	; 27
 748:	80 63       	ori	r24, 0x30	; 48
 74a:	8b bb       	out	0x1b, r24	; 27
 74c:	0e 94 20 03 	call	0x640	; 0x640 <_ZL11pos_pulse_Ev>
 750:	82 ec       	ldi	r24, 0xC2	; 194
 752:	9e e0       	ldi	r25, 0x0E	; 14
 754:	0e 94 29 03 	call	0x652	; 0x652 <_Z13_lcd_delay_16j>
 758:	0e 94 20 03 	call	0x640	; 0x640 <_ZL11pos_pulse_Ev>
 75c:	8c e5       	ldi	r24, 0x5C	; 92
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 29 03 	call	0x652	; 0x652 <_Z13_lcd_delay_16j>
 764:	0e 94 20 03 	call	0x640	; 0x640 <_ZL11pos_pulse_Ev>
 768:	8c e5       	ldi	r24, 0x5C	; 92
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 29 03 	call	0x652	; 0x652 <_Z13_lcd_delay_16j>
 770:	dc 98       	cbi	0x1b, 4	; 27
 772:	0e 94 20 03 	call	0x640	; 0x640 <_ZL11pos_pulse_Ev>
 776:	8c e5       	ldi	r24, 0x5C	; 92
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 29 03 	call	0x652	; 0x652 <_Z13_lcd_delay_16j>
 77e:	88 e2       	ldi	r24, 0x28	; 40
 780:	0e 94 55 03 	call	0x6aa	; 0x6aa <_Z17lcd_write_commandh>
 784:	86 e0       	ldi	r24, 0x06	; 6
 786:	0e 94 55 03 	call	0x6aa	; 0x6aa <_Z17lcd_write_commandh>
 78a:	0e 94 95 03 	call	0x72a	; 0x72a <_Z7lcd_clsv>
 78e:	8f e0       	ldi	r24, 0x0F	; 15
 790:	0e 94 55 03 	call	0x6aa	; 0x6aa <_Z17lcd_write_commandh>
 794:	08 95       	ret

00000796 <_Z8lcd_homev>:
 796:	82 e0       	ldi	r24, 0x02	; 2
 798:	0e 94 55 03 	call	0x6aa	; 0x6aa <_Z17lcd_write_commandh>
 79c:	08 95       	ret

0000079e <_Z10lcd_cursorbb>:
 79e:	88 23       	and	r24, r24
 7a0:	11 f0       	breq	.+4      	; 0x7a6 <_Z10lcd_cursorbb+0x8>
 7a2:	8e e0       	ldi	r24, 0x0E	; 14
 7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <_Z10lcd_cursorbb+0xa>
 7a6:	8c e0       	ldi	r24, 0x0C	; 12
 7a8:	86 0f       	add	r24, r22
 7aa:	0e 94 55 03 	call	0x6aa	; 0x6aa <_Z17lcd_write_commandh>
 7ae:	08 95       	ret

000007b0 <_Z8lcd_gotohh>:
 7b0:	82 30       	cpi	r24, 0x02	; 2
 7b2:	50 f4       	brcc	.+20     	; 0x7c8 <_Z8lcd_gotohh+0x18>
 7b4:	60 31       	cpi	r22, 0x10	; 16
 7b6:	40 f4       	brcc	.+16     	; 0x7c8 <_Z8lcd_gotohh+0x18>
 7b8:	90 e4       	ldi	r25, 0x40	; 64
 7ba:	89 9f       	mul	r24, r25
 7bc:	60 0d       	add	r22, r0
 7be:	11 24       	eor	r1, r1
 7c0:	86 2f       	mov	r24, r22
 7c2:	80 58       	subi	r24, 0x80	; 128
 7c4:	0e 94 55 03 	call	0x6aa	; 0x6aa <_Z17lcd_write_commandh>
 7c8:	08 95       	ret

000007ca <_Z11lcd_get_rowv>:
 7ca:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_ZL4waitv>
 7ce:	0e 94 2d 03 	call	0x65a	; 0x65a <_Z16lcd_read_commandv>
 7d2:	86 fb       	bst	r24, 6
 7d4:	88 27       	eor	r24, r24
 7d6:	80 f9       	bld	r24, 0
 7d8:	08 95       	ret

000007da <_Z14lcd_get_columnv>:
 7da:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_ZL4waitv>
 7de:	0e 94 2d 03 	call	0x65a	; 0x65a <_Z16lcd_read_commandv>
 7e2:	8f 73       	andi	r24, 0x3F	; 63
 7e4:	08 95       	ret

000007e6 <_Z8lcd_putsPc>:
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	ec 01       	movw	r28, r24
 7ec:	88 81       	ld	r24, Y
 7ee:	88 23       	and	r24, r24
 7f0:	31 f0       	breq	.+12     	; 0x7fe <_Z8lcd_putsPc+0x18>
 7f2:	21 96       	adiw	r28, 0x01	; 1
 7f4:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_Z14lcd_write_datah>
 7f8:	89 91       	ld	r24, Y+
 7fa:	81 11       	cpse	r24, r1
 7fc:	fb cf       	rjmp	.-10     	; 0x7f4 <_Z8lcd_putsPc+0xe>
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	08 95       	ret

00000804 <__tablejump2__>:
 804:	ee 0f       	add	r30, r30
 806:	ff 1f       	adc	r31, r31

00000808 <__tablejump__>:
 808:	05 90       	lpm	r0, Z+
 80a:	f4 91       	lpm	r31, Z
 80c:	e0 2d       	mov	r30, r0
 80e:	09 94       	ijmp

00000810 <snprintf>:
 810:	ae e0       	ldi	r26, 0x0E	; 14
 812:	b0 e0       	ldi	r27, 0x00	; 0
 814:	ee e0       	ldi	r30, 0x0E	; 14
 816:	f4 e0       	ldi	r31, 0x04	; 4
 818:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__prologue_saves__+0x1c>
 81c:	0d 89       	ldd	r16, Y+21	; 0x15
 81e:	1e 89       	ldd	r17, Y+22	; 0x16
 820:	8f 89       	ldd	r24, Y+23	; 0x17
 822:	98 8d       	ldd	r25, Y+24	; 0x18
 824:	26 e0       	ldi	r18, 0x06	; 6
 826:	2c 83       	std	Y+4, r18	; 0x04
 828:	1a 83       	std	Y+2, r17	; 0x02
 82a:	09 83       	std	Y+1, r16	; 0x01
 82c:	97 ff       	sbrs	r25, 7
 82e:	02 c0       	rjmp	.+4      	; 0x834 <snprintf+0x24>
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	90 e8       	ldi	r25, 0x80	; 128
 834:	01 97       	sbiw	r24, 0x01	; 1
 836:	9e 83       	std	Y+6, r25	; 0x06
 838:	8d 83       	std	Y+5, r24	; 0x05
 83a:	ae 01       	movw	r20, r28
 83c:	45 5e       	subi	r20, 0xE5	; 229
 83e:	5f 4f       	sbci	r21, 0xFF	; 255
 840:	69 8d       	ldd	r22, Y+25	; 0x19
 842:	7a 8d       	ldd	r23, Y+26	; 0x1a
 844:	ce 01       	movw	r24, r28
 846:	01 96       	adiw	r24, 0x01	; 1
 848:	0e 94 38 04 	call	0x870	; 0x870 <vfprintf>
 84c:	4d 81       	ldd	r20, Y+5	; 0x05
 84e:	5e 81       	ldd	r21, Y+6	; 0x06
 850:	57 fd       	sbrc	r21, 7
 852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
 854:	2f 81       	ldd	r18, Y+7	; 0x07
 856:	38 85       	ldd	r19, Y+8	; 0x08
 858:	42 17       	cp	r20, r18
 85a:	53 07       	cpc	r21, r19
 85c:	0c f4       	brge	.+2      	; 0x860 <__stack+0x1>
 85e:	9a 01       	movw	r18, r20
 860:	f8 01       	movw	r30, r16
 862:	e2 0f       	add	r30, r18
 864:	f3 1f       	adc	r31, r19
 866:	10 82       	st	Z, r1
 868:	2e 96       	adiw	r28, 0x0e	; 14
 86a:	e4 e0       	ldi	r30, 0x04	; 4
 86c:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__epilogue_restores__+0x1c>

00000870 <vfprintf>:
 870:	ac e0       	ldi	r26, 0x0C	; 12
 872:	b0 e0       	ldi	r27, 0x00	; 0
 874:	ee e3       	ldi	r30, 0x3E	; 62
 876:	f4 e0       	ldi	r31, 0x04	; 4
 878:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__prologue_saves__>
 87c:	7c 01       	movw	r14, r24
 87e:	6b 01       	movw	r12, r22
 880:	8a 01       	movw	r16, r20
 882:	fc 01       	movw	r30, r24
 884:	17 82       	std	Z+7, r1	; 0x07
 886:	16 82       	std	Z+6, r1	; 0x06
 888:	83 81       	ldd	r24, Z+3	; 0x03
 88a:	81 ff       	sbrs	r24, 1
 88c:	bd c1       	rjmp	.+890    	; 0xc08 <vfprintf+0x398>
 88e:	ce 01       	movw	r24, r28
 890:	01 96       	adiw	r24, 0x01	; 1
 892:	4c 01       	movw	r8, r24
 894:	f7 01       	movw	r30, r14
 896:	93 81       	ldd	r25, Z+3	; 0x03
 898:	f6 01       	movw	r30, r12
 89a:	93 fd       	sbrc	r25, 3
 89c:	85 91       	lpm	r24, Z+
 89e:	93 ff       	sbrs	r25, 3
 8a0:	81 91       	ld	r24, Z+
 8a2:	6f 01       	movw	r12, r30
 8a4:	88 23       	and	r24, r24
 8a6:	09 f4       	brne	.+2      	; 0x8aa <vfprintf+0x3a>
 8a8:	ab c1       	rjmp	.+854    	; 0xc00 <vfprintf+0x390>
 8aa:	85 32       	cpi	r24, 0x25	; 37
 8ac:	39 f4       	brne	.+14     	; 0x8bc <vfprintf+0x4c>
 8ae:	93 fd       	sbrc	r25, 3
 8b0:	85 91       	lpm	r24, Z+
 8b2:	93 ff       	sbrs	r25, 3
 8b4:	81 91       	ld	r24, Z+
 8b6:	6f 01       	movw	r12, r30
 8b8:	85 32       	cpi	r24, 0x25	; 37
 8ba:	29 f4       	brne	.+10     	; 0x8c6 <vfprintf+0x56>
 8bc:	b7 01       	movw	r22, r14
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 8c4:	e7 cf       	rjmp	.-50     	; 0x894 <vfprintf+0x24>
 8c6:	51 2c       	mov	r5, r1
 8c8:	31 2c       	mov	r3, r1
 8ca:	20 e0       	ldi	r18, 0x00	; 0
 8cc:	20 32       	cpi	r18, 0x20	; 32
 8ce:	a0 f4       	brcc	.+40     	; 0x8f8 <vfprintf+0x88>
 8d0:	8b 32       	cpi	r24, 0x2B	; 43
 8d2:	69 f0       	breq	.+26     	; 0x8ee <vfprintf+0x7e>
 8d4:	30 f4       	brcc	.+12     	; 0x8e2 <vfprintf+0x72>
 8d6:	80 32       	cpi	r24, 0x20	; 32
 8d8:	59 f0       	breq	.+22     	; 0x8f0 <vfprintf+0x80>
 8da:	83 32       	cpi	r24, 0x23	; 35
 8dc:	69 f4       	brne	.+26     	; 0x8f8 <vfprintf+0x88>
 8de:	20 61       	ori	r18, 0x10	; 16
 8e0:	2c c0       	rjmp	.+88     	; 0x93a <vfprintf+0xca>
 8e2:	8d 32       	cpi	r24, 0x2D	; 45
 8e4:	39 f0       	breq	.+14     	; 0x8f4 <vfprintf+0x84>
 8e6:	80 33       	cpi	r24, 0x30	; 48
 8e8:	39 f4       	brne	.+14     	; 0x8f8 <vfprintf+0x88>
 8ea:	21 60       	ori	r18, 0x01	; 1
 8ec:	26 c0       	rjmp	.+76     	; 0x93a <vfprintf+0xca>
 8ee:	22 60       	ori	r18, 0x02	; 2
 8f0:	24 60       	ori	r18, 0x04	; 4
 8f2:	23 c0       	rjmp	.+70     	; 0x93a <vfprintf+0xca>
 8f4:	28 60       	ori	r18, 0x08	; 8
 8f6:	21 c0       	rjmp	.+66     	; 0x93a <vfprintf+0xca>
 8f8:	27 fd       	sbrc	r18, 7
 8fa:	27 c0       	rjmp	.+78     	; 0x94a <vfprintf+0xda>
 8fc:	30 ed       	ldi	r19, 0xD0	; 208
 8fe:	38 0f       	add	r19, r24
 900:	3a 30       	cpi	r19, 0x0A	; 10
 902:	78 f4       	brcc	.+30     	; 0x922 <vfprintf+0xb2>
 904:	26 ff       	sbrs	r18, 6
 906:	06 c0       	rjmp	.+12     	; 0x914 <vfprintf+0xa4>
 908:	fa e0       	ldi	r31, 0x0A	; 10
 90a:	5f 9e       	mul	r5, r31
 90c:	30 0d       	add	r19, r0
 90e:	11 24       	eor	r1, r1
 910:	53 2e       	mov	r5, r19
 912:	13 c0       	rjmp	.+38     	; 0x93a <vfprintf+0xca>
 914:	8a e0       	ldi	r24, 0x0A	; 10
 916:	38 9e       	mul	r3, r24
 918:	30 0d       	add	r19, r0
 91a:	11 24       	eor	r1, r1
 91c:	33 2e       	mov	r3, r19
 91e:	20 62       	ori	r18, 0x20	; 32
 920:	0c c0       	rjmp	.+24     	; 0x93a <vfprintf+0xca>
 922:	8e 32       	cpi	r24, 0x2E	; 46
 924:	21 f4       	brne	.+8      	; 0x92e <vfprintf+0xbe>
 926:	26 fd       	sbrc	r18, 6
 928:	6b c1       	rjmp	.+726    	; 0xc00 <vfprintf+0x390>
 92a:	20 64       	ori	r18, 0x40	; 64
 92c:	06 c0       	rjmp	.+12     	; 0x93a <vfprintf+0xca>
 92e:	8c 36       	cpi	r24, 0x6C	; 108
 930:	11 f4       	brne	.+4      	; 0x936 <vfprintf+0xc6>
 932:	20 68       	ori	r18, 0x80	; 128
 934:	02 c0       	rjmp	.+4      	; 0x93a <vfprintf+0xca>
 936:	88 36       	cpi	r24, 0x68	; 104
 938:	41 f4       	brne	.+16     	; 0x94a <vfprintf+0xda>
 93a:	f6 01       	movw	r30, r12
 93c:	93 fd       	sbrc	r25, 3
 93e:	85 91       	lpm	r24, Z+
 940:	93 ff       	sbrs	r25, 3
 942:	81 91       	ld	r24, Z+
 944:	6f 01       	movw	r12, r30
 946:	81 11       	cpse	r24, r1
 948:	c1 cf       	rjmp	.-126    	; 0x8cc <vfprintf+0x5c>
 94a:	98 2f       	mov	r25, r24
 94c:	9f 7d       	andi	r25, 0xDF	; 223
 94e:	95 54       	subi	r25, 0x45	; 69
 950:	93 30       	cpi	r25, 0x03	; 3
 952:	28 f4       	brcc	.+10     	; 0x95e <vfprintf+0xee>
 954:	0c 5f       	subi	r16, 0xFC	; 252
 956:	1f 4f       	sbci	r17, 0xFF	; 255
 958:	ff e3       	ldi	r31, 0x3F	; 63
 95a:	f9 83       	std	Y+1, r31	; 0x01
 95c:	0d c0       	rjmp	.+26     	; 0x978 <vfprintf+0x108>
 95e:	83 36       	cpi	r24, 0x63	; 99
 960:	31 f0       	breq	.+12     	; 0x96e <vfprintf+0xfe>
 962:	83 37       	cpi	r24, 0x73	; 115
 964:	71 f0       	breq	.+28     	; 0x982 <vfprintf+0x112>
 966:	83 35       	cpi	r24, 0x53	; 83
 968:	09 f0       	breq	.+2      	; 0x96c <vfprintf+0xfc>
 96a:	5b c0       	rjmp	.+182    	; 0xa22 <vfprintf+0x1b2>
 96c:	22 c0       	rjmp	.+68     	; 0x9b2 <vfprintf+0x142>
 96e:	f8 01       	movw	r30, r16
 970:	80 81       	ld	r24, Z
 972:	89 83       	std	Y+1, r24	; 0x01
 974:	0e 5f       	subi	r16, 0xFE	; 254
 976:	1f 4f       	sbci	r17, 0xFF	; 255
 978:	44 24       	eor	r4, r4
 97a:	43 94       	inc	r4
 97c:	51 2c       	mov	r5, r1
 97e:	54 01       	movw	r10, r8
 980:	15 c0       	rjmp	.+42     	; 0x9ac <vfprintf+0x13c>
 982:	38 01       	movw	r6, r16
 984:	f2 e0       	ldi	r31, 0x02	; 2
 986:	6f 0e       	add	r6, r31
 988:	71 1c       	adc	r7, r1
 98a:	f8 01       	movw	r30, r16
 98c:	a0 80       	ld	r10, Z
 98e:	b1 80       	ldd	r11, Z+1	; 0x01
 990:	26 ff       	sbrs	r18, 6
 992:	03 c0       	rjmp	.+6      	; 0x99a <vfprintf+0x12a>
 994:	65 2d       	mov	r22, r5
 996:	70 e0       	ldi	r23, 0x00	; 0
 998:	02 c0       	rjmp	.+4      	; 0x99e <vfprintf+0x12e>
 99a:	6f ef       	ldi	r22, 0xFF	; 255
 99c:	7f ef       	ldi	r23, 0xFF	; 255
 99e:	c5 01       	movw	r24, r10
 9a0:	2c 87       	std	Y+12, r18	; 0x0c
 9a2:	0e 94 15 06 	call	0xc2a	; 0xc2a <strnlen>
 9a6:	2c 01       	movw	r4, r24
 9a8:	83 01       	movw	r16, r6
 9aa:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ac:	2f 77       	andi	r18, 0x7F	; 127
 9ae:	22 2e       	mov	r2, r18
 9b0:	17 c0       	rjmp	.+46     	; 0x9e0 <vfprintf+0x170>
 9b2:	38 01       	movw	r6, r16
 9b4:	f2 e0       	ldi	r31, 0x02	; 2
 9b6:	6f 0e       	add	r6, r31
 9b8:	71 1c       	adc	r7, r1
 9ba:	f8 01       	movw	r30, r16
 9bc:	a0 80       	ld	r10, Z
 9be:	b1 80       	ldd	r11, Z+1	; 0x01
 9c0:	26 ff       	sbrs	r18, 6
 9c2:	03 c0       	rjmp	.+6      	; 0x9ca <vfprintf+0x15a>
 9c4:	65 2d       	mov	r22, r5
 9c6:	70 e0       	ldi	r23, 0x00	; 0
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <vfprintf+0x15e>
 9ca:	6f ef       	ldi	r22, 0xFF	; 255
 9cc:	7f ef       	ldi	r23, 0xFF	; 255
 9ce:	c5 01       	movw	r24, r10
 9d0:	2c 87       	std	Y+12, r18	; 0x0c
 9d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <strnlen_P>
 9d6:	2c 01       	movw	r4, r24
 9d8:	2c 85       	ldd	r18, Y+12	; 0x0c
 9da:	20 68       	ori	r18, 0x80	; 128
 9dc:	22 2e       	mov	r2, r18
 9de:	83 01       	movw	r16, r6
 9e0:	23 fc       	sbrc	r2, 3
 9e2:	1b c0       	rjmp	.+54     	; 0xa1a <vfprintf+0x1aa>
 9e4:	83 2d       	mov	r24, r3
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	48 16       	cp	r4, r24
 9ea:	59 06       	cpc	r5, r25
 9ec:	b0 f4       	brcc	.+44     	; 0xa1a <vfprintf+0x1aa>
 9ee:	b7 01       	movw	r22, r14
 9f0:	80 e2       	ldi	r24, 0x20	; 32
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 9f8:	3a 94       	dec	r3
 9fa:	f4 cf       	rjmp	.-24     	; 0x9e4 <vfprintf+0x174>
 9fc:	f5 01       	movw	r30, r10
 9fe:	27 fc       	sbrc	r2, 7
 a00:	85 91       	lpm	r24, Z+
 a02:	27 fe       	sbrs	r2, 7
 a04:	81 91       	ld	r24, Z+
 a06:	5f 01       	movw	r10, r30
 a08:	b7 01       	movw	r22, r14
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 a10:	31 10       	cpse	r3, r1
 a12:	3a 94       	dec	r3
 a14:	f1 e0       	ldi	r31, 0x01	; 1
 a16:	4f 1a       	sub	r4, r31
 a18:	51 08       	sbc	r5, r1
 a1a:	41 14       	cp	r4, r1
 a1c:	51 04       	cpc	r5, r1
 a1e:	71 f7       	brne	.-36     	; 0x9fc <vfprintf+0x18c>
 a20:	e5 c0       	rjmp	.+458    	; 0xbec <vfprintf+0x37c>
 a22:	84 36       	cpi	r24, 0x64	; 100
 a24:	11 f0       	breq	.+4      	; 0xa2a <vfprintf+0x1ba>
 a26:	89 36       	cpi	r24, 0x69	; 105
 a28:	39 f5       	brne	.+78     	; 0xa78 <vfprintf+0x208>
 a2a:	f8 01       	movw	r30, r16
 a2c:	27 ff       	sbrs	r18, 7
 a2e:	07 c0       	rjmp	.+14     	; 0xa3e <vfprintf+0x1ce>
 a30:	60 81       	ld	r22, Z
 a32:	71 81       	ldd	r23, Z+1	; 0x01
 a34:	82 81       	ldd	r24, Z+2	; 0x02
 a36:	93 81       	ldd	r25, Z+3	; 0x03
 a38:	0c 5f       	subi	r16, 0xFC	; 252
 a3a:	1f 4f       	sbci	r17, 0xFF	; 255
 a3c:	08 c0       	rjmp	.+16     	; 0xa4e <vfprintf+0x1de>
 a3e:	60 81       	ld	r22, Z
 a40:	71 81       	ldd	r23, Z+1	; 0x01
 a42:	88 27       	eor	r24, r24
 a44:	77 fd       	sbrc	r23, 7
 a46:	80 95       	com	r24
 a48:	98 2f       	mov	r25, r24
 a4a:	0e 5f       	subi	r16, 0xFE	; 254
 a4c:	1f 4f       	sbci	r17, 0xFF	; 255
 a4e:	2f 76       	andi	r18, 0x6F	; 111
 a50:	b2 2e       	mov	r11, r18
 a52:	97 ff       	sbrs	r25, 7
 a54:	09 c0       	rjmp	.+18     	; 0xa68 <vfprintf+0x1f8>
 a56:	90 95       	com	r25
 a58:	80 95       	com	r24
 a5a:	70 95       	com	r23
 a5c:	61 95       	neg	r22
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255
 a60:	8f 4f       	sbci	r24, 0xFF	; 255
 a62:	9f 4f       	sbci	r25, 0xFF	; 255
 a64:	20 68       	ori	r18, 0x80	; 128
 a66:	b2 2e       	mov	r11, r18
 a68:	2a e0       	ldi	r18, 0x0A	; 10
 a6a:	30 e0       	ldi	r19, 0x00	; 0
 a6c:	a4 01       	movw	r20, r8
 a6e:	0e 94 52 06 	call	0xca4	; 0xca4 <__ultoa_invert>
 a72:	a8 2e       	mov	r10, r24
 a74:	a8 18       	sub	r10, r8
 a76:	44 c0       	rjmp	.+136    	; 0xb00 <vfprintf+0x290>
 a78:	85 37       	cpi	r24, 0x75	; 117
 a7a:	29 f4       	brne	.+10     	; 0xa86 <vfprintf+0x216>
 a7c:	2f 7e       	andi	r18, 0xEF	; 239
 a7e:	b2 2e       	mov	r11, r18
 a80:	2a e0       	ldi	r18, 0x0A	; 10
 a82:	30 e0       	ldi	r19, 0x00	; 0
 a84:	25 c0       	rjmp	.+74     	; 0xad0 <vfprintf+0x260>
 a86:	f2 2f       	mov	r31, r18
 a88:	f9 7f       	andi	r31, 0xF9	; 249
 a8a:	bf 2e       	mov	r11, r31
 a8c:	8f 36       	cpi	r24, 0x6F	; 111
 a8e:	c1 f0       	breq	.+48     	; 0xac0 <vfprintf+0x250>
 a90:	18 f4       	brcc	.+6      	; 0xa98 <vfprintf+0x228>
 a92:	88 35       	cpi	r24, 0x58	; 88
 a94:	79 f0       	breq	.+30     	; 0xab4 <vfprintf+0x244>
 a96:	b4 c0       	rjmp	.+360    	; 0xc00 <vfprintf+0x390>
 a98:	80 37       	cpi	r24, 0x70	; 112
 a9a:	19 f0       	breq	.+6      	; 0xaa2 <vfprintf+0x232>
 a9c:	88 37       	cpi	r24, 0x78	; 120
 a9e:	21 f0       	breq	.+8      	; 0xaa8 <vfprintf+0x238>
 aa0:	af c0       	rjmp	.+350    	; 0xc00 <vfprintf+0x390>
 aa2:	2f 2f       	mov	r18, r31
 aa4:	20 61       	ori	r18, 0x10	; 16
 aa6:	b2 2e       	mov	r11, r18
 aa8:	b4 fe       	sbrs	r11, 4
 aaa:	0d c0       	rjmp	.+26     	; 0xac6 <vfprintf+0x256>
 aac:	8b 2d       	mov	r24, r11
 aae:	84 60       	ori	r24, 0x04	; 4
 ab0:	b8 2e       	mov	r11, r24
 ab2:	09 c0       	rjmp	.+18     	; 0xac6 <vfprintf+0x256>
 ab4:	24 ff       	sbrs	r18, 4
 ab6:	0a c0       	rjmp	.+20     	; 0xacc <vfprintf+0x25c>
 ab8:	9f 2f       	mov	r25, r31
 aba:	96 60       	ori	r25, 0x06	; 6
 abc:	b9 2e       	mov	r11, r25
 abe:	06 c0       	rjmp	.+12     	; 0xacc <vfprintf+0x25c>
 ac0:	28 e0       	ldi	r18, 0x08	; 8
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	05 c0       	rjmp	.+10     	; 0xad0 <vfprintf+0x260>
 ac6:	20 e1       	ldi	r18, 0x10	; 16
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <vfprintf+0x260>
 acc:	20 e1       	ldi	r18, 0x10	; 16
 ace:	32 e0       	ldi	r19, 0x02	; 2
 ad0:	f8 01       	movw	r30, r16
 ad2:	b7 fe       	sbrs	r11, 7
 ad4:	07 c0       	rjmp	.+14     	; 0xae4 <vfprintf+0x274>
 ad6:	60 81       	ld	r22, Z
 ad8:	71 81       	ldd	r23, Z+1	; 0x01
 ada:	82 81       	ldd	r24, Z+2	; 0x02
 adc:	93 81       	ldd	r25, Z+3	; 0x03
 ade:	0c 5f       	subi	r16, 0xFC	; 252
 ae0:	1f 4f       	sbci	r17, 0xFF	; 255
 ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <vfprintf+0x280>
 ae4:	60 81       	ld	r22, Z
 ae6:	71 81       	ldd	r23, Z+1	; 0x01
 ae8:	80 e0       	ldi	r24, 0x00	; 0
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	0e 5f       	subi	r16, 0xFE	; 254
 aee:	1f 4f       	sbci	r17, 0xFF	; 255
 af0:	a4 01       	movw	r20, r8
 af2:	0e 94 52 06 	call	0xca4	; 0xca4 <__ultoa_invert>
 af6:	a8 2e       	mov	r10, r24
 af8:	a8 18       	sub	r10, r8
 afa:	fb 2d       	mov	r31, r11
 afc:	ff 77       	andi	r31, 0x7F	; 127
 afe:	bf 2e       	mov	r11, r31
 b00:	b6 fe       	sbrs	r11, 6
 b02:	0b c0       	rjmp	.+22     	; 0xb1a <vfprintf+0x2aa>
 b04:	2b 2d       	mov	r18, r11
 b06:	2e 7f       	andi	r18, 0xFE	; 254
 b08:	a5 14       	cp	r10, r5
 b0a:	50 f4       	brcc	.+20     	; 0xb20 <vfprintf+0x2b0>
 b0c:	b4 fe       	sbrs	r11, 4
 b0e:	0a c0       	rjmp	.+20     	; 0xb24 <vfprintf+0x2b4>
 b10:	b2 fc       	sbrc	r11, 2
 b12:	08 c0       	rjmp	.+16     	; 0xb24 <vfprintf+0x2b4>
 b14:	2b 2d       	mov	r18, r11
 b16:	2e 7e       	andi	r18, 0xEE	; 238
 b18:	05 c0       	rjmp	.+10     	; 0xb24 <vfprintf+0x2b4>
 b1a:	7a 2c       	mov	r7, r10
 b1c:	2b 2d       	mov	r18, r11
 b1e:	03 c0       	rjmp	.+6      	; 0xb26 <vfprintf+0x2b6>
 b20:	7a 2c       	mov	r7, r10
 b22:	01 c0       	rjmp	.+2      	; 0xb26 <vfprintf+0x2b6>
 b24:	75 2c       	mov	r7, r5
 b26:	24 ff       	sbrs	r18, 4
 b28:	0d c0       	rjmp	.+26     	; 0xb44 <vfprintf+0x2d4>
 b2a:	fe 01       	movw	r30, r28
 b2c:	ea 0d       	add	r30, r10
 b2e:	f1 1d       	adc	r31, r1
 b30:	80 81       	ld	r24, Z
 b32:	80 33       	cpi	r24, 0x30	; 48
 b34:	11 f4       	brne	.+4      	; 0xb3a <vfprintf+0x2ca>
 b36:	29 7e       	andi	r18, 0xE9	; 233
 b38:	09 c0       	rjmp	.+18     	; 0xb4c <vfprintf+0x2dc>
 b3a:	22 ff       	sbrs	r18, 2
 b3c:	06 c0       	rjmp	.+12     	; 0xb4a <vfprintf+0x2da>
 b3e:	73 94       	inc	r7
 b40:	73 94       	inc	r7
 b42:	04 c0       	rjmp	.+8      	; 0xb4c <vfprintf+0x2dc>
 b44:	82 2f       	mov	r24, r18
 b46:	86 78       	andi	r24, 0x86	; 134
 b48:	09 f0       	breq	.+2      	; 0xb4c <vfprintf+0x2dc>
 b4a:	73 94       	inc	r7
 b4c:	23 fd       	sbrc	r18, 3
 b4e:	13 c0       	rjmp	.+38     	; 0xb76 <vfprintf+0x306>
 b50:	20 ff       	sbrs	r18, 0
 b52:	06 c0       	rjmp	.+12     	; 0xb60 <vfprintf+0x2f0>
 b54:	5a 2c       	mov	r5, r10
 b56:	73 14       	cp	r7, r3
 b58:	18 f4       	brcc	.+6      	; 0xb60 <vfprintf+0x2f0>
 b5a:	53 0c       	add	r5, r3
 b5c:	57 18       	sub	r5, r7
 b5e:	73 2c       	mov	r7, r3
 b60:	73 14       	cp	r7, r3
 b62:	68 f4       	brcc	.+26     	; 0xb7e <vfprintf+0x30e>
 b64:	b7 01       	movw	r22, r14
 b66:	80 e2       	ldi	r24, 0x20	; 32
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	2c 87       	std	Y+12, r18	; 0x0c
 b6c:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 b70:	73 94       	inc	r7
 b72:	2c 85       	ldd	r18, Y+12	; 0x0c
 b74:	f5 cf       	rjmp	.-22     	; 0xb60 <vfprintf+0x2f0>
 b76:	73 14       	cp	r7, r3
 b78:	10 f4       	brcc	.+4      	; 0xb7e <vfprintf+0x30e>
 b7a:	37 18       	sub	r3, r7
 b7c:	01 c0       	rjmp	.+2      	; 0xb80 <vfprintf+0x310>
 b7e:	31 2c       	mov	r3, r1
 b80:	24 ff       	sbrs	r18, 4
 b82:	12 c0       	rjmp	.+36     	; 0xba8 <vfprintf+0x338>
 b84:	b7 01       	movw	r22, r14
 b86:	80 e3       	ldi	r24, 0x30	; 48
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	2c 87       	std	Y+12, r18	; 0x0c
 b8c:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 b90:	2c 85       	ldd	r18, Y+12	; 0x0c
 b92:	22 ff       	sbrs	r18, 2
 b94:	17 c0       	rjmp	.+46     	; 0xbc4 <vfprintf+0x354>
 b96:	21 ff       	sbrs	r18, 1
 b98:	03 c0       	rjmp	.+6      	; 0xba0 <vfprintf+0x330>
 b9a:	88 e5       	ldi	r24, 0x58	; 88
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <vfprintf+0x334>
 ba0:	88 e7       	ldi	r24, 0x78	; 120
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	b7 01       	movw	r22, r14
 ba6:	0c c0       	rjmp	.+24     	; 0xbc0 <vfprintf+0x350>
 ba8:	82 2f       	mov	r24, r18
 baa:	86 78       	andi	r24, 0x86	; 134
 bac:	59 f0       	breq	.+22     	; 0xbc4 <vfprintf+0x354>
 bae:	21 fd       	sbrc	r18, 1
 bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <vfprintf+0x346>
 bb2:	80 e2       	ldi	r24, 0x20	; 32
 bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <vfprintf+0x348>
 bb6:	8b e2       	ldi	r24, 0x2B	; 43
 bb8:	27 fd       	sbrc	r18, 7
 bba:	8d e2       	ldi	r24, 0x2D	; 45
 bbc:	b7 01       	movw	r22, r14
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 bc4:	a5 14       	cp	r10, r5
 bc6:	38 f4       	brcc	.+14     	; 0xbd6 <vfprintf+0x366>
 bc8:	b7 01       	movw	r22, r14
 bca:	80 e3       	ldi	r24, 0x30	; 48
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 bd2:	5a 94       	dec	r5
 bd4:	f7 cf       	rjmp	.-18     	; 0xbc4 <vfprintf+0x354>
 bd6:	aa 94       	dec	r10
 bd8:	f4 01       	movw	r30, r8
 bda:	ea 0d       	add	r30, r10
 bdc:	f1 1d       	adc	r31, r1
 bde:	80 81       	ld	r24, Z
 be0:	b7 01       	movw	r22, r14
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 be8:	a1 10       	cpse	r10, r1
 bea:	f5 cf       	rjmp	.-22     	; 0xbd6 <vfprintf+0x366>
 bec:	33 20       	and	r3, r3
 bee:	09 f4       	brne	.+2      	; 0xbf2 <vfprintf+0x382>
 bf0:	51 ce       	rjmp	.-862    	; 0x894 <vfprintf+0x24>
 bf2:	b7 01       	movw	r22, r14
 bf4:	80 e2       	ldi	r24, 0x20	; 32
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 bfc:	3a 94       	dec	r3
 bfe:	f6 cf       	rjmp	.-20     	; 0xbec <vfprintf+0x37c>
 c00:	f7 01       	movw	r30, r14
 c02:	86 81       	ldd	r24, Z+6	; 0x06
 c04:	97 81       	ldd	r25, Z+7	; 0x07
 c06:	02 c0       	rjmp	.+4      	; 0xc0c <vfprintf+0x39c>
 c08:	8f ef       	ldi	r24, 0xFF	; 255
 c0a:	9f ef       	ldi	r25, 0xFF	; 255
 c0c:	2c 96       	adiw	r28, 0x0c	; 12
 c0e:	e2 e1       	ldi	r30, 0x12	; 18
 c10:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__epilogue_restores__>

00000c14 <strnlen_P>:
 c14:	fc 01       	movw	r30, r24
 c16:	05 90       	lpm	r0, Z+
 c18:	61 50       	subi	r22, 0x01	; 1
 c1a:	70 40       	sbci	r23, 0x00	; 0
 c1c:	01 10       	cpse	r0, r1
 c1e:	d8 f7       	brcc	.-10     	; 0xc16 <strnlen_P+0x2>
 c20:	80 95       	com	r24
 c22:	90 95       	com	r25
 c24:	8e 0f       	add	r24, r30
 c26:	9f 1f       	adc	r25, r31
 c28:	08 95       	ret

00000c2a <strnlen>:
 c2a:	fc 01       	movw	r30, r24
 c2c:	61 50       	subi	r22, 0x01	; 1
 c2e:	70 40       	sbci	r23, 0x00	; 0
 c30:	01 90       	ld	r0, Z+
 c32:	01 10       	cpse	r0, r1
 c34:	d8 f7       	brcc	.-10     	; 0xc2c <strnlen+0x2>
 c36:	80 95       	com	r24
 c38:	90 95       	com	r25
 c3a:	8e 0f       	add	r24, r30
 c3c:	9f 1f       	adc	r25, r31
 c3e:	08 95       	ret

00000c40 <fputc>:
 c40:	0f 93       	push	r16
 c42:	1f 93       	push	r17
 c44:	cf 93       	push	r28
 c46:	df 93       	push	r29
 c48:	18 2f       	mov	r17, r24
 c4a:	09 2f       	mov	r16, r25
 c4c:	eb 01       	movw	r28, r22
 c4e:	8b 81       	ldd	r24, Y+3	; 0x03
 c50:	81 fd       	sbrc	r24, 1
 c52:	03 c0       	rjmp	.+6      	; 0xc5a <fputc+0x1a>
 c54:	8f ef       	ldi	r24, 0xFF	; 255
 c56:	9f ef       	ldi	r25, 0xFF	; 255
 c58:	20 c0       	rjmp	.+64     	; 0xc9a <fputc+0x5a>
 c5a:	82 ff       	sbrs	r24, 2
 c5c:	10 c0       	rjmp	.+32     	; 0xc7e <fputc+0x3e>
 c5e:	4e 81       	ldd	r20, Y+6	; 0x06
 c60:	5f 81       	ldd	r21, Y+7	; 0x07
 c62:	2c 81       	ldd	r18, Y+4	; 0x04
 c64:	3d 81       	ldd	r19, Y+5	; 0x05
 c66:	42 17       	cp	r20, r18
 c68:	53 07       	cpc	r21, r19
 c6a:	7c f4       	brge	.+30     	; 0xc8a <fputc+0x4a>
 c6c:	e8 81       	ld	r30, Y
 c6e:	f9 81       	ldd	r31, Y+1	; 0x01
 c70:	9f 01       	movw	r18, r30
 c72:	2f 5f       	subi	r18, 0xFF	; 255
 c74:	3f 4f       	sbci	r19, 0xFF	; 255
 c76:	39 83       	std	Y+1, r19	; 0x01
 c78:	28 83       	st	Y, r18
 c7a:	10 83       	st	Z, r17
 c7c:	06 c0       	rjmp	.+12     	; 0xc8a <fputc+0x4a>
 c7e:	e8 85       	ldd	r30, Y+8	; 0x08
 c80:	f9 85       	ldd	r31, Y+9	; 0x09
 c82:	81 2f       	mov	r24, r17
 c84:	09 95       	icall
 c86:	89 2b       	or	r24, r25
 c88:	29 f7       	brne	.-54     	; 0xc54 <fputc+0x14>
 c8a:	2e 81       	ldd	r18, Y+6	; 0x06
 c8c:	3f 81       	ldd	r19, Y+7	; 0x07
 c8e:	2f 5f       	subi	r18, 0xFF	; 255
 c90:	3f 4f       	sbci	r19, 0xFF	; 255
 c92:	3f 83       	std	Y+7, r19	; 0x07
 c94:	2e 83       	std	Y+6, r18	; 0x06
 c96:	81 2f       	mov	r24, r17
 c98:	90 2f       	mov	r25, r16
 c9a:	df 91       	pop	r29
 c9c:	cf 91       	pop	r28
 c9e:	1f 91       	pop	r17
 ca0:	0f 91       	pop	r16
 ca2:	08 95       	ret

00000ca4 <__ultoa_invert>:
 ca4:	fa 01       	movw	r30, r20
 ca6:	aa 27       	eor	r26, r26
 ca8:	28 30       	cpi	r18, 0x08	; 8
 caa:	51 f1       	breq	.+84     	; 0xd00 <__ultoa_invert+0x5c>
 cac:	20 31       	cpi	r18, 0x10	; 16
 cae:	81 f1       	breq	.+96     	; 0xd10 <__ultoa_invert+0x6c>
 cb0:	e8 94       	clt
 cb2:	6f 93       	push	r22
 cb4:	6e 7f       	andi	r22, 0xFE	; 254
 cb6:	6e 5f       	subi	r22, 0xFE	; 254
 cb8:	7f 4f       	sbci	r23, 0xFF	; 255
 cba:	8f 4f       	sbci	r24, 0xFF	; 255
 cbc:	9f 4f       	sbci	r25, 0xFF	; 255
 cbe:	af 4f       	sbci	r26, 0xFF	; 255
 cc0:	b1 e0       	ldi	r27, 0x01	; 1
 cc2:	3e d0       	rcall	.+124    	; 0xd40 <__ultoa_invert+0x9c>
 cc4:	b4 e0       	ldi	r27, 0x04	; 4
 cc6:	3c d0       	rcall	.+120    	; 0xd40 <__ultoa_invert+0x9c>
 cc8:	67 0f       	add	r22, r23
 cca:	78 1f       	adc	r23, r24
 ccc:	89 1f       	adc	r24, r25
 cce:	9a 1f       	adc	r25, r26
 cd0:	a1 1d       	adc	r26, r1
 cd2:	68 0f       	add	r22, r24
 cd4:	79 1f       	adc	r23, r25
 cd6:	8a 1f       	adc	r24, r26
 cd8:	91 1d       	adc	r25, r1
 cda:	a1 1d       	adc	r26, r1
 cdc:	6a 0f       	add	r22, r26
 cde:	71 1d       	adc	r23, r1
 ce0:	81 1d       	adc	r24, r1
 ce2:	91 1d       	adc	r25, r1
 ce4:	a1 1d       	adc	r26, r1
 ce6:	20 d0       	rcall	.+64     	; 0xd28 <__ultoa_invert+0x84>
 ce8:	09 f4       	brne	.+2      	; 0xcec <__ultoa_invert+0x48>
 cea:	68 94       	set
 cec:	3f 91       	pop	r19
 cee:	2a e0       	ldi	r18, 0x0A	; 10
 cf0:	26 9f       	mul	r18, r22
 cf2:	11 24       	eor	r1, r1
 cf4:	30 19       	sub	r19, r0
 cf6:	30 5d       	subi	r19, 0xD0	; 208
 cf8:	31 93       	st	Z+, r19
 cfa:	de f6       	brtc	.-74     	; 0xcb2 <__ultoa_invert+0xe>
 cfc:	cf 01       	movw	r24, r30
 cfe:	08 95       	ret
 d00:	46 2f       	mov	r20, r22
 d02:	47 70       	andi	r20, 0x07	; 7
 d04:	40 5d       	subi	r20, 0xD0	; 208
 d06:	41 93       	st	Z+, r20
 d08:	b3 e0       	ldi	r27, 0x03	; 3
 d0a:	0f d0       	rcall	.+30     	; 0xd2a <__ultoa_invert+0x86>
 d0c:	c9 f7       	brne	.-14     	; 0xd00 <__ultoa_invert+0x5c>
 d0e:	f6 cf       	rjmp	.-20     	; 0xcfc <__ultoa_invert+0x58>
 d10:	46 2f       	mov	r20, r22
 d12:	4f 70       	andi	r20, 0x0F	; 15
 d14:	40 5d       	subi	r20, 0xD0	; 208
 d16:	4a 33       	cpi	r20, 0x3A	; 58
 d18:	18 f0       	brcs	.+6      	; 0xd20 <__ultoa_invert+0x7c>
 d1a:	49 5d       	subi	r20, 0xD9	; 217
 d1c:	31 fd       	sbrc	r19, 1
 d1e:	40 52       	subi	r20, 0x20	; 32
 d20:	41 93       	st	Z+, r20
 d22:	02 d0       	rcall	.+4      	; 0xd28 <__ultoa_invert+0x84>
 d24:	a9 f7       	brne	.-22     	; 0xd10 <__ultoa_invert+0x6c>
 d26:	ea cf       	rjmp	.-44     	; 0xcfc <__ultoa_invert+0x58>
 d28:	b4 e0       	ldi	r27, 0x04	; 4
 d2a:	a6 95       	lsr	r26
 d2c:	97 95       	ror	r25
 d2e:	87 95       	ror	r24
 d30:	77 95       	ror	r23
 d32:	67 95       	ror	r22
 d34:	ba 95       	dec	r27
 d36:	c9 f7       	brne	.-14     	; 0xd2a <__ultoa_invert+0x86>
 d38:	00 97       	sbiw	r24, 0x00	; 0
 d3a:	61 05       	cpc	r22, r1
 d3c:	71 05       	cpc	r23, r1
 d3e:	08 95       	ret
 d40:	9b 01       	movw	r18, r22
 d42:	ac 01       	movw	r20, r24
 d44:	0a 2e       	mov	r0, r26
 d46:	06 94       	lsr	r0
 d48:	57 95       	ror	r21
 d4a:	47 95       	ror	r20
 d4c:	37 95       	ror	r19
 d4e:	27 95       	ror	r18
 d50:	ba 95       	dec	r27
 d52:	c9 f7       	brne	.-14     	; 0xd46 <__ultoa_invert+0xa2>
 d54:	62 0f       	add	r22, r18
 d56:	73 1f       	adc	r23, r19
 d58:	84 1f       	adc	r24, r20
 d5a:	95 1f       	adc	r25, r21
 d5c:	a0 1d       	adc	r26, r0
 d5e:	08 95       	ret

00000d60 <__prologue_saves__>:
 d60:	2f 92       	push	r2
 d62:	3f 92       	push	r3
 d64:	4f 92       	push	r4
 d66:	5f 92       	push	r5
 d68:	6f 92       	push	r6
 d6a:	7f 92       	push	r7
 d6c:	8f 92       	push	r8
 d6e:	9f 92       	push	r9
 d70:	af 92       	push	r10
 d72:	bf 92       	push	r11
 d74:	cf 92       	push	r12
 d76:	df 92       	push	r13
 d78:	ef 92       	push	r14
 d7a:	ff 92       	push	r15
 d7c:	0f 93       	push	r16
 d7e:	1f 93       	push	r17
 d80:	cf 93       	push	r28
 d82:	df 93       	push	r29
 d84:	cd b7       	in	r28, 0x3d	; 61
 d86:	de b7       	in	r29, 0x3e	; 62
 d88:	ca 1b       	sub	r28, r26
 d8a:	db 0b       	sbc	r29, r27
 d8c:	0f b6       	in	r0, 0x3f	; 63
 d8e:	f8 94       	cli
 d90:	de bf       	out	0x3e, r29	; 62
 d92:	0f be       	out	0x3f, r0	; 63
 d94:	cd bf       	out	0x3d, r28	; 61
 d96:	09 94       	ijmp

00000d98 <__epilogue_restores__>:
 d98:	2a 88       	ldd	r2, Y+18	; 0x12
 d9a:	39 88       	ldd	r3, Y+17	; 0x11
 d9c:	48 88       	ldd	r4, Y+16	; 0x10
 d9e:	5f 84       	ldd	r5, Y+15	; 0x0f
 da0:	6e 84       	ldd	r6, Y+14	; 0x0e
 da2:	7d 84       	ldd	r7, Y+13	; 0x0d
 da4:	8c 84       	ldd	r8, Y+12	; 0x0c
 da6:	9b 84       	ldd	r9, Y+11	; 0x0b
 da8:	aa 84       	ldd	r10, Y+10	; 0x0a
 daa:	b9 84       	ldd	r11, Y+9	; 0x09
 dac:	c8 84       	ldd	r12, Y+8	; 0x08
 dae:	df 80       	ldd	r13, Y+7	; 0x07
 db0:	ee 80       	ldd	r14, Y+6	; 0x06
 db2:	fd 80       	ldd	r15, Y+5	; 0x05
 db4:	0c 81       	ldd	r16, Y+4	; 0x04
 db6:	1b 81       	ldd	r17, Y+3	; 0x03
 db8:	aa 81       	ldd	r26, Y+2	; 0x02
 dba:	b9 81       	ldd	r27, Y+1	; 0x01
 dbc:	ce 0f       	add	r28, r30
 dbe:	d1 1d       	adc	r29, r1
 dc0:	0f b6       	in	r0, 0x3f	; 63
 dc2:	f8 94       	cli
 dc4:	de bf       	out	0x3e, r29	; 62
 dc6:	0f be       	out	0x3f, r0	; 63
 dc8:	cd bf       	out	0x3d, r28	; 61
 dca:	ed 01       	movw	r28, r26
 dcc:	08 95       	ret

00000dce <__do_global_dtors>:
 dce:	10 e0       	ldi	r17, 0x00	; 0
 dd0:	c6 e5       	ldi	r28, 0x56	; 86
 dd2:	d0 e0       	ldi	r29, 0x00	; 0
 dd4:	04 c0       	rjmp	.+8      	; 0xdde <__do_global_dtors+0x10>
 dd6:	fe 01       	movw	r30, r28
 dd8:	0e 94 04 04 	call	0x808	; 0x808 <__tablejump__>
 ddc:	22 96       	adiw	r28, 0x02	; 2
 dde:	c8 35       	cpi	r28, 0x58	; 88
 de0:	d1 07       	cpc	r29, r17
 de2:	c9 f7       	brne	.-14     	; 0xdd6 <__do_global_dtors+0x8>
 de4:	f8 94       	cli

00000de6 <__stop_program>:
 de6:	ff cf       	rjmp	.-2      	; 0xde6 <__stop_program>
