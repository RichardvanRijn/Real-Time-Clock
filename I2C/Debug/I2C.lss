
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021e0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000021e0  00002294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  008000a4  008000a4  000022d8  2**0
                  ALLOC
  3 .eeprom       00000007  00810000  00810000  000022d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000022df  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  0000233b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001374  00000000  00000000  0000250b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061f  00000000  00000000  0000387f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000903  00000000  00000000  00003e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d8  00000000  00000000  000047a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071f  00000000  00000000  00004e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e3a  00000000  00000000  0000559b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  000063d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
       4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      2c:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__vector_11>
      30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	4b 08       	sbc	r4, r11

00000056 <__ctors_end>:
      56:	58 08       	sbc	r5, r8

00000058 <__dtors_end>:
      58:	11 24       	eor	r1, r1
      5a:	1f be       	out	0x3f, r1	; 63
      5c:	cf e5       	ldi	r28, 0x5F	; 95
      5e:	d8 e0       	ldi	r29, 0x08	; 8
      60:	de bf       	out	0x3e, r29	; 62
      62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
      64:	10 e0       	ldi	r17, 0x00	; 0
      66:	a0 e6       	ldi	r26, 0x60	; 96
      68:	b0 e0       	ldi	r27, 0x00	; 0
      6a:	e0 ee       	ldi	r30, 0xE0	; 224
      6c:	f1 e2       	ldi	r31, 0x21	; 33
      6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
      70:	05 90       	lpm	r0, Z+
      72:	0d 92       	st	X+, r0
      74:	a4 3a       	cpi	r26, 0xA4	; 164
      76:	b1 07       	cpc	r27, r17
      78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
      7a:	20 e0       	ldi	r18, 0x00	; 0
      7c:	a4 ea       	ldi	r26, 0xA4	; 164
      7e:	b0 e0       	ldi	r27, 0x00	; 0
      80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
      82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
      84:	ae 3c       	cpi	r26, 0xCE	; 206
      86:	b2 07       	cpc	r27, r18
      88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
      8a:	10 e0       	ldi	r17, 0x00	; 0
      8c:	c6 e5       	ldi	r28, 0x56	; 86
      8e:	d0 e0       	ldi	r29, 0x00	; 0
      90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
      92:	22 97       	sbiw	r28, 0x02	; 2
      94:	fe 01       	movw	r30, r28
      96:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__tablejump__>
      9a:	c4 35       	cpi	r28, 0x54	; 84
      9c:	d1 07       	cpc	r29, r17
      9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
      a0:	0e 94 25 07 	call	0xe4a	; 0xe4a <main>
      a4:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__do_global_dtors>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_Z8bcdToDech>:
							 { 23,23,0,59,59,0,59,59 },
							 { 31,31,0,12,12,0,99,99 }
							 };
							 
unsigned char bcdToDec(unsigned char val)
{
      ac:	cf 93       	push	r28
      ae:	df 93       	push	r29
      b0:	1f 92       	push	r1
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	89 83       	std	Y+1, r24	; 0x01
	return ((val/16*10) + (val%16) );
      b8:	89 81       	ldd	r24, Y+1	; 0x01
      ba:	82 95       	swap	r24
      bc:	8f 70       	andi	r24, 0x0F	; 15
      be:	88 0f       	add	r24, r24
      c0:	98 2f       	mov	r25, r24
      c2:	99 0f       	add	r25, r25
      c4:	99 0f       	add	r25, r25
      c6:	98 0f       	add	r25, r24
      c8:	89 81       	ldd	r24, Y+1	; 0x01
      ca:	8f 70       	andi	r24, 0x0F	; 15
      cc:	89 0f       	add	r24, r25
}
      ce:	0f 90       	pop	r0
      d0:	df 91       	pop	r29
      d2:	cf 91       	pop	r28
      d4:	08 95       	ret

000000d6 <_Z8decToBcdh>:

unsigned char decToBcd(unsigned char val)
{
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	1f 92       	push	r1
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	89 83       	std	Y+1, r24	; 0x01
	return ((val/10*16) + (val%10) );
      e2:	99 81       	ldd	r25, Y+1	; 0x01
      e4:	8d ec       	ldi	r24, 0xCD	; 205
      e6:	98 9f       	mul	r25, r24
      e8:	81 2d       	mov	r24, r1
      ea:	11 24       	eor	r1, r1
      ec:	86 95       	lsr	r24
      ee:	86 95       	lsr	r24
      f0:	86 95       	lsr	r24
      f2:	28 2f       	mov	r18, r24
      f4:	22 95       	swap	r18
      f6:	20 7f       	andi	r18, 0xF0	; 240
      f8:	99 81       	ldd	r25, Y+1	; 0x01
      fa:	8d ec       	ldi	r24, 0xCD	; 205
      fc:	98 9f       	mul	r25, r24
      fe:	81 2d       	mov	r24, r1
     100:	11 24       	eor	r1, r1
     102:	86 95       	lsr	r24
     104:	86 95       	lsr	r24
     106:	86 95       	lsr	r24
     108:	88 0f       	add	r24, r24
     10a:	38 2f       	mov	r19, r24
     10c:	33 0f       	add	r19, r19
     10e:	33 0f       	add	r19, r19
     110:	83 0f       	add	r24, r19
     112:	39 2f       	mov	r19, r25
     114:	38 1b       	sub	r19, r24
     116:	83 2f       	mov	r24, r19
     118:	82 0f       	add	r24, r18
}
     11a:	0f 90       	pop	r0
     11c:	df 91       	pop	r29
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <_Z7init_T0v>:

void init_T0(void)
{
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS02) && (1<<CS00);
     12a:	83 e5       	ldi	r24, 0x53	; 83
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	21 e0       	ldi	r18, 0x01	; 1
     130:	fc 01       	movw	r30, r24
     132:	20 83       	st	Z, r18
	TCNT0 = 0;
     134:	82 e5       	ldi	r24, 0x52	; 82
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	fc 01       	movw	r30, r24
     13a:	10 82       	st	Z, r1
	TIMSK = (1<<TOIE0);
     13c:	89 e5       	ldi	r24, 0x59	; 89
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	21 e0       	ldi	r18, 0x01	; 1
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
}
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <_Z8init_lcdv>:

void init_lcd(void)
{
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
	lcd_init();
     154:	0e 94 df 0b 	call	0x17be	; 0x17be <_Z8lcd_initv>
	lcd_cursor(false, false);								//  cursor off
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	0e 94 46 0c 	call	0x188c	; 0x188c <_Z10lcd_cursorbb>
	lcd_home();
     160:	0e 94 3c 0c 	call	0x1878	; 0x1878 <_Z8lcd_homev>
}
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <_Z4initv>:

void init(void)
{
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	00 d0       	rcall	.+0      	; 0x174 <_Z4initv+0xa>
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0x00;
     178:	81 e3       	ldi	r24, 0x31	; 49
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	fc 01       	movw	r30, r24
     17e:	10 82       	st	Z, r1
	DDRB = 0xFF;
     180:	87 e3       	ldi	r24, 0x37	; 55
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	2f ef       	ldi	r18, 0xFF	; 255
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
	eeprom_read_block(&alarmTime, &alarmTimeEEMEM, 7);
     18a:	47 e0       	ldi	r20, 0x07	; 7
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	84 ec       	ldi	r24, 0xC4	; 196
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__eerd_block_m32>
	init_lcd();
     19a:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z8init_lcdv>
	TWI.init();												// Function to initialize TWI
     19e:	8c ec       	ldi	r24, 0xCC	; 204
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZN3I2C4initEv>
	unsigned char ret = TWI.start(I2C_WRITE);				// set device address and write mode
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	8c ec       	ldi	r24, 0xCC	; 204
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN3I2C5startEh>
     1b0:	89 83       	std	Y+1, r24	; 0x01
	while(ret)
     1b2:	19 c0       	rjmp	.+50     	; 0x1e6 <_Z4initv+0x7c>
	{
		TWI.stop();
     1b4:	8c ec       	ldi	r24, 0xCC	; 204
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN3I2C4stopEv>
		ret = TWI.start(I2C_WRITE);
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	8c ec       	ldi	r24, 0xCC	; 204
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN3I2C5startEh>
     1c6:	89 83       	std	Y+1, r24	; 0x01
		snprintf(buffer, sizeof buffer, "Failed");
     1c8:	87 e0       	ldi	r24, 0x07	; 7
     1ca:	e0 e9       	ldi	r30, 0x90	; 144
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	a4 ea       	ldi	r26, 0xA4	; 164
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	01 90       	ld	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	8a 95       	dec	r24
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <_Z4initv+0x68>
		lcd_puts(buffer);
     1da:	84 ea       	ldi	r24, 0xA4	; 164
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 ad 0c 	call	0x195a	; 0x195a <_Z8lcd_putsPc>
		lcd_home();
     1e2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <_Z8lcd_homev>
	DDRB = 0xFF;
	eeprom_read_block(&alarmTime, &alarmTimeEEMEM, 7);
	init_lcd();
	TWI.init();												// Function to initialize TWI
	unsigned char ret = TWI.start(I2C_WRITE);				// set device address and write mode
	while(ret)
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	88 23       	and	r24, r24
     1ea:	21 f7       	brne	.-56     	; 0x1b4 <_Z4initv+0x4a>
		ret = TWI.start(I2C_WRITE);
		snprintf(buffer, sizeof buffer, "Failed");
		lcd_puts(buffer);
		lcd_home();
	}
	TWI.start_wait(I2C_WRITE);						// set device address and write mode
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	8c ec       	ldi	r24, 0xCC	; 204
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN3I2C10start_waitEh>
	TWI.readXBytes(data,7,0x00);
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	47 e0       	ldi	r20, 0x07	; 7
     1fa:	6c eb       	ldi	r22, 0xBC	; 188
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	8c ec       	ldi	r24, 0xCC	; 204
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN3I2C10readXBytesEPhhh>
	TWI.stop();
     206:	8c ec       	ldi	r24, 0xCC	; 204
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN3I2C4stopEv>
	for (uint8_t i = 0; i <= 6 ; i++)
     20e:	1a 82       	std	Y+2, r1	; 0x02
     210:	15 c0       	rjmp	.+42     	; 0x23c <_Z4initv+0xd2>
	{
		realTime[i] = bcdToDec(data[i]);
     212:	8a 81       	ldd	r24, Y+2	; 0x02
     214:	08 2f       	mov	r16, r24
     216:	10 e0       	ldi	r17, 0x00	; 0
     218:	8a 81       	ldd	r24, Y+2	; 0x02
     21a:	88 2f       	mov	r24, r24
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	84 54       	subi	r24, 0x44	; 68
     220:	9f 4f       	sbci	r25, 0xFF	; 255
     222:	fc 01       	movw	r30, r24
     224:	80 81       	ld	r24, Z
     226:	0e 94 56 00 	call	0xac	; 0xac <_Z8bcdToDech>
     22a:	28 2f       	mov	r18, r24
     22c:	c8 01       	movw	r24, r16
     22e:	8b 54       	subi	r24, 0x4B	; 75
     230:	9f 4f       	sbci	r25, 0xFF	; 255
     232:	fc 01       	movw	r30, r24
     234:	20 83       	st	Z, r18
		lcd_home();
	}
	TWI.start_wait(I2C_WRITE);						// set device address and write mode
	TWI.readXBytes(data,7,0x00);
	TWI.stop();
	for (uint8_t i = 0; i <= 6 ; i++)
     236:	8a 81       	ldd	r24, Y+2	; 0x02
     238:	8f 5f       	subi	r24, 0xFF	; 255
     23a:	8a 83       	std	Y+2, r24	; 0x02
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	87 30       	cpi	r24, 0x07	; 7
     240:	40 f3       	brcs	.-48     	; 0x212 <_Z4initv+0xa8>
	{
		realTime[i] = bcdToDec(data[i]);
	}
	init_T0();
     242:	0e 94 91 00 	call	0x122	; 0x122 <_Z7init_T0v>
}
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	08 95       	ret

00000254 <_Z11t1_Stop_TOIv>:

void t1_Stop_TOI(void)
{
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= ~(1<<TOIE0);
     25c:	89 e5       	ldi	r24, 0x59	; 89
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	29 e5       	ldi	r18, 0x59	; 89
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	f9 01       	movw	r30, r18
     266:	20 81       	ld	r18, Z
     268:	2e 7f       	andi	r18, 0xFE	; 254
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <_Z12t1_Start_TOIv>:

void t1_Start_TOI(void)
{
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	cd b7       	in	r28, 0x3d	; 61
     27a:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);
     27c:	89 e5       	ldi	r24, 0x59	; 89
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	29 e5       	ldi	r18, 0x59	; 89
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	f9 01       	movw	r30, r18
     286:	20 81       	ld	r18, Z
     288:	21 60       	ori	r18, 0x01	; 1
     28a:	fc 01       	movw	r30, r24
     28c:	20 83       	st	Z, r18
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <_Z11Alarm_startv>:

void Alarm_start(void)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x01;
     29c:	88 e3       	ldi	r24, 0x38	; 56
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	21 e0       	ldi	r18, 0x01	; 1
     2a2:	fc 01       	movw	r30, r24
     2a4:	20 83       	st	Z, r18
}
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <_Z10Alarm_stopv>:

void Alarm_stop(void)
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x00;
     2b4:	88 e3       	ldi	r24, 0x38	; 56
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	10 82       	st	Z, r1
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <_Z11writeScreenPhb>:
//
//unsigned char timeIn[7] = {	decToBcd(30), decToBcd(41), decToBcd(17), decToBcd(5),	 decToBcd(6), decToBcd(2), decToBcd(15)};
//								Seconds,	  Minutes,	   Hours,	    Day of the week, Date,		  month,	   Year.

void writeScreen(unsigned char time[], bool alarm)
{
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <_Z11writeScreenPhb+0x6>
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <_Z11writeScreenPhb+0x8>
     2ca:	1f 92       	push	r1
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	9c 83       	std	Y+4, r25	; 0x04
     2d2:	8b 83       	std	Y+3, r24	; 0x03
     2d4:	6d 83       	std	Y+5, r22	; 0x05
	lcd_home();
     2d6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <_Z8lcd_homev>
	for(int8_t i = 2;i>=0;i--)
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	89 83       	std	Y+1, r24	; 0x01
     2de:	46 c0       	rjmp	.+140    	; 0x36c <_Z11writeScreenPhb+0xaa>
	{
		if (time[i] < 10)
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	99 27       	eor	r25, r25
     2e4:	87 fd       	sbrc	r24, 7
     2e6:	90 95       	com	r25
     2e8:	2b 81       	ldd	r18, Y+3	; 0x03
     2ea:	3c 81       	ldd	r19, Y+4	; 0x04
     2ec:	82 0f       	add	r24, r18
     2ee:	93 1f       	adc	r25, r19
     2f0:	fc 01       	movw	r30, r24
     2f2:	80 81       	ld	r24, Z
     2f4:	8a 30       	cpi	r24, 0x0A	; 10
     2f6:	18 f4       	brcc	.+6      	; 0x2fe <_Z11writeScreenPhb+0x3c>
		{
			lcd_putc('0');	
     2f8:	80 e3       	ldi	r24, 0x30	; 48
     2fa:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_Z8lcd_putcc>
		}
		snprintf(buffer,sizeof buffer,"%d",time[i]);
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
     300:	99 27       	eor	r25, r25
     302:	87 fd       	sbrc	r24, 7
     304:	90 95       	com	r25
     306:	2b 81       	ldd	r18, Y+3	; 0x03
     308:	3c 81       	ldd	r19, Y+4	; 0x04
     30a:	82 0f       	add	r24, r18
     30c:	93 1f       	adc	r25, r19
     30e:	fc 01       	movw	r30, r24
     310:	80 81       	ld	r24, Z
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	29 2f       	mov	r18, r25
     318:	2f 93       	push	r18
     31a:	8f 93       	push	r24
     31c:	87 e9       	ldi	r24, 0x97	; 151
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	89 2f       	mov	r24, r25
     322:	8f 93       	push	r24
     324:	87 e9       	ldi	r24, 0x97	; 151
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	8f 93       	push	r24
     32a:	1f 92       	push	r1
     32c:	81 e1       	ldi	r24, 0x11	; 17
     32e:	8f 93       	push	r24
     330:	84 ea       	ldi	r24, 0xA4	; 164
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	89 2f       	mov	r24, r25
     336:	8f 93       	push	r24
     338:	84 ea       	ldi	r24, 0xA4	; 164
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	8f 93       	push	r24
     33e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <snprintf>
     342:	8d b7       	in	r24, 0x3d	; 61
     344:	9e b7       	in	r25, 0x3e	; 62
     346:	08 96       	adiw	r24, 0x08	; 8
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	cd bf       	out	0x3d, r28	; 61
		lcd_puts(buffer);
     352:	84 ea       	ldi	r24, 0xA4	; 164
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 ad 0c 	call	0x195a	; 0x195a <_Z8lcd_putsPc>
		if(i>0)
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	18 16       	cp	r1, r24
     35e:	1c f4       	brge	.+6      	; 0x366 <_Z11writeScreenPhb+0xa4>
		{
			lcd_putc(':');	
     360:	8a e3       	ldi	r24, 0x3A	; 58
     362:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_Z8lcd_putcc>
//								Seconds,	  Minutes,	   Hours,	    Day of the week, Date,		  month,	   Year.

void writeScreen(unsigned char time[], bool alarm)
{
	lcd_home();
	for(int8_t i = 2;i>=0;i--)
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	81 50       	subi	r24, 0x01	; 1
     36a:	89 83       	std	Y+1, r24	; 0x01
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	88 23       	and	r24, r24
     370:	0c f0       	brlt	.+2      	; 0x374 <_Z11writeScreenPhb+0xb2>
     372:	b6 cf       	rjmp	.-148    	; 0x2e0 <_Z11writeScreenPhb+0x1e>
		if(i>0)
		{
			lcd_putc(':');	
		}
	}
	lcd_goto(1,0);
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <_Z8lcd_gotohh>
	if (alarm == false)
     37c:	9d 81       	ldd	r25, Y+5	; 0x05
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	89 27       	eor	r24, r25
     382:	88 23       	and	r24, r24
     384:	09 f4       	brne	.+2      	; 0x388 <_Z11writeScreenPhb+0xc6>
     386:	4e c0       	rjmp	.+156    	; 0x424 <_Z11writeScreenPhb+0x162>
	{
		for(int8_t i = 4;i<=6;i++)
     388:	84 e0       	ldi	r24, 0x04	; 4
     38a:	8a 83       	std	Y+2, r24	; 0x02
     38c:	46 c0       	rjmp	.+140    	; 0x41a <_Z11writeScreenPhb+0x158>
		{
			if (time[i] < 10)
     38e:	8a 81       	ldd	r24, Y+2	; 0x02
     390:	99 27       	eor	r25, r25
     392:	87 fd       	sbrc	r24, 7
     394:	90 95       	com	r25
     396:	2b 81       	ldd	r18, Y+3	; 0x03
     398:	3c 81       	ldd	r19, Y+4	; 0x04
     39a:	82 0f       	add	r24, r18
     39c:	93 1f       	adc	r25, r19
     39e:	fc 01       	movw	r30, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	8a 30       	cpi	r24, 0x0A	; 10
     3a4:	18 f4       	brcc	.+6      	; 0x3ac <_Z11writeScreenPhb+0xea>
			{
				lcd_putc('0');
     3a6:	80 e3       	ldi	r24, 0x30	; 48
     3a8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_Z8lcd_putcc>
			}
			snprintf(buffer,sizeof buffer,"%d",time[i]);
     3ac:	8a 81       	ldd	r24, Y+2	; 0x02
     3ae:	99 27       	eor	r25, r25
     3b0:	87 fd       	sbrc	r24, 7
     3b2:	90 95       	com	r25
     3b4:	2b 81       	ldd	r18, Y+3	; 0x03
     3b6:	3c 81       	ldd	r19, Y+4	; 0x04
     3b8:	82 0f       	add	r24, r18
     3ba:	93 1f       	adc	r25, r19
     3bc:	fc 01       	movw	r30, r24
     3be:	80 81       	ld	r24, Z
     3c0:	88 2f       	mov	r24, r24
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	29 2f       	mov	r18, r25
     3c6:	2f 93       	push	r18
     3c8:	8f 93       	push	r24
     3ca:	87 e9       	ldi	r24, 0x97	; 151
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	89 2f       	mov	r24, r25
     3d0:	8f 93       	push	r24
     3d2:	87 e9       	ldi	r24, 0x97	; 151
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	8f 93       	push	r24
     3d8:	1f 92       	push	r1
     3da:	81 e1       	ldi	r24, 0x11	; 17
     3dc:	8f 93       	push	r24
     3de:	84 ea       	ldi	r24, 0xA4	; 164
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	89 2f       	mov	r24, r25
     3e4:	8f 93       	push	r24
     3e6:	84 ea       	ldi	r24, 0xA4	; 164
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	8f 93       	push	r24
     3ec:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <snprintf>
     3f0:	8d b7       	in	r24, 0x3d	; 61
     3f2:	9e b7       	in	r25, 0x3e	; 62
     3f4:	08 96       	adiw	r24, 0x08	; 8
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
			lcd_puts(buffer);
     400:	84 ea       	ldi	r24, 0xA4	; 164
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 ad 0c 	call	0x195a	; 0x195a <_Z8lcd_putsPc>
			if(i<6)
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	86 30       	cpi	r24, 0x06	; 6
     40c:	1c f4       	brge	.+6      	; 0x414 <_Z11writeScreenPhb+0x152>
			{
				lcd_putc(':');
     40e:	8a e3       	ldi	r24, 0x3A	; 58
     410:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_Z8lcd_putcc>
		}
	}
	lcd_goto(1,0);
	if (alarm == false)
	{
		for(int8_t i = 4;i<=6;i++)
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	8f 5f       	subi	r24, 0xFF	; 255
     418:	8a 83       	std	Y+2, r24	; 0x02
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	87 30       	cpi	r24, 0x07	; 7
     41e:	0c f4       	brge	.+2      	; 0x422 <_Z11writeScreenPhb+0x160>
     420:	b6 cf       	rjmp	.-148    	; 0x38e <_Z11writeScreenPhb+0xcc>
     422:	0d c0       	rjmp	.+26     	; 0x43e <_Z11writeScreenPhb+0x17c>
			}
		}
	}
	else
	{
		snprintf(buffer,sizeof buffer,"        ");
     424:	89 e0       	ldi	r24, 0x09	; 9
     426:	ea e9       	ldi	r30, 0x9A	; 154
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	a4 ea       	ldi	r26, 0xA4	; 164
     42c:	b0 e0       	ldi	r27, 0x00	; 0
     42e:	01 90       	ld	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	8a 95       	dec	r24
     434:	e1 f7       	brne	.-8      	; 0x42e <_Z11writeScreenPhb+0x16c>
		lcd_puts(buffer);
     436:	84 ea       	ldi	r24, 0xA4	; 164
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 ad 0c 	call	0x195a	; 0x195a <_Z8lcd_putsPc>
	}
	lcd_goto(0,15);
     43e:	6f e0       	ldi	r22, 0x0F	; 15
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <_Z8lcd_gotohh>
	if (alarmSet == true){
     446:	80 91 cb 00 	lds	r24, 0x00CB
     44a:	88 23       	and	r24, r24
     44c:	21 f0       	breq	.+8      	; 0x456 <_Z11writeScreenPhb+0x194>
		lcd_putc('A');
     44e:	81 e4       	ldi	r24, 0x41	; 65
     450:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_Z8lcd_putcc>
     454:	03 c0       	rjmp	.+6      	; 0x45c <_Z11writeScreenPhb+0x19a>
	}
	else
	{
		lcd_putc(' ');
     456:	80 e2       	ldi	r24, 0x20	; 32
     458:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_Z8lcd_putcc>
	}	
}
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <_Z10changeTimebPh>:

void changeTime(bool alarm,unsigned char time[])
{
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	ee 97       	sbiw	r28, 0x3e	; 62
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	8c af       	std	Y+60, r24	; 0x3c
     48a:	7e af       	std	Y+62, r23	; 0x3e
     48c:	6d af       	std	Y+61, r22	; 0x3d
	uint8_t x = 0, y = 0;
     48e:	19 82       	std	Y+1, r1	; 0x01
     490:	1a 82       	std	Y+2, r1	; 0x02
	writeScreen(time, alarm);
     492:	8d ad       	ldd	r24, Y+61	; 0x3d
     494:	9e ad       	ldd	r25, Y+62	; 0x3e
     496:	6c ad       	ldd	r22, Y+60	; 0x3c
     498:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11writeScreenPhb>
	t1_Stop_TOI();
     49c:	0e 94 2a 01 	call	0x254	; 0x254 <_Z11t1_Stop_TOIv>
	lcd_cursor(true,true);
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0e 94 46 0c 	call	0x188c	; 0x188c <_Z10lcd_cursorbb>
	lcd_home();
     4a8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <_Z8lcd_homev>
	while ((PIND & (1<<PD0)) == (1<<PD0)) {}
     4ac:	00 00       	nop
     4ae:	80 e3       	ldi	r24, 0x30	; 48
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	88 2f       	mov	r24, r24
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	81 70       	andi	r24, 0x01	; 1
     4bc:	99 27       	eor	r25, r25
     4be:	21 e0       	ldi	r18, 0x01	; 1
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <_Z10changeTimebPh+0x5a>
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	22 23       	and	r18, r18
     4c8:	91 f7       	brne	.-28     	; 0x4ae <_Z10changeTimebPh+0x42>
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	a8 ec       	ldi	r26, 0xC8	; 200
     4d0:	b1 e4       	ldi	r27, 0x41	; 65
     4d2:	8c 83       	std	Y+4, r24	; 0x04
     4d4:	9d 83       	std	Y+5, r25	; 0x05
     4d6:	ae 83       	std	Y+6, r26	; 0x06
     4d8:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	4a e7       	ldi	r20, 0x7A	; 122
     4e0:	54 e4       	ldi	r21, 0x44	; 68
     4e2:	6c 81       	ldd	r22, Y+4	; 0x04
     4e4:	7d 81       	ldd	r23, Y+5	; 0x05
     4e6:	8e 81       	ldd	r24, Y+6	; 0x06
     4e8:	9f 81       	ldd	r25, Y+7	; 0x07
     4ea:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__mulsf3>
     4ee:	dc 01       	movw	r26, r24
     4f0:	cb 01       	movw	r24, r22
     4f2:	88 87       	std	Y+8, r24	; 0x08
     4f4:	99 87       	std	Y+9, r25	; 0x09
     4f6:	aa 87       	std	Y+10, r26	; 0x0a
     4f8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e8       	ldi	r20, 0x80	; 128
     500:	5f e3       	ldi	r21, 0x3F	; 63
     502:	68 85       	ldd	r22, Y+8	; 0x08
     504:	79 85       	ldd	r23, Y+9	; 0x09
     506:	8a 85       	ldd	r24, Y+10	; 0x0a
     508:	9b 85       	ldd	r25, Y+11	; 0x0b
     50a:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__cmpsf2>
     50e:	88 23       	and	r24, r24
     510:	2c f4       	brge	.+10     	; 0x51c <_Z10changeTimebPh+0xb0>
		__ticks = 1;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	9d 87       	std	Y+13, r25	; 0x0d
     518:	8c 87       	std	Y+12, r24	; 0x0c
     51a:	3f c0       	rjmp	.+126    	; 0x59a <_Z10changeTimebPh+0x12e>
	else if (__tmp > 65535)
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	3f ef       	ldi	r19, 0xFF	; 255
     520:	4f e7       	ldi	r20, 0x7F	; 127
     522:	57 e4       	ldi	r21, 0x47	; 71
     524:	68 85       	ldd	r22, Y+8	; 0x08
     526:	79 85       	ldd	r23, Y+9	; 0x09
     528:	8a 85       	ldd	r24, Y+10	; 0x0a
     52a:	9b 85       	ldd	r25, Y+11	; 0x0b
     52c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__gesf2>
     530:	18 16       	cp	r1, r24
     532:	4c f5       	brge	.+82     	; 0x586 <_Z10changeTimebPh+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e2       	ldi	r20, 0x20	; 32
     53a:	51 e4       	ldi	r21, 0x41	; 65
     53c:	6c 81       	ldd	r22, Y+4	; 0x04
     53e:	7d 81       	ldd	r23, Y+5	; 0x05
     540:	8e 81       	ldd	r24, Y+6	; 0x06
     542:	9f 81       	ldd	r25, Y+7	; 0x07
     544:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__mulsf3>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	bc 01       	movw	r22, r24
     54e:	cd 01       	movw	r24, r26
     550:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fixunssfsi>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	9d 87       	std	Y+13, r25	; 0x0d
     55a:	8c 87       	std	Y+12, r24	; 0x0c
     55c:	0f c0       	rjmp	.+30     	; 0x57c <_Z10changeTimebPh+0x110>
     55e:	84 e6       	ldi	r24, 0x64	; 100
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9f 87       	std	Y+15, r25	; 0x0f
     564:	8e 87       	std	Y+14, r24	; 0x0e
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     566:	8e 85       	ldd	r24, Y+14	; 0x0e
     568:	9f 85       	ldd	r25, Y+15	; 0x0f
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <_Z10changeTimebPh+0xfe>
     56e:	9f 87       	std	Y+15, r25	; 0x0f
     570:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     572:	8c 85       	ldd	r24, Y+12	; 0x0c
     574:	9d 85       	ldd	r25, Y+13	; 0x0d
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	9d 87       	std	Y+13, r25	; 0x0d
     57a:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57c:	8c 85       	ldd	r24, Y+12	; 0x0c
     57e:	9d 85       	ldd	r25, Y+13	; 0x0d
     580:	00 97       	sbiw	r24, 0x00	; 0
     582:	69 f7       	brne	.-38     	; 0x55e <_Z10changeTimebPh+0xf2>
	_delay_ms(25);
	while ((PIND & (1<<PD0)) != (1<<PD0))						//button 1
     584:	8c c3       	rjmp	.+1816   	; 0xc9e <__stack+0x43f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     586:	68 85       	ldd	r22, Y+8	; 0x08
     588:	79 85       	ldd	r23, Y+9	; 0x09
     58a:	8a 85       	ldd	r24, Y+10	; 0x0a
     58c:	9b 85       	ldd	r25, Y+11	; 0x0b
     58e:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fixunssfsi>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	9d 87       	std	Y+13, r25	; 0x0d
     598:	8c 87       	std	Y+12, r24	; 0x0c
     59a:	8c 85       	ldd	r24, Y+12	; 0x0c
     59c:	9d 85       	ldd	r25, Y+13	; 0x0d
     59e:	99 8b       	std	Y+17, r25	; 0x11
     5a0:	88 8b       	std	Y+16, r24	; 0x10
     5a2:	88 89       	ldd	r24, Y+16	; 0x10
     5a4:	99 89       	ldd	r25, Y+17	; 0x11
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <_Z10changeTimebPh+0x13a>
     5aa:	99 8b       	std	Y+17, r25	; 0x11
     5ac:	88 8b       	std	Y+16, r24	; 0x10
     5ae:	77 c3       	rjmp	.+1774   	; 0xc9e <__stack+0x43f>
	{
		if ((PIND & (1<<PD1)) == (1<<PD1))						//button 2
     5b0:	80 e3       	ldi	r24, 0x30	; 48
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	88 2f       	mov	r24, r24
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	82 70       	andi	r24, 0x02	; 2
     5be:	99 27       	eor	r25, r25
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	00 97       	sbiw	r24, 0x00	; 0
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <_Z10changeTimebPh+0x15c>
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	22 23       	and	r18, r18
     5ca:	09 f4       	brne	.+2      	; 0x5ce <_Z10changeTimebPh+0x162>
     5cc:	9d c0       	rjmp	.+314    	; 0x708 <_Z10changeTimebPh+0x29c>
		{
			if (x == 7)
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	87 30       	cpi	r24, 0x07	; 7
     5d2:	41 f4       	brne	.+16     	; 0x5e4 <_Z10changeTimebPh+0x178>
			{
				x = 0;
     5d4:	19 82       	std	Y+1, r1	; 0x01
				y = 1 - y;
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	8a 81       	ldd	r24, Y+2	; 0x02
     5da:	f9 2f       	mov	r31, r25
     5dc:	f8 1b       	sub	r31, r24
     5de:	8f 2f       	mov	r24, r31
     5e0:	8a 83       	std	Y+2, r24	; 0x02
     5e2:	0c c0       	rjmp	.+24     	; 0x5fc <_Z10changeTimebPh+0x190>
			}
			else
			{
				if (x == 1 || x == 4)
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	19 f0       	breq	.+6      	; 0x5f0 <_Z10changeTimebPh+0x184>
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	84 30       	cpi	r24, 0x04	; 4
     5ee:	19 f4       	brne	.+6      	; 0x5f6 <_Z10changeTimebPh+0x18a>
				{
					x++;	
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	8f 5f       	subi	r24, 0xFF	; 255
     5f4:	89 83       	std	Y+1, r24	; 0x01
				}
				x++;
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	8f 5f       	subi	r24, 0xFF	; 255
     5fa:	89 83       	std	Y+1, r24	; 0x01
			}
			lcd_goto(y,x);
     5fc:	69 81       	ldd	r22, Y+1	; 0x01
     5fe:	8a 81       	ldd	r24, Y+2	; 0x02
     600:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <_Z8lcd_gotohh>
			while((PIND & (1<<PD1)) == 2) {}
     604:	00 00       	nop
     606:	80 e3       	ldi	r24, 0x30	; 48
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	fc 01       	movw	r30, r24
     60c:	80 81       	ld	r24, Z
     60e:	88 2f       	mov	r24, r24
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	82 70       	andi	r24, 0x02	; 2
     614:	99 27       	eor	r25, r25
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	00 97       	sbiw	r24, 0x00	; 0
     61a:	09 f4       	brne	.+2      	; 0x61e <_Z10changeTimebPh+0x1b2>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	22 23       	and	r18, r18
     620:	91 f7       	brne	.-28     	; 0x606 <_Z10changeTimebPh+0x19a>
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	a8 ec       	ldi	r26, 0xC8	; 200
     628:	b1 e4       	ldi	r27, 0x41	; 65
     62a:	8a 8b       	std	Y+18, r24	; 0x12
     62c:	9b 8b       	std	Y+19, r25	; 0x13
     62e:	ac 8b       	std	Y+20, r26	; 0x14
     630:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	4a e7       	ldi	r20, 0x7A	; 122
     638:	54 e4       	ldi	r21, 0x44	; 68
     63a:	6a 89       	ldd	r22, Y+18	; 0x12
     63c:	7b 89       	ldd	r23, Y+19	; 0x13
     63e:	8c 89       	ldd	r24, Y+20	; 0x14
     640:	9d 89       	ldd	r25, Y+21	; 0x15
     642:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__mulsf3>
     646:	dc 01       	movw	r26, r24
     648:	cb 01       	movw	r24, r22
     64a:	8e 8b       	std	Y+22, r24	; 0x16
     64c:	9f 8b       	std	Y+23, r25	; 0x17
     64e:	a8 8f       	std	Y+24, r26	; 0x18
     650:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	40 e8       	ldi	r20, 0x80	; 128
     658:	5f e3       	ldi	r21, 0x3F	; 63
     65a:	6e 89       	ldd	r22, Y+22	; 0x16
     65c:	7f 89       	ldd	r23, Y+23	; 0x17
     65e:	88 8d       	ldd	r24, Y+24	; 0x18
     660:	99 8d       	ldd	r25, Y+25	; 0x19
     662:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__cmpsf2>
     666:	88 23       	and	r24, r24
     668:	2c f4       	brge	.+10     	; 0x674 <_Z10changeTimebPh+0x208>
		__ticks = 1;
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	9b 8f       	std	Y+27, r25	; 0x1b
     670:	8a 8f       	std	Y+26, r24	; 0x1a
     672:	3f c0       	rjmp	.+126    	; 0x6f2 <_Z10changeTimebPh+0x286>
	else if (__tmp > 65535)
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	3f ef       	ldi	r19, 0xFF	; 255
     678:	4f e7       	ldi	r20, 0x7F	; 127
     67a:	57 e4       	ldi	r21, 0x47	; 71
     67c:	6e 89       	ldd	r22, Y+22	; 0x16
     67e:	7f 89       	ldd	r23, Y+23	; 0x17
     680:	88 8d       	ldd	r24, Y+24	; 0x18
     682:	99 8d       	ldd	r25, Y+25	; 0x19
     684:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__gesf2>
     688:	18 16       	cp	r1, r24
     68a:	4c f5       	brge	.+82     	; 0x6de <_Z10changeTimebPh+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	40 e2       	ldi	r20, 0x20	; 32
     692:	51 e4       	ldi	r21, 0x41	; 65
     694:	6a 89       	ldd	r22, Y+18	; 0x12
     696:	7b 89       	ldd	r23, Y+19	; 0x13
     698:	8c 89       	ldd	r24, Y+20	; 0x14
     69a:	9d 89       	ldd	r25, Y+21	; 0x15
     69c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__mulsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	bc 01       	movw	r22, r24
     6a6:	cd 01       	movw	r24, r26
     6a8:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fixunssfsi>
     6ac:	dc 01       	movw	r26, r24
     6ae:	cb 01       	movw	r24, r22
     6b0:	9b 8f       	std	Y+27, r25	; 0x1b
     6b2:	8a 8f       	std	Y+26, r24	; 0x1a
     6b4:	0f c0       	rjmp	.+30     	; 0x6d4 <_Z10changeTimebPh+0x268>
     6b6:	84 e6       	ldi	r24, 0x64	; 100
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	9d 8f       	std	Y+29, r25	; 0x1d
     6bc:	8c 8f       	std	Y+28, r24	; 0x1c
     6be:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6c0:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <_Z10changeTimebPh+0x256>
     6c6:	9d 8f       	std	Y+29, r25	; 0x1d
     6c8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	9b 8f       	std	Y+27, r25	; 0x1b
     6d2:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6d8:	00 97       	sbiw	r24, 0x00	; 0
     6da:	69 f7       	brne	.-38     	; 0x6b6 <_Z10changeTimebPh+0x24a>
     6dc:	e0 c2       	rjmp	.+1472   	; 0xc9e <__stack+0x43f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6de:	6e 89       	ldd	r22, Y+22	; 0x16
     6e0:	7f 89       	ldd	r23, Y+23	; 0x17
     6e2:	88 8d       	ldd	r24, Y+24	; 0x18
     6e4:	99 8d       	ldd	r25, Y+25	; 0x19
     6e6:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fixunssfsi>
     6ea:	dc 01       	movw	r26, r24
     6ec:	cb 01       	movw	r24, r22
     6ee:	9b 8f       	std	Y+27, r25	; 0x1b
     6f0:	8a 8f       	std	Y+26, r24	; 0x1a
     6f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6f6:	9f 8f       	std	Y+31, r25	; 0x1f
     6f8:	8e 8f       	std	Y+30, r24	; 0x1e
     6fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <_Z10changeTimebPh+0x292>
     702:	9f 8f       	std	Y+31, r25	; 0x1f
     704:	8e 8f       	std	Y+30, r24	; 0x1e
     706:	cb c2       	rjmp	.+1430   	; 0xc9e <__stack+0x43f>
			_delay_ms(25);
		}
		else if ((PIND & (1<<PD2)) == (1<<PD2))				//button 3	UP
     708:	80 e3       	ldi	r24, 0x30	; 48
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	fc 01       	movw	r30, r24
     70e:	80 81       	ld	r24, Z
     710:	88 2f       	mov	r24, r24
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	84 70       	andi	r24, 0x04	; 4
     716:	99 27       	eor	r25, r25
     718:	21 e0       	ldi	r18, 0x01	; 1
     71a:	00 97       	sbiw	r24, 0x00	; 0
     71c:	09 f4       	brne	.+2      	; 0x720 <_Z10changeTimebPh+0x2b4>
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	22 23       	and	r18, r18
     722:	09 f4       	brne	.+2      	; 0x726 <_Z10changeTimebPh+0x2ba>
     724:	57 c1       	rjmp	.+686    	; 0x9d4 <__stack+0x175>
		{
			if (x == 0 || x == 3 || x == 6)
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	88 23       	and	r24, r24
     72a:	31 f0       	breq	.+12     	; 0x738 <_Z10changeTimebPh+0x2cc>
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	83 30       	cpi	r24, 0x03	; 3
     730:	19 f0       	breq	.+6      	; 0x738 <_Z10changeTimebPh+0x2cc>
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	86 30       	cpi	r24, 0x06	; 6
     736:	39 f5       	brne	.+78     	; 0x786 <_Z10changeTimebPh+0x31a>
			{
				time[index[lcd_get_row()][lcd_get_column()]] += 10;
     738:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z11lcd_get_rowv>
     73c:	08 2f       	mov	r16, r24
     73e:	10 e0       	ldi	r17, 0x00	; 0
     740:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14lcd_get_columnv>
     744:	88 2f       	mov	r24, r24
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	98 01       	movw	r18, r16
     74a:	22 95       	swap	r18
     74c:	32 95       	swap	r19
     74e:	30 7f       	andi	r19, 0xF0	; 240
     750:	32 27       	eor	r19, r18
     752:	20 7f       	andi	r18, 0xF0	; 240
     754:	32 27       	eor	r19, r18
     756:	82 0f       	add	r24, r18
     758:	93 1f       	adc	r25, r19
     75a:	80 5a       	subi	r24, 0xA0	; 160
     75c:	9f 4f       	sbci	r25, 0xFF	; 255
     75e:	fc 01       	movw	r30, r24
     760:	40 81       	ld	r20, Z
     762:	84 2f       	mov	r24, r20
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	2d ad       	ldd	r18, Y+61	; 0x3d
     768:	3e ad       	ldd	r19, Y+62	; 0x3e
     76a:	82 0f       	add	r24, r18
     76c:	93 1f       	adc	r25, r19
     76e:	24 2f       	mov	r18, r20
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	4d ad       	ldd	r20, Y+61	; 0x3d
     774:	5e ad       	ldd	r21, Y+62	; 0x3e
     776:	24 0f       	add	r18, r20
     778:	35 1f       	adc	r19, r21
     77a:	f9 01       	movw	r30, r18
     77c:	20 81       	ld	r18, Z
     77e:	26 5f       	subi	r18, 0xF6	; 246
     780:	fc 01       	movw	r30, r24
     782:	20 83       	st	Z, r18
     784:	20 c0       	rjmp	.+64     	; 0x7c6 <_Z10changeTimebPh+0x35a>
			}
			else
			{
				time[index[lcd_get_row()][lcd_get_column()]] ++;
     786:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z11lcd_get_rowv>
     78a:	08 2f       	mov	r16, r24
     78c:	10 e0       	ldi	r17, 0x00	; 0
     78e:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14lcd_get_columnv>
     792:	88 2f       	mov	r24, r24
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	98 01       	movw	r18, r16
     798:	22 95       	swap	r18
     79a:	32 95       	swap	r19
     79c:	30 7f       	andi	r19, 0xF0	; 240
     79e:	32 27       	eor	r19, r18
     7a0:	20 7f       	andi	r18, 0xF0	; 240
     7a2:	32 27       	eor	r19, r18
     7a4:	82 0f       	add	r24, r18
     7a6:	93 1f       	adc	r25, r19
     7a8:	80 5a       	subi	r24, 0xA0	; 160
     7aa:	9f 4f       	sbci	r25, 0xFF	; 255
     7ac:	fc 01       	movw	r30, r24
     7ae:	80 81       	ld	r24, Z
     7b0:	88 2f       	mov	r24, r24
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	2d ad       	ldd	r18, Y+61	; 0x3d
     7b6:	3e ad       	ldd	r19, Y+62	; 0x3e
     7b8:	82 0f       	add	r24, r18
     7ba:	93 1f       	adc	r25, r19
     7bc:	fc 01       	movw	r30, r24
     7be:	20 81       	ld	r18, Z
     7c0:	2f 5f       	subi	r18, 0xFF	; 255
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18
			}
			if (time[index[lcd_get_row()][lcd_get_column()]] > MaxVal[lcd_get_row()][lcd_get_column()])
     7c6:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z11lcd_get_rowv>
     7ca:	08 2f       	mov	r16, r24
     7cc:	10 e0       	ldi	r17, 0x00	; 0
     7ce:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14lcd_get_columnv>
     7d2:	88 2f       	mov	r24, r24
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	98 01       	movw	r18, r16
     7d8:	22 95       	swap	r18
     7da:	32 95       	swap	r19
     7dc:	30 7f       	andi	r19, 0xF0	; 240
     7de:	32 27       	eor	r19, r18
     7e0:	20 7f       	andi	r18, 0xF0	; 240
     7e2:	32 27       	eor	r19, r18
     7e4:	82 0f       	add	r24, r18
     7e6:	93 1f       	adc	r25, r19
     7e8:	80 5a       	subi	r24, 0xA0	; 160
     7ea:	9f 4f       	sbci	r25, 0xFF	; 255
     7ec:	fc 01       	movw	r30, r24
     7ee:	80 81       	ld	r24, Z
     7f0:	88 2f       	mov	r24, r24
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	2d ad       	ldd	r18, Y+61	; 0x3d
     7f6:	3e ad       	ldd	r19, Y+62	; 0x3e
     7f8:	82 0f       	add	r24, r18
     7fa:	93 1f       	adc	r25, r19
     7fc:	fc 01       	movw	r30, r24
     7fe:	f0 80       	ld	r15, Z
     800:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z11lcd_get_rowv>
     804:	08 2f       	mov	r16, r24
     806:	10 e0       	ldi	r17, 0x00	; 0
     808:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14lcd_get_columnv>
     80c:	88 2f       	mov	r24, r24
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	98 01       	movw	r18, r16
     812:	22 0f       	add	r18, r18
     814:	33 1f       	adc	r19, r19
     816:	22 0f       	add	r18, r18
     818:	33 1f       	adc	r19, r19
     81a:	22 0f       	add	r18, r18
     81c:	33 1f       	adc	r19, r19
     81e:	82 0f       	add	r24, r18
     820:	93 1f       	adc	r25, r19
     822:	80 58       	subi	r24, 0x80	; 128
     824:	9f 4f       	sbci	r25, 0xFF	; 255
     826:	fc 01       	movw	r30, r24
     828:	90 81       	ld	r25, Z
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	9f 15       	cp	r25, r15
     82e:	08 f0       	brcs	.+2      	; 0x832 <_Z10changeTimebPh+0x3c6>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	88 23       	and	r24, r24
     834:	09 f4       	brne	.+2      	; 0x838 <_Z10changeTimebPh+0x3cc>
     836:	43 c0       	rjmp	.+134    	; 0x8be <__stack+0x5f>
			{
				time[index[lcd_get_row()][lcd_get_column()]] -= (MaxVal[lcd_get_row()][lcd_get_column()]+1);
     838:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z11lcd_get_rowv>
     83c:	08 2f       	mov	r16, r24
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14lcd_get_columnv>
     844:	88 2f       	mov	r24, r24
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	98 01       	movw	r18, r16
     84a:	22 0f       	add	r18, r18
     84c:	33 1f       	adc	r19, r19
     84e:	22 0f       	add	r18, r18
     850:	33 1f       	adc	r19, r19
     852:	22 0f       	add	r18, r18
     854:	33 1f       	adc	r19, r19
     856:	82 0f       	add	r24, r18
     858:	93 1f       	adc	r25, r19
     85a:	80 58       	subi	r24, 0x80	; 128
     85c:	9f 4f       	sbci	r25, 0xFF	; 255
     85e:	fc 01       	movw	r30, r24
     860:	80 81       	ld	r24, Z
     862:	88 2f       	mov	r24, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	8c 01       	movw	r16, r24
     868:	0f 5f       	subi	r16, 0xFF	; 255
     86a:	1f 4f       	sbci	r17, 0xFF	; 255
     86c:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z11lcd_get_rowv>
     870:	e8 2e       	mov	r14, r24
     872:	f1 2c       	mov	r15, r1
     874:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14lcd_get_columnv>
     878:	88 2f       	mov	r24, r24
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	97 01       	movw	r18, r14
     87e:	22 95       	swap	r18
     880:	32 95       	swap	r19
     882:	30 7f       	andi	r19, 0xF0	; 240
     884:	32 27       	eor	r19, r18
     886:	20 7f       	andi	r18, 0xF0	; 240
     888:	32 27       	eor	r19, r18
     88a:	82 0f       	add	r24, r18
     88c:	93 1f       	adc	r25, r19
     88e:	80 5a       	subi	r24, 0xA0	; 160
     890:	9f 4f       	sbci	r25, 0xFF	; 255
     892:	fc 01       	movw	r30, r24
     894:	40 81       	ld	r20, Z
     896:	84 2f       	mov	r24, r20
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	2d ad       	ldd	r18, Y+61	; 0x3d
     89c:	3e ad       	ldd	r19, Y+62	; 0x3e
     89e:	82 0f       	add	r24, r18
     8a0:	93 1f       	adc	r25, r19
     8a2:	24 2f       	mov	r18, r20
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	4d ad       	ldd	r20, Y+61	; 0x3d
     8a8:	5e ad       	ldd	r21, Y+62	; 0x3e
     8aa:	24 0f       	add	r18, r20
     8ac:	35 1f       	adc	r19, r21
     8ae:	f9 01       	movw	r30, r18
     8b0:	20 81       	ld	r18, Z
     8b2:	22 2f       	mov	r18, r18
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	20 1b       	sub	r18, r16
     8b8:	31 0b       	sbc	r19, r17
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 83       	st	Z, r18
			}
			writeScreen(time, alarm);
     8be:	8d ad       	ldd	r24, Y+61	; 0x3d
     8c0:	9e ad       	ldd	r25, Y+62	; 0x3e
     8c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     8c4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11writeScreenPhb>
			lcd_goto(y,x);
     8c8:	69 81       	ldd	r22, Y+1	; 0x01
     8ca:	8a 81       	ldd	r24, Y+2	; 0x02
     8cc:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <_Z8lcd_gotohh>
			while ((PIND & (1<<PD2)) == 4) {}
     8d0:	00 00       	nop
     8d2:	80 e3       	ldi	r24, 0x30	; 48
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	fc 01       	movw	r30, r24
     8d8:	80 81       	ld	r24, Z
     8da:	88 2f       	mov	r24, r24
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	84 70       	andi	r24, 0x04	; 4
     8e0:	99 27       	eor	r25, r25
     8e2:	21 e0       	ldi	r18, 0x01	; 1
     8e4:	00 97       	sbiw	r24, 0x00	; 0
     8e6:	09 f4       	brne	.+2      	; 0x8ea <__stack+0x8b>
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	22 23       	and	r18, r18
     8ec:	91 f7       	brne	.-28     	; 0x8d2 <__stack+0x73>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	a8 ec       	ldi	r26, 0xC8	; 200
     8f4:	b1 e4       	ldi	r27, 0x41	; 65
     8f6:	88 a3       	std	Y+32, r24	; 0x20
     8f8:	99 a3       	std	Y+33, r25	; 0x21
     8fa:	aa a3       	std	Y+34, r26	; 0x22
     8fc:	bb a3       	std	Y+35, r27	; 0x23

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	4a e7       	ldi	r20, 0x7A	; 122
     904:	54 e4       	ldi	r21, 0x44	; 68
     906:	68 a1       	ldd	r22, Y+32	; 0x20
     908:	79 a1       	ldd	r23, Y+33	; 0x21
     90a:	8a a1       	ldd	r24, Y+34	; 0x22
     90c:	9b a1       	ldd	r25, Y+35	; 0x23
     90e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__mulsf3>
     912:	dc 01       	movw	r26, r24
     914:	cb 01       	movw	r24, r22
     916:	8c a3       	std	Y+36, r24	; 0x24
     918:	9d a3       	std	Y+37, r25	; 0x25
     91a:	ae a3       	std	Y+38, r26	; 0x26
     91c:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e8       	ldi	r20, 0x80	; 128
     924:	5f e3       	ldi	r21, 0x3F	; 63
     926:	6c a1       	ldd	r22, Y+36	; 0x24
     928:	7d a1       	ldd	r23, Y+37	; 0x25
     92a:	8e a1       	ldd	r24, Y+38	; 0x26
     92c:	9f a1       	ldd	r25, Y+39	; 0x27
     92e:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__cmpsf2>
     932:	88 23       	and	r24, r24
     934:	2c f4       	brge	.+10     	; 0x940 <__stack+0xe1>
		__ticks = 1;
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	99 a7       	std	Y+41, r25	; 0x29
     93c:	88 a7       	std	Y+40, r24	; 0x28
     93e:	3f c0       	rjmp	.+126    	; 0x9be <__stack+0x15f>
	else if (__tmp > 65535)
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	3f ef       	ldi	r19, 0xFF	; 255
     944:	4f e7       	ldi	r20, 0x7F	; 127
     946:	57 e4       	ldi	r21, 0x47	; 71
     948:	6c a1       	ldd	r22, Y+36	; 0x24
     94a:	7d a1       	ldd	r23, Y+37	; 0x25
     94c:	8e a1       	ldd	r24, Y+38	; 0x26
     94e:	9f a1       	ldd	r25, Y+39	; 0x27
     950:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__gesf2>
     954:	18 16       	cp	r1, r24
     956:	4c f5       	brge	.+82     	; 0x9aa <__stack+0x14b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	40 e2       	ldi	r20, 0x20	; 32
     95e:	51 e4       	ldi	r21, 0x41	; 65
     960:	68 a1       	ldd	r22, Y+32	; 0x20
     962:	79 a1       	ldd	r23, Y+33	; 0x21
     964:	8a a1       	ldd	r24, Y+34	; 0x22
     966:	9b a1       	ldd	r25, Y+35	; 0x23
     968:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__mulsf3>
     96c:	dc 01       	movw	r26, r24
     96e:	cb 01       	movw	r24, r22
     970:	bc 01       	movw	r22, r24
     972:	cd 01       	movw	r24, r26
     974:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fixunssfsi>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	99 a7       	std	Y+41, r25	; 0x29
     97e:	88 a7       	std	Y+40, r24	; 0x28
     980:	0f c0       	rjmp	.+30     	; 0x9a0 <__stack+0x141>
     982:	84 e6       	ldi	r24, 0x64	; 100
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	9b a7       	std	Y+43, r25	; 0x2b
     988:	8a a7       	std	Y+42, r24	; 0x2a
     98a:	8a a5       	ldd	r24, Y+42	; 0x2a
     98c:	9b a5       	ldd	r25, Y+43	; 0x2b
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	f1 f7       	brne	.-4      	; 0x98e <__stack+0x12f>
     992:	9b a7       	std	Y+43, r25	; 0x2b
     994:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     996:	88 a5       	ldd	r24, Y+40	; 0x28
     998:	99 a5       	ldd	r25, Y+41	; 0x29
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	99 a7       	std	Y+41, r25	; 0x29
     99e:	88 a7       	std	Y+40, r24	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9a0:	88 a5       	ldd	r24, Y+40	; 0x28
     9a2:	99 a5       	ldd	r25, Y+41	; 0x29
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	69 f7       	brne	.-38     	; 0x982 <__stack+0x123>
     9a8:	7a c1       	rjmp	.+756    	; 0xc9e <__stack+0x43f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9aa:	6c a1       	ldd	r22, Y+36	; 0x24
     9ac:	7d a1       	ldd	r23, Y+37	; 0x25
     9ae:	8e a1       	ldd	r24, Y+38	; 0x26
     9b0:	9f a1       	ldd	r25, Y+39	; 0x27
     9b2:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fixunssfsi>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	99 a7       	std	Y+41, r25	; 0x29
     9bc:	88 a7       	std	Y+40, r24	; 0x28
     9be:	88 a5       	ldd	r24, Y+40	; 0x28
     9c0:	99 a5       	ldd	r25, Y+41	; 0x29
     9c2:	9d a7       	std	Y+45, r25	; 0x2d
     9c4:	8c a7       	std	Y+44, r24	; 0x2c
     9c6:	8c a5       	ldd	r24, Y+44	; 0x2c
     9c8:	9d a5       	ldd	r25, Y+45	; 0x2d
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <__stack+0x16b>
     9ce:	9d a7       	std	Y+45, r25	; 0x2d
     9d0:	8c a7       	std	Y+44, r24	; 0x2c
     9d2:	65 c1       	rjmp	.+714    	; 0xc9e <__stack+0x43f>
			_delay_ms(25);
		}
		else if ((PIND & (1<<PD3)) == (1<<PD3))				//button 4	Down
     9d4:	80 e3       	ldi	r24, 0x30	; 48
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	fc 01       	movw	r30, r24
     9da:	80 81       	ld	r24, Z
     9dc:	88 2f       	mov	r24, r24
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	88 70       	andi	r24, 0x08	; 8
     9e2:	99 27       	eor	r25, r25
     9e4:	21 e0       	ldi	r18, 0x01	; 1
     9e6:	00 97       	sbiw	r24, 0x00	; 0
     9e8:	09 f4       	brne	.+2      	; 0x9ec <__stack+0x18d>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	22 23       	and	r18, r18
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <__stack+0x193>
     9f0:	56 c1       	rjmp	.+684    	; 0xc9e <__stack+0x43f>
		{
			if (x == 0 || x == 3 || x == 6){
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	88 23       	and	r24, r24
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x1a5>
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	83 30       	cpi	r24, 0x03	; 3
     9fc:	19 f0       	breq	.+6      	; 0xa04 <__stack+0x1a5>
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	86 30       	cpi	r24, 0x06	; 6
     a02:	39 f5       	brne	.+78     	; 0xa52 <__stack+0x1f3>
				time[index[lcd_get_row()][lcd_get_column()]] -= 10;
     a04:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z11lcd_get_rowv>
     a08:	08 2f       	mov	r16, r24
     a0a:	10 e0       	ldi	r17, 0x00	; 0
     a0c:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14lcd_get_columnv>
     a10:	88 2f       	mov	r24, r24
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	98 01       	movw	r18, r16
     a16:	22 95       	swap	r18
     a18:	32 95       	swap	r19
     a1a:	30 7f       	andi	r19, 0xF0	; 240
     a1c:	32 27       	eor	r19, r18
     a1e:	20 7f       	andi	r18, 0xF0	; 240
     a20:	32 27       	eor	r19, r18
     a22:	82 0f       	add	r24, r18
     a24:	93 1f       	adc	r25, r19
     a26:	80 5a       	subi	r24, 0xA0	; 160
     a28:	9f 4f       	sbci	r25, 0xFF	; 255
     a2a:	fc 01       	movw	r30, r24
     a2c:	40 81       	ld	r20, Z
     a2e:	84 2f       	mov	r24, r20
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	2d ad       	ldd	r18, Y+61	; 0x3d
     a34:	3e ad       	ldd	r19, Y+62	; 0x3e
     a36:	82 0f       	add	r24, r18
     a38:	93 1f       	adc	r25, r19
     a3a:	24 2f       	mov	r18, r20
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	4d ad       	ldd	r20, Y+61	; 0x3d
     a40:	5e ad       	ldd	r21, Y+62	; 0x3e
     a42:	24 0f       	add	r18, r20
     a44:	35 1f       	adc	r19, r21
     a46:	f9 01       	movw	r30, r18
     a48:	20 81       	ld	r18, Z
     a4a:	2a 50       	subi	r18, 0x0A	; 10
     a4c:	fc 01       	movw	r30, r24
     a4e:	20 83       	st	Z, r18
     a50:	20 c0       	rjmp	.+64     	; 0xa92 <__stack+0x233>
			}
			else
			{
				time[index[lcd_get_row()][lcd_get_column()]] --;
     a52:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z11lcd_get_rowv>
     a56:	08 2f       	mov	r16, r24
     a58:	10 e0       	ldi	r17, 0x00	; 0
     a5a:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14lcd_get_columnv>
     a5e:	88 2f       	mov	r24, r24
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	98 01       	movw	r18, r16
     a64:	22 95       	swap	r18
     a66:	32 95       	swap	r19
     a68:	30 7f       	andi	r19, 0xF0	; 240
     a6a:	32 27       	eor	r19, r18
     a6c:	20 7f       	andi	r18, 0xF0	; 240
     a6e:	32 27       	eor	r19, r18
     a70:	82 0f       	add	r24, r18
     a72:	93 1f       	adc	r25, r19
     a74:	80 5a       	subi	r24, 0xA0	; 160
     a76:	9f 4f       	sbci	r25, 0xFF	; 255
     a78:	fc 01       	movw	r30, r24
     a7a:	80 81       	ld	r24, Z
     a7c:	88 2f       	mov	r24, r24
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	2d ad       	ldd	r18, Y+61	; 0x3d
     a82:	3e ad       	ldd	r19, Y+62	; 0x3e
     a84:	82 0f       	add	r24, r18
     a86:	93 1f       	adc	r25, r19
     a88:	fc 01       	movw	r30, r24
     a8a:	20 81       	ld	r18, Z
     a8c:	21 50       	subi	r18, 0x01	; 1
     a8e:	fc 01       	movw	r30, r24
     a90:	20 83       	st	Z, r18
			}
			if (time[index[lcd_get_row()][lcd_get_column()]] > MaxVal[lcd_get_row()][lcd_get_column()])
     a92:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z11lcd_get_rowv>
     a96:	08 2f       	mov	r16, r24
     a98:	10 e0       	ldi	r17, 0x00	; 0
     a9a:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14lcd_get_columnv>
     a9e:	88 2f       	mov	r24, r24
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	98 01       	movw	r18, r16
     aa4:	22 95       	swap	r18
     aa6:	32 95       	swap	r19
     aa8:	30 7f       	andi	r19, 0xF0	; 240
     aaa:	32 27       	eor	r19, r18
     aac:	20 7f       	andi	r18, 0xF0	; 240
     aae:	32 27       	eor	r19, r18
     ab0:	82 0f       	add	r24, r18
     ab2:	93 1f       	adc	r25, r19
     ab4:	80 5a       	subi	r24, 0xA0	; 160
     ab6:	9f 4f       	sbci	r25, 0xFF	; 255
     ab8:	fc 01       	movw	r30, r24
     aba:	80 81       	ld	r24, Z
     abc:	88 2f       	mov	r24, r24
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	2d ad       	ldd	r18, Y+61	; 0x3d
     ac2:	3e ad       	ldd	r19, Y+62	; 0x3e
     ac4:	82 0f       	add	r24, r18
     ac6:	93 1f       	adc	r25, r19
     ac8:	fc 01       	movw	r30, r24
     aca:	f0 80       	ld	r15, Z
     acc:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z11lcd_get_rowv>
     ad0:	08 2f       	mov	r16, r24
     ad2:	10 e0       	ldi	r17, 0x00	; 0
     ad4:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14lcd_get_columnv>
     ad8:	88 2f       	mov	r24, r24
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	98 01       	movw	r18, r16
     ade:	22 0f       	add	r18, r18
     ae0:	33 1f       	adc	r19, r19
     ae2:	22 0f       	add	r18, r18
     ae4:	33 1f       	adc	r19, r19
     ae6:	22 0f       	add	r18, r18
     ae8:	33 1f       	adc	r19, r19
     aea:	82 0f       	add	r24, r18
     aec:	93 1f       	adc	r25, r19
     aee:	80 58       	subi	r24, 0x80	; 128
     af0:	9f 4f       	sbci	r25, 0xFF	; 255
     af2:	fc 01       	movw	r30, r24
     af4:	90 81       	ld	r25, Z
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	9f 15       	cp	r25, r15
     afa:	08 f0       	brcs	.+2      	; 0xafe <__stack+0x29f>
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	88 23       	and	r24, r24
     b00:	09 f4       	brne	.+2      	; 0xb04 <__stack+0x2a5>
     b02:	43 c0       	rjmp	.+134    	; 0xb8a <__stack+0x32b>
			{
				time[index[lcd_get_row()][lcd_get_column()]] += (MaxVal[lcd_get_row()][lcd_get_column()]+1);
     b04:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z11lcd_get_rowv>
     b08:	08 2f       	mov	r16, r24
     b0a:	10 e0       	ldi	r17, 0x00	; 0
     b0c:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14lcd_get_columnv>
     b10:	88 2f       	mov	r24, r24
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	98 01       	movw	r18, r16
     b16:	22 0f       	add	r18, r18
     b18:	33 1f       	adc	r19, r19
     b1a:	22 0f       	add	r18, r18
     b1c:	33 1f       	adc	r19, r19
     b1e:	22 0f       	add	r18, r18
     b20:	33 1f       	adc	r19, r19
     b22:	82 0f       	add	r24, r18
     b24:	93 1f       	adc	r25, r19
     b26:	80 58       	subi	r24, 0x80	; 128
     b28:	9f 4f       	sbci	r25, 0xFF	; 255
     b2a:	fc 01       	movw	r30, r24
     b2c:	80 81       	ld	r24, Z
     b2e:	88 2f       	mov	r24, r24
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	8c 01       	movw	r16, r24
     b34:	0f 5f       	subi	r16, 0xFF	; 255
     b36:	1f 4f       	sbci	r17, 0xFF	; 255
     b38:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z11lcd_get_rowv>
     b3c:	e8 2e       	mov	r14, r24
     b3e:	f1 2c       	mov	r15, r1
     b40:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14lcd_get_columnv>
     b44:	88 2f       	mov	r24, r24
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	97 01       	movw	r18, r14
     b4a:	22 95       	swap	r18
     b4c:	32 95       	swap	r19
     b4e:	30 7f       	andi	r19, 0xF0	; 240
     b50:	32 27       	eor	r19, r18
     b52:	20 7f       	andi	r18, 0xF0	; 240
     b54:	32 27       	eor	r19, r18
     b56:	82 0f       	add	r24, r18
     b58:	93 1f       	adc	r25, r19
     b5a:	80 5a       	subi	r24, 0xA0	; 160
     b5c:	9f 4f       	sbci	r25, 0xFF	; 255
     b5e:	fc 01       	movw	r30, r24
     b60:	40 81       	ld	r20, Z
     b62:	84 2f       	mov	r24, r20
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	2d ad       	ldd	r18, Y+61	; 0x3d
     b68:	3e ad       	ldd	r19, Y+62	; 0x3e
     b6a:	82 0f       	add	r24, r18
     b6c:	93 1f       	adc	r25, r19
     b6e:	24 2f       	mov	r18, r20
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	4d ad       	ldd	r20, Y+61	; 0x3d
     b74:	5e ad       	ldd	r21, Y+62	; 0x3e
     b76:	24 0f       	add	r18, r20
     b78:	35 1f       	adc	r19, r21
     b7a:	f9 01       	movw	r30, r18
     b7c:	20 81       	ld	r18, Z
     b7e:	22 2f       	mov	r18, r18
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	20 0f       	add	r18, r16
     b84:	31 1f       	adc	r19, r17
     b86:	fc 01       	movw	r30, r24
     b88:	20 83       	st	Z, r18
			}
			writeScreen(time, alarm);
     b8a:	8d ad       	ldd	r24, Y+61	; 0x3d
     b8c:	9e ad       	ldd	r25, Y+62	; 0x3e
     b8e:	6c ad       	ldd	r22, Y+60	; 0x3c
     b90:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11writeScreenPhb>
			lcd_goto(y,x);
     b94:	69 81       	ldd	r22, Y+1	; 0x01
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <_Z8lcd_gotohh>
			while ((PIND & (1<<PD3)) == (1<<PD3)) {}
     b9c:	00 00       	nop
     b9e:	80 e3       	ldi	r24, 0x30	; 48
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	fc 01       	movw	r30, r24
     ba4:	80 81       	ld	r24, Z
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	88 70       	andi	r24, 0x08	; 8
     bac:	99 27       	eor	r25, r25
     bae:	21 e0       	ldi	r18, 0x01	; 1
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <__stack+0x357>
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	22 23       	and	r18, r18
     bb8:	91 f7       	brne	.-28     	; 0xb9e <__stack+0x33f>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a8 ec       	ldi	r26, 0xC8	; 200
     bc0:	b1 e4       	ldi	r27, 0x41	; 65
     bc2:	8e a7       	std	Y+46, r24	; 0x2e
     bc4:	9f a7       	std	Y+47, r25	; 0x2f
     bc6:	a8 ab       	std	Y+48, r26	; 0x30
     bc8:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	4a e7       	ldi	r20, 0x7A	; 122
     bd0:	54 e4       	ldi	r21, 0x44	; 68
     bd2:	6e a5       	ldd	r22, Y+46	; 0x2e
     bd4:	7f a5       	ldd	r23, Y+47	; 0x2f
     bd6:	88 a9       	ldd	r24, Y+48	; 0x30
     bd8:	99 a9       	ldd	r25, Y+49	; 0x31
     bda:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__mulsf3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	8a ab       	std	Y+50, r24	; 0x32
     be4:	9b ab       	std	Y+51, r25	; 0x33
     be6:	ac ab       	std	Y+52, r26	; 0x34
     be8:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e8       	ldi	r20, 0x80	; 128
     bf0:	5f e3       	ldi	r21, 0x3F	; 63
     bf2:	6a a9       	ldd	r22, Y+50	; 0x32
     bf4:	7b a9       	ldd	r23, Y+51	; 0x33
     bf6:	8c a9       	ldd	r24, Y+52	; 0x34
     bf8:	9d a9       	ldd	r25, Y+53	; 0x35
     bfa:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__cmpsf2>
     bfe:	88 23       	and	r24, r24
     c00:	2c f4       	brge	.+10     	; 0xc0c <__stack+0x3ad>
		__ticks = 1;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	9f ab       	std	Y+55, r25	; 0x37
     c08:	8e ab       	std	Y+54, r24	; 0x36
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__stack+0x42b>
	else if (__tmp > 65535)
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	3f ef       	ldi	r19, 0xFF	; 255
     c10:	4f e7       	ldi	r20, 0x7F	; 127
     c12:	57 e4       	ldi	r21, 0x47	; 71
     c14:	6a a9       	ldd	r22, Y+50	; 0x32
     c16:	7b a9       	ldd	r23, Y+51	; 0x33
     c18:	8c a9       	ldd	r24, Y+52	; 0x34
     c1a:	9d a9       	ldd	r25, Y+53	; 0x35
     c1c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__gesf2>
     c20:	18 16       	cp	r1, r24
     c22:	4c f5       	brge	.+82     	; 0xc76 <__stack+0x417>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e2       	ldi	r20, 0x20	; 32
     c2a:	51 e4       	ldi	r21, 0x41	; 65
     c2c:	6e a5       	ldd	r22, Y+46	; 0x2e
     c2e:	7f a5       	ldd	r23, Y+47	; 0x2f
     c30:	88 a9       	ldd	r24, Y+48	; 0x30
     c32:	99 a9       	ldd	r25, Y+49	; 0x31
     c34:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__mulsf3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	bc 01       	movw	r22, r24
     c3e:	cd 01       	movw	r24, r26
     c40:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fixunssfsi>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	9f ab       	std	Y+55, r25	; 0x37
     c4a:	8e ab       	std	Y+54, r24	; 0x36
     c4c:	0f c0       	rjmp	.+30     	; 0xc6c <__stack+0x40d>
     c4e:	84 e6       	ldi	r24, 0x64	; 100
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	99 af       	std	Y+57, r25	; 0x39
     c54:	88 af       	std	Y+56, r24	; 0x38
     c56:	88 ad       	ldd	r24, Y+56	; 0x38
     c58:	99 ad       	ldd	r25, Y+57	; 0x39
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <__stack+0x3fb>
     c5e:	99 af       	std	Y+57, r25	; 0x39
     c60:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c62:	8e a9       	ldd	r24, Y+54	; 0x36
     c64:	9f a9       	ldd	r25, Y+55	; 0x37
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	9f ab       	std	Y+55, r25	; 0x37
     c6a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6c:	8e a9       	ldd	r24, Y+54	; 0x36
     c6e:	9f a9       	ldd	r25, Y+55	; 0x37
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f7       	brne	.-38     	; 0xc4e <__stack+0x3ef>
     c74:	14 c0       	rjmp	.+40     	; 0xc9e <__stack+0x43f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c76:	6a a9       	ldd	r22, Y+50	; 0x32
     c78:	7b a9       	ldd	r23, Y+51	; 0x33
     c7a:	8c a9       	ldd	r24, Y+52	; 0x34
     c7c:	9d a9       	ldd	r25, Y+53	; 0x35
     c7e:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fixunssfsi>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	9f ab       	std	Y+55, r25	; 0x37
     c88:	8e ab       	std	Y+54, r24	; 0x36
     c8a:	8e a9       	ldd	r24, Y+54	; 0x36
     c8c:	9f a9       	ldd	r25, Y+55	; 0x37
     c8e:	9b af       	std	Y+59, r25	; 0x3b
     c90:	8a af       	std	Y+58, r24	; 0x3a
     c92:	8a ad       	ldd	r24, Y+58	; 0x3a
     c94:	9b ad       	ldd	r25, Y+59	; 0x3b
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <__stack+0x437>
     c9a:	9b af       	std	Y+59, r25	; 0x3b
     c9c:	8a af       	std	Y+58, r24	; 0x3a
	t1_Stop_TOI();
	lcd_cursor(true,true);
	lcd_home();
	while ((PIND & (1<<PD0)) == (1<<PD0)) {}
	_delay_ms(25);
	while ((PIND & (1<<PD0)) != (1<<PD0))						//button 1
     c9e:	80 e3       	ldi	r24, 0x30	; 48
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	fc 01       	movw	r30, r24
     ca4:	80 81       	ld	r24, Z
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	81 70       	andi	r24, 0x01	; 1
     cac:	99 27       	eor	r25, r25
     cae:	21 e0       	ldi	r18, 0x01	; 1
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <__stack+0x457>
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	22 23       	and	r18, r18
     cb8:	09 f0       	breq	.+2      	; 0xcbc <__stack+0x45d>
     cba:	7a cc       	rjmp	.-1804   	; 0x5b0 <_Z10changeTimebPh+0x144>
			lcd_goto(y,x);
			while ((PIND & (1<<PD3)) == (1<<PD3)) {}
			_delay_ms(25);
		}
	}
	if(alarm == false)
     cbc:	9c ad       	ldd	r25, Y+60	; 0x3c
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	89 27       	eor	r24, r25
     cc2:	88 23       	and	r24, r24
     cc4:	b9 f1       	breq	.+110    	; 0xd34 <__stack+0x4d5>
	{
		for (uint8_t i = 1; i <= 7 ; i++)
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	8b 83       	std	Y+3, r24	; 0x03
     cca:	18 c0       	rjmp	.+48     	; 0xcfc <__stack+0x49d>
		{
			data[i] = decToBcd(time[i-1]);
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	08 2f       	mov	r16, r24
     cd0:	10 e0       	ldi	r17, 0x00	; 0
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	88 2f       	mov	r24, r24
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	2d ad       	ldd	r18, Y+61	; 0x3d
     cdc:	3e ad       	ldd	r19, Y+62	; 0x3e
     cde:	82 0f       	add	r24, r18
     ce0:	93 1f       	adc	r25, r19
     ce2:	fc 01       	movw	r30, r24
     ce4:	80 81       	ld	r24, Z
     ce6:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8decToBcdh>
     cea:	28 2f       	mov	r18, r24
     cec:	c8 01       	movw	r24, r16
     cee:	84 54       	subi	r24, 0x44	; 68
     cf0:	9f 4f       	sbci	r25, 0xFF	; 255
     cf2:	fc 01       	movw	r30, r24
     cf4:	20 83       	st	Z, r18
			_delay_ms(25);
		}
	}
	if(alarm == false)
	{
		for (uint8_t i = 1; i <= 7 ; i++)
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	8b 83       	std	Y+3, r24	; 0x03
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	88 30       	cpi	r24, 0x08	; 8
     d00:	28 f3       	brcs	.-54     	; 0xccc <__stack+0x46d>
		{
			data[i] = decToBcd(time[i-1]);
		}
		data[0] = 0;
     d02:	10 92 bc 00 	sts	0x00BC, r1
		TWI.start_wait(I2C_WRITE);
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	8c ec       	ldi	r24, 0xCC	; 204
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN3I2C10start_waitEh>
		TWI.writeXBytes(data,8);
     d10:	48 e0       	ldi	r20, 0x08	; 8
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	6c eb       	ldi	r22, 0xBC	; 188
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	8c ec       	ldi	r24, 0xCC	; 204
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 47 0a 	call	0x148e	; 0x148e <_ZN3I2C11writeXBytesEPhj>
		TWI.stop();
     d20:	8c ec       	ldi	r24, 0xCC	; 204
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN3I2C4stopEv>
		changeTime(true, alarmTime);
     d28:	64 ec       	ldi	r22, 0xC4	; 196
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	0e 94 36 02 	call	0x46c	; 0x46c <_Z10changeTimebPh>
     d32:	0d c0       	rjmp	.+26     	; 0xd4e <__stack+0x4ef>
	}
	else
	{
		eeprom_write_block(&alarmTime, &alarmTimeEEMEM, 7);
     d34:	47 e0       	ldi	r20, 0x07	; 7
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	84 ec       	ldi	r24, 0xC4	; 196
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <__eewr_block_m32>
		writeScreen(realTime, false);	
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	85 eb       	ldi	r24, 0xB5	; 181
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11writeScreenPhb>
	}
	t1_Start_TOI();
     d4e:	0e 94 3a 01 	call	0x274	; 0x274 <_Z12t1_Start_TOIv>
	lcd_cursor(false,false);
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	0e 94 46 0c 	call	0x188c	; 0x188c <_Z10lcd_cursorbb>
}
     d5a:	ee 96       	adiw	r28, 0x3e	; 62
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	08 95       	ret

00000d74 <__vector_11>:

ISR(TIMER0_OVF_vect) {
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	00 90 5f 00 	lds	r0, 0x005F
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	ef 93       	push	r30
     d9a:	ff 93       	push	r31
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	1f 92       	push	r1
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	static unsigned char x = 0;
	if ( x == 15 )
     da6:	80 91 cd 00 	lds	r24, 0x00CD
     daa:	8f 30       	cpi	r24, 0x0F	; 15
     dac:	71 f5       	brne	.+92     	; 0xe0a <__vector_11+0x96>
	{
		TWI.start_wait(I2C_WRITE);						// set device address and write mode
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	8c ec       	ldi	r24, 0xCC	; 204
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN3I2C10start_waitEh>
		TWI.readXBytes(data,7,0x00);
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	47 e0       	ldi	r20, 0x07	; 7
     dbc:	6c eb       	ldi	r22, 0xBC	; 188
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	8c ec       	ldi	r24, 0xCC	; 204
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN3I2C10readXBytesEPhhh>
		TWI.stop();
     dc8:	8c ec       	ldi	r24, 0xCC	; 204
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN3I2C4stopEv>
		for (uint8_t i = 0; i <= 6 ; i++)
     dd0:	19 82       	std	Y+1, r1	; 0x01
     dd2:	15 c0       	rjmp	.+42     	; 0xdfe <__vector_11+0x8a>
		{
			realTime[i] = bcdToDec(data[i]);
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	08 2f       	mov	r16, r24
     dd8:	10 e0       	ldi	r17, 0x00	; 0
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	84 54       	subi	r24, 0x44	; 68
     de2:	9f 4f       	sbci	r25, 0xFF	; 255
     de4:	fc 01       	movw	r30, r24
     de6:	80 81       	ld	r24, Z
     de8:	0e 94 56 00 	call	0xac	; 0xac <_Z8bcdToDech>
     dec:	28 2f       	mov	r18, r24
     dee:	c8 01       	movw	r24, r16
     df0:	8b 54       	subi	r24, 0x4B	; 75
     df2:	9f 4f       	sbci	r25, 0xFF	; 255
     df4:	fc 01       	movw	r30, r24
     df6:	20 83       	st	Z, r18
	if ( x == 15 )
	{
		TWI.start_wait(I2C_WRITE);						// set device address and write mode
		TWI.readXBytes(data,7,0x00);
		TWI.stop();
		for (uint8_t i = 0; i <= 6 ; i++)
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	8f 5f       	subi	r24, 0xFF	; 255
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	87 30       	cpi	r24, 0x07	; 7
     e02:	40 f3       	brcs	.-48     	; 0xdd4 <__vector_11+0x60>
		{
			realTime[i] = bcdToDec(data[i]);
		}
		x = 0;
     e04:	10 92 cd 00 	sts	0x00CD, r1
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <__vector_11+0xa0>
	}
	else
	{
		x++;
     e0a:	80 91 cd 00 	lds	r24, 0x00CD
     e0e:	8f 5f       	subi	r24, 0xFF	; 255
     e10:	80 93 cd 00 	sts	0x00CD, r24
	}
	TCNT0 = 0;
     e14:	82 e5       	ldi	r24, 0x52	; 82
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	fc 01       	movw	r30, r24
     e1a:	10 82       	st	Z, r1
}
     e1c:	0f 90       	pop	r0
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	ff 91       	pop	r31
     e24:	ef 91       	pop	r30
     e26:	bf 91       	pop	r27
     e28:	af 91       	pop	r26
     e2a:	9f 91       	pop	r25
     e2c:	8f 91       	pop	r24
     e2e:	7f 91       	pop	r23
     e30:	6f 91       	pop	r22
     e32:	5f 91       	pop	r21
     e34:	4f 91       	pop	r20
     e36:	3f 91       	pop	r19
     e38:	2f 91       	pop	r18
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	0f 90       	pop	r0
     e40:	00 92 5f 00 	sts	0x005F, r0
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <main>:

int main(void)
{
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	2e 97       	sbiw	r28, 0x0e	; 14
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
	init();
     e5e:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z4initv>
	sei();
     e62:	78 94       	sei
	while(1)
	{
		cli();
     e64:	f8 94       	cli
		writeScreen(realTime, false);
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	85 eb       	ldi	r24, 0xB5	; 181
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11writeScreenPhb>
		sei();
     e70:	78 94       	sei
		if ((PIND & (1<<PD0)) == (1<<PD0))
     e72:	80 e3       	ldi	r24, 0x30	; 48
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	fc 01       	movw	r30, r24
     e78:	80 81       	ld	r24, Z
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	81 70       	andi	r24, 0x01	; 1
     e80:	99 27       	eor	r25, r25
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	09 f4       	brne	.+2      	; 0xe8a <main+0x40>
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	22 23       	and	r18, r18
     e8c:	09 f4       	brne	.+2      	; 0xe90 <main+0x46>
     e8e:	86 c0       	rjmp	.+268    	; 0xf9c <main+0x152>
		{
			changeTime(false, realTime);
     e90:	65 eb       	ldi	r22, 0xB5	; 181
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	0e 94 36 02 	call	0x46c	; 0x46c <_Z10changeTimebPh>
			while((PIND & (1<<PD0)) == (1<<PD0)) {}
     e9a:	00 00       	nop
     e9c:	80 e3       	ldi	r24, 0x30	; 48
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	fc 01       	movw	r30, r24
     ea2:	80 81       	ld	r24, Z
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	81 70       	andi	r24, 0x01	; 1
     eaa:	99 27       	eor	r25, r25
     eac:	21 e0       	ldi	r18, 0x01	; 1
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <main+0x6a>
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	22 23       	and	r18, r18
     eb6:	91 f7       	brne	.-28     	; 0xe9c <main+0x52>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	a8 ec       	ldi	r26, 0xC8	; 200
     ebe:	b1 e4       	ldi	r27, 0x41	; 65
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	ab 83       	std	Y+3, r26	; 0x03
     ec6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	4a e7       	ldi	r20, 0x7A	; 122
     ece:	54 e4       	ldi	r21, 0x44	; 68
     ed0:	69 81       	ldd	r22, Y+1	; 0x01
     ed2:	7a 81       	ldd	r23, Y+2	; 0x02
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__mulsf3>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	8d 83       	std	Y+5, r24	; 0x05
     ee2:	9e 83       	std	Y+6, r25	; 0x06
     ee4:	af 83       	std	Y+7, r26	; 0x07
     ee6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e8       	ldi	r20, 0x80	; 128
     eee:	5f e3       	ldi	r21, 0x3F	; 63
     ef0:	6d 81       	ldd	r22, Y+5	; 0x05
     ef2:	7e 81       	ldd	r23, Y+6	; 0x06
     ef4:	8f 81       	ldd	r24, Y+7	; 0x07
     ef6:	98 85       	ldd	r25, Y+8	; 0x08
     ef8:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__cmpsf2>
     efc:	88 23       	and	r24, r24
     efe:	2c f4       	brge	.+10     	; 0xf0a <main+0xc0>
		__ticks = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	9a 87       	std	Y+10, r25	; 0x0a
     f06:	89 87       	std	Y+9, r24	; 0x09
     f08:	3f c0       	rjmp	.+126    	; 0xf88 <main+0x13e>
	else if (__tmp > 65535)
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	3f ef       	ldi	r19, 0xFF	; 255
     f0e:	4f e7       	ldi	r20, 0x7F	; 127
     f10:	57 e4       	ldi	r21, 0x47	; 71
     f12:	6d 81       	ldd	r22, Y+5	; 0x05
     f14:	7e 81       	ldd	r23, Y+6	; 0x06
     f16:	8f 81       	ldd	r24, Y+7	; 0x07
     f18:	98 85       	ldd	r25, Y+8	; 0x08
     f1a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__gesf2>
     f1e:	18 16       	cp	r1, r24
     f20:	4c f5       	brge	.+82     	; 0xf74 <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e2       	ldi	r20, 0x20	; 32
     f28:	51 e4       	ldi	r21, 0x41	; 65
     f2a:	69 81       	ldd	r22, Y+1	; 0x01
     f2c:	7a 81       	ldd	r23, Y+2	; 0x02
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	bc 01       	movw	r22, r24
     f3c:	cd 01       	movw	r24, r26
     f3e:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	9a 87       	std	Y+10, r25	; 0x0a
     f48:	89 87       	std	Y+9, r24	; 0x09
     f4a:	0f c0       	rjmp	.+30     	; 0xf6a <main+0x120>
     f4c:	84 e6       	ldi	r24, 0x64	; 100
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9c 87       	std	Y+12, r25	; 0x0c
     f52:	8b 87       	std	Y+11, r24	; 0x0b
     f54:	8b 85       	ldd	r24, Y+11	; 0x0b
     f56:	9c 85       	ldd	r25, Y+12	; 0x0c
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <main+0x10e>
     f5c:	9c 87       	std	Y+12, r25	; 0x0c
     f5e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f60:	89 85       	ldd	r24, Y+9	; 0x09
     f62:	9a 85       	ldd	r25, Y+10	; 0x0a
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	9a 87       	std	Y+10, r25	; 0x0a
     f68:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6a:	89 85       	ldd	r24, Y+9	; 0x09
     f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6e:	00 97       	sbiw	r24, 0x00	; 0
     f70:	69 f7       	brne	.-38     	; 0xf4c <main+0x102>
     f72:	14 c0       	rjmp	.+40     	; 0xf9c <main+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f74:	6d 81       	ldd	r22, Y+5	; 0x05
     f76:	7e 81       	ldd	r23, Y+6	; 0x06
     f78:	8f 81       	ldd	r24, Y+7	; 0x07
     f7a:	98 85       	ldd	r25, Y+8	; 0x08
     f7c:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9a 87       	std	Y+10, r25	; 0x0a
     f86:	89 87       	std	Y+9, r24	; 0x09
     f88:	89 85       	ldd	r24, Y+9	; 0x09
     f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8c:	9e 87       	std	Y+14, r25	; 0x0e
     f8e:	8d 87       	std	Y+13, r24	; 0x0d
     f90:	8d 85       	ldd	r24, Y+13	; 0x0d
     f92:	9e 85       	ldd	r25, Y+14	; 0x0e
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <main+0x14a>
     f98:	9e 87       	std	Y+14, r25	; 0x0e
     f9a:	8d 87       	std	Y+13, r24	; 0x0d
//		{
//			changeTime(true, alarmTime);
//			while((PIND & (1<<PD0)) == (1<<PD0)) {}
//			_delay_ms(25);
//		}
		if (alarmSet == true)
     f9c:	80 91 cb 00 	lds	r24, 0x00CB
     fa0:	88 23       	and	r24, r24
     fa2:	31 f1       	breq	.+76     	; 0xff0 <main+0x1a6>
		{
			if (realTime[0] == alarmTime[0] && realTime[1] == alarmTime[1] && realTime[2] == alarmTime[2])
     fa4:	90 91 b5 00 	lds	r25, 0x00B5
     fa8:	80 91 c4 00 	lds	r24, 0x00C4
     fac:	98 17       	cp	r25, r24
     fae:	71 f4       	brne	.+28     	; 0xfcc <main+0x182>
     fb0:	90 91 b6 00 	lds	r25, 0x00B6
     fb4:	80 91 c5 00 	lds	r24, 0x00C5
     fb8:	98 17       	cp	r25, r24
     fba:	41 f4       	brne	.+16     	; 0xfcc <main+0x182>
     fbc:	90 91 b7 00 	lds	r25, 0x00B7
     fc0:	80 91 c6 00 	lds	r24, 0x00C6
     fc4:	98 17       	cp	r25, r24
     fc6:	11 f4       	brne	.+4      	; 0xfcc <main+0x182>
			{
				Alarm_start();
     fc8:	0e 94 4a 01 	call	0x294	; 0x294 <_Z11Alarm_startv>
			}
			if((PORTB & (1<<PD0)) == (1<<PD0))
     fcc:	88 e3       	ldi	r24, 0x38	; 56
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	fc 01       	movw	r30, r24
     fd2:	80 81       	ld	r24, Z
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	81 70       	andi	r24, 0x01	; 1
     fda:	99 27       	eor	r25, r25
     fdc:	21 e0       	ldi	r18, 0x01	; 1
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <main+0x19a>
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	22 23       	and	r18, r18
     fe6:	21 f0       	breq	.+8      	; 0xff0 <main+0x1a6>
			{
				Alarm_stop();
     fe8:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z10Alarm_stopv>
				alarmSet = false;
     fec:	10 92 cb 00 	sts	0x00CB, r1
			}
		}
		if((PIND & (1<<PD6)) == (1<<PD6))
     ff0:	80 e3       	ldi	r24, 0x30	; 48
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	fc 01       	movw	r30, r24
     ff6:	80 81       	ld	r24, Z
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	80 74       	andi	r24, 0x40	; 64
     ffe:	99 27       	eor	r25, r25
    1000:	21 e0       	ldi	r18, 0x01	; 1
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	09 f4       	brne	.+2      	; 0x1008 <main+0x1be>
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	22 23       	and	r18, r18
    100a:	a9 f0       	breq	.+42     	; 0x1036 <main+0x1ec>
		{
			alarmSet = !alarmSet;
    100c:	90 91 cb 00 	lds	r25, 0x00CB
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	89 27       	eor	r24, r25
    1014:	80 93 cb 00 	sts	0x00CB, r24
			while((PIND & (1<<PD6)) == (1<<PD6)) {}
    1018:	00 00       	nop
    101a:	80 e3       	ldi	r24, 0x30	; 48
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	fc 01       	movw	r30, r24
    1020:	80 81       	ld	r24, Z
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	80 74       	andi	r24, 0x40	; 64
    1028:	99 27       	eor	r25, r25
    102a:	21 e0       	ldi	r18, 0x01	; 1
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	09 f4       	brne	.+2      	; 0x1032 <main+0x1e8>
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	22 23       	and	r18, r18
    1034:	91 f7       	brne	.-28     	; 0x101a <main+0x1d0>
		x++;
	}
	TCNT0 = 0;
}

int main(void)
    1036:	16 cf       	rjmp	.-468    	; 0xe64 <main+0x1a>

00001038 <_Z41__static_initialization_and_destruction_0ii>:
		{
			alarmSet = !alarmSet;
			while((PIND & (1<<PD6)) == (1<<PD6)) {}
		}
	}
}
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	00 d0       	rcall	.+0      	; 0x103e <_Z41__static_initialization_and_destruction_0ii+0x6>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	7c 83       	std	Y+4, r23	; 0x04
    104a:	6b 83       	std	Y+3, r22	; 0x03
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	91 05       	cpc	r25, r1
    1054:	59 f4       	brne	.+22     	; 0x106c <_Z41__static_initialization_and_destruction_0ii+0x34>
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	8f 3f       	cpi	r24, 0xFF	; 255
    105c:	2f ef       	ldi	r18, 0xFF	; 255
    105e:	92 07       	cpc	r25, r18
    1060:	29 f4       	brne	.+10     	; 0x106c <_Z41__static_initialization_and_destruction_0ii+0x34>
unsigned char alarmTime[7];
unsigned char EEMEM alarmTimeEEMEM[7];
	
bool alarmSet = false;

I2C TWI(address);
    1062:	60 ed       	ldi	r22, 0xD0	; 208
    1064:	8c ec       	ldi	r24, 0xCC	; 204
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 65 08 	call	0x10ca	; 0x10ca <_ZN3I2CC1Eh>
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	9a 81       	ldd	r25, Y+2	; 0x02
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	51 f4       	brne	.+20     	; 0x1088 <_Z41__static_initialization_and_destruction_0ii+0x50>
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	8f 3f       	cpi	r24, 0xFF	; 255
    107a:	2f ef       	ldi	r18, 0xFF	; 255
    107c:	92 07       	cpc	r25, r18
    107e:	21 f4       	brne	.+8      	; 0x1088 <_Z41__static_initialization_and_destruction_0ii+0x50>
    1080:	8c ec       	ldi	r24, 0xCC	; 204
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN3I2CD1Ev>
		{
			alarmSet = !alarmSet;
			while((PIND & (1<<PD6)) == (1<<PD6)) {}
		}
	}
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <_GLOBAL__sub_I_buffer>:
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	6f ef       	ldi	r22, 0xFF	; 255
    10a0:	7f ef       	ldi	r23, 0xFF	; 255
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 1c 08 	call	0x1038	; 0x1038 <_Z41__static_initialization_and_destruction_0ii>
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	08 95       	ret

000010b0 <_GLOBAL__sub_D_buffer>:
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	6f ef       	ldi	r22, 0xFF	; 255
    10ba:	7f ef       	ldi	r23, 0xFF	; 255
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 1c 08 	call	0x1038	; 0x1038 <_Z41__static_initialization_and_destruction_0ii>
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <_ZN3I2CC1Eh>:
#define SCL_CLOCK  100000L

// default constructor
I2C::I2C():address(0) {}

I2C::I2C(unsigned char newaddress) : address(newaddress) {}
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <_ZN3I2CC1Eh+0x6>
    10d0:	1f 92       	push	r1
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	9a 83       	std	Y+2, r25	; 0x02
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	6b 83       	std	Y+3, r22	; 0x03
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	9a 81       	ldd	r25, Y+2	; 0x02
    10e0:	2b 81       	ldd	r18, Y+3	; 0x03
    10e2:	fc 01       	movw	r30, r24
    10e4:	20 83       	st	Z, r18
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <_ZN3I2C4initEv>:

void I2C::init(void)
{
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <_ZN3I2C4initEv+0x6>
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
	 /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
	 TWSR = 0;                         /* no prescaler */
    1100:	81 e2       	ldi	r24, 0x21	; 33
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	fc 01       	movw	r30, r24
    1106:	10 82       	st	Z, r1
	 TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1108:	80 e2       	ldi	r24, 0x20	; 32
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	2c e0       	ldi	r18, 0x0C	; 12
    110e:	fc 01       	movw	r30, r24
    1110:	20 83       	st	Z, r18
}
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	08 95       	ret

0000111c <_ZN3I2C5startEh>:
	return address;
}


unsigned char I2C::start(unsigned char RW)
{
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	00 d0       	rcall	.+0      	; 0x1122 <_ZN3I2C5startEh+0x6>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <_ZN3I2C5startEh+0x8>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	9b 83       	std	Y+3, r25	; 0x03
    112a:	8a 83       	std	Y+2, r24	; 0x02
    112c:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);				// send START condition
    112e:	86 e5       	ldi	r24, 0x56	; 86
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	24 ea       	ldi	r18, 0xA4	; 164
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));							// wait until transmission completed
    1138:	00 00       	nop
    113a:	86 e5       	ldi	r24, 0x56	; 86
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	fc 01       	movw	r30, r24
    1140:	80 81       	ld	r24, Z
    1142:	80 95       	com	r24
    1144:	88 1f       	adc	r24, r24
    1146:	88 27       	eor	r24, r24
    1148:	88 1f       	adc	r24, r24
    114a:	88 23       	and	r24, r24
    114c:	b1 f7       	brne	.-20     	; 0x113a <_ZN3I2C5startEh+0x1e>
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
    114e:	81 e2       	ldi	r24, 0x21	; 33
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	fc 01       	movw	r30, r24
    1154:	80 81       	ld	r24, Z
    1156:	88 7f       	andi	r24, 0xF8	; 248
    1158:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	88 30       	cpi	r24, 0x08	; 8
    115e:	29 f0       	breq	.+10     	; 0x116a <_ZN3I2C5startEh+0x4e>
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	80 31       	cpi	r24, 0x10	; 16
    1164:	11 f0       	breq	.+4      	; 0x116a <_ZN3I2C5startEh+0x4e>
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	29 c0       	rjmp	.+82     	; 0x11bc <_ZN3I2C5startEh+0xa0>
	TWDR = address + RW;									// send device address
    116a:	83 e2       	ldi	r24, 0x23	; 35
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	2a 81       	ldd	r18, Y+2	; 0x02
    1170:	3b 81       	ldd	r19, Y+3	; 0x03
    1172:	f9 01       	movw	r30, r18
    1174:	30 81       	ld	r19, Z
    1176:	2c 81       	ldd	r18, Y+4	; 0x04
    1178:	23 0f       	add	r18, r19
    117a:	fc 01       	movw	r30, r24
    117c:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    117e:	86 e5       	ldi	r24, 0x56	; 86
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	24 e8       	ldi	r18, 0x84	; 132
    1184:	fc 01       	movw	r30, r24
    1186:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));							// wail until transmission completed and ACK/NACK has been received
    1188:	00 00       	nop
    118a:	86 e5       	ldi	r24, 0x56	; 86
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	fc 01       	movw	r30, r24
    1190:	80 81       	ld	r24, Z
    1192:	80 95       	com	r24
    1194:	88 1f       	adc	r24, r24
    1196:	88 27       	eor	r24, r24
    1198:	88 1f       	adc	r24, r24
    119a:	88 23       	and	r24, r24
    119c:	b1 f7       	brne	.-20     	; 0x118a <_ZN3I2C5startEh+0x6e>
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
    119e:	81 e2       	ldi	r24, 0x21	; 33
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	fc 01       	movw	r30, r24
    11a4:	80 81       	ld	r24, Z
    11a6:	88 7f       	andi	r24, 0xF8	; 248
    11a8:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	88 31       	cpi	r24, 0x18	; 24
    11ae:	29 f0       	breq	.+10     	; 0x11ba <_ZN3I2C5startEh+0x9e>
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	80 34       	cpi	r24, 0x40	; 64
    11b4:	11 f0       	breq	.+4      	; 0x11ba <_ZN3I2C5startEh+0x9e>
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <_ZN3I2C5startEh+0xa0>
	return 0;
    11ba:	80 e0       	ldi	r24, 0x00	; 0
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <_ZN3I2C9rep_startEh>:

unsigned char I2C::rep_start(unsigned char RW)
{
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <_ZN3I2C9rep_startEh+0x6>
    11d0:	1f 92       	push	r1
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	9a 83       	std	Y+2, r25	; 0x02
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	6b 83       	std	Y+3, r22	; 0x03
	return start(RW);
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	6b 81       	ldd	r22, Y+3	; 0x03
    11e2:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN3I2C5startEh>
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <_ZN3I2C10start_waitEh>:

void I2C::start_wait(unsigned char RW)
{
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <_ZN3I2C10start_waitEh+0x6>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <_ZN3I2C10start_waitEh+0x8>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	9b 83       	std	Y+3, r25	; 0x03
    1200:	8a 83       	std	Y+2, r24	; 0x02
    1202:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t   twst;
	while ( 1 )
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);						// send START condition
    1204:	86 e5       	ldi	r24, 0x56	; 86
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	24 ea       	ldi	r18, 0xA4	; 164
    120a:	fc 01       	movw	r30, r24
    120c:	20 83       	st	Z, r18
		while(!(TWCR & (1<<TWINT)));									// wait until transmission completed
    120e:	00 00       	nop
    1210:	86 e5       	ldi	r24, 0x56	; 86
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	fc 01       	movw	r30, r24
    1216:	80 81       	ld	r24, Z
    1218:	80 95       	com	r24
    121a:	88 1f       	adc	r24, r24
    121c:	88 27       	eor	r24, r24
    121e:	88 1f       	adc	r24, r24
    1220:	88 23       	and	r24, r24
    1222:	b1 f7       	brne	.-20     	; 0x1210 <_ZN3I2C10start_waitEh+0x1e>
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
    1224:	81 e2       	ldi	r24, 0x21	; 33
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	fc 01       	movw	r30, r24
    122a:	80 81       	ld	r24, Z
    122c:	88 7f       	andi	r24, 0xF8	; 248
    122e:	89 83       	std	Y+1, r24	; 0x01
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	88 30       	cpi	r24, 0x08	; 8
    1234:	21 f0       	breq	.+8      	; 0x123e <_ZN3I2C10start_waitEh+0x4c>
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	80 31       	cpi	r24, 0x10	; 16
    123a:	09 f0       	breq	.+2      	; 0x123e <_ZN3I2C10start_waitEh+0x4c>
    123c:	3c c0       	rjmp	.+120    	; 0x12b6 <_ZN3I2C10start_waitEh+0xc4>
		TWDR = address + RW;											// send device address
    123e:	83 e2       	ldi	r24, 0x23	; 35
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	2a 81       	ldd	r18, Y+2	; 0x02
    1244:	3b 81       	ldd	r19, Y+3	; 0x03
    1246:	f9 01       	movw	r30, r18
    1248:	30 81       	ld	r19, Z
    124a:	2c 81       	ldd	r18, Y+4	; 0x04
    124c:	23 0f       	add	r18, r19
    124e:	fc 01       	movw	r30, r24
    1250:	20 83       	st	Z, r18
		TWCR = (1<<TWINT) | (1<<TWEN);
    1252:	86 e5       	ldi	r24, 0x56	; 86
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	24 e8       	ldi	r18, 0x84	; 132
    1258:	fc 01       	movw	r30, r24
    125a:	20 83       	st	Z, r18
		while(!(TWCR & (1<<TWINT)));									// wail until transmission completed
    125c:	00 00       	nop
    125e:	86 e5       	ldi	r24, 0x56	; 86
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	fc 01       	movw	r30, r24
    1264:	80 81       	ld	r24, Z
    1266:	80 95       	com	r24
    1268:	88 1f       	adc	r24, r24
    126a:	88 27       	eor	r24, r24
    126c:	88 1f       	adc	r24, r24
    126e:	88 23       	and	r24, r24
    1270:	b1 f7       	brne	.-20     	; 0x125e <_ZN3I2C10start_waitEh+0x6c>
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
    1272:	81 e2       	ldi	r24, 0x21	; 33
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	fc 01       	movw	r30, r24
    1278:	80 81       	ld	r24, Z
    127a:	88 7f       	andi	r24, 0xF8	; 248
    127c:	89 83       	std	Y+1, r24	; 0x01
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	80 32       	cpi	r24, 0x20	; 32
    1282:	19 f0       	breq	.+6      	; 0x128a <_ZN3I2C10start_waitEh+0x98>
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	88 35       	cpi	r24, 0x58	; 88
    1288:	a9 f4       	brne	.+42     	; 0x12b4 <_ZN3I2C10start_waitEh+0xc2>
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);					//device busy, send stop condition to terminate write operation
    128a:	86 e5       	ldi	r24, 0x56	; 86
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	24 e9       	ldi	r18, 0x94	; 148
    1290:	fc 01       	movw	r30, r24
    1292:	20 83       	st	Z, r18
			while(TWCR & (1<<TWSTO));									// wait until stop condition is executed and bus released
    1294:	00 00       	nop
    1296:	86 e5       	ldi	r24, 0x56	; 86
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	fc 01       	movw	r30, r24
    129c:	80 81       	ld	r24, Z
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	80 71       	andi	r24, 0x10	; 16
    12a4:	99 27       	eor	r25, r25
    12a6:	21 e0       	ldi	r18, 0x01	; 1
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	09 f4       	brne	.+2      	; 0x12ae <_ZN3I2C10start_waitEh+0xbc>
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	22 23       	and	r18, r18
    12b0:	91 f7       	brne	.-28     	; 0x1296 <_ZN3I2C10start_waitEh+0xa4>
			continue;
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <_ZN3I2C10start_waitEh+0xc4>
		}
		break;															//if( twst != TW_MT_SLA_ACK) return 1;
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <_ZN3I2C10start_waitEh+0xc6>
	}
    12b6:	a6 cf       	rjmp	.-180    	; 0x1204 <_ZN3I2C10start_waitEh+0x12>
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	08 95       	ret

000012c6 <_ZN3I2C4stopEv>:

void I2C::stop(void)
{
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <_ZN3I2C4stopEv+0x6>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01
	 TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);						//send stop condition
    12d4:	86 e5       	ldi	r24, 0x56	; 86
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	24 e9       	ldi	r18, 0x94	; 148
    12da:	fc 01       	movw	r30, r24
    12dc:	20 83       	st	Z, r18
	 while(TWCR & (1<<TWSTO));											// wait until stop condition is executed and bus released
    12de:	00 00       	nop
    12e0:	86 e5       	ldi	r24, 0x56	; 86
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	fc 01       	movw	r30, r24
    12e6:	80 81       	ld	r24, Z
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	80 71       	andi	r24, 0x10	; 16
    12ee:	99 27       	eor	r25, r25
    12f0:	21 e0       	ldi	r18, 0x01	; 1
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <_ZN3I2C4stopEv+0x32>
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	22 23       	and	r18, r18
    12fa:	91 f7       	brne	.-28     	; 0x12e0 <_ZN3I2C4stopEv+0x1a>
}
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <_ZN3I2C5writeEh>:


unsigned char I2C::write(unsigned char data)
{
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	00 d0       	rcall	.+0      	; 0x130c <_ZN3I2C5writeEh+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <_ZN3I2C5writeEh+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	9b 83       	std	Y+3, r25	; 0x03
    1314:	8a 83       	std	Y+2, r24	; 0x02
    1316:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t   twst;
	TWDR = data;														// send data to the previously addressed device
    1318:	83 e2       	ldi	r24, 0x23	; 35
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	2c 81       	ldd	r18, Y+4	; 0x04
    131e:	fc 01       	movw	r30, r24
    1320:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1322:	86 e5       	ldi	r24, 0x56	; 86
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	24 e8       	ldi	r18, 0x84	; 132
    1328:	fc 01       	movw	r30, r24
    132a:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))){}										// wait until transmission completed
    132c:	00 00       	nop
    132e:	86 e5       	ldi	r24, 0x56	; 86
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	fc 01       	movw	r30, r24
    1334:	80 81       	ld	r24, Z
    1336:	80 95       	com	r24
    1338:	88 1f       	adc	r24, r24
    133a:	88 27       	eor	r24, r24
    133c:	88 1f       	adc	r24, r24
    133e:	88 23       	and	r24, r24
    1340:	b1 f7       	brne	.-20     	; 0x132e <_ZN3I2C5writeEh+0x28>
	twst = TW_STATUS & 0xF8;											// check value of TWI Status Register. Mask prescaler bits
    1342:	81 e2       	ldi	r24, 0x21	; 33
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	fc 01       	movw	r30, r24
    1348:	80 81       	ld	r24, Z
    134a:	88 7f       	andi	r24, 0xF8	; 248
    134c:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	88 32       	cpi	r24, 0x28	; 40
    1352:	11 f0       	breq	.+4      	; 0x1358 <_ZN3I2C5writeEh+0x52>
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	01 c0       	rjmp	.+2      	; 0x135a <_ZN3I2C5writeEh+0x54>
	return 0;
    1358:	80 e0       	ldi	r24, 0x00	; 0
}
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	08 95       	ret

00001368 <_ZN3I2C7readAckEv>:

unsigned char I2C::readAck(void)
{
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	00 d0       	rcall	.+0      	; 0x136e <_ZN3I2C7readAckEv+0x6>
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1376:	86 e5       	ldi	r24, 0x56	; 86
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	24 ec       	ldi	r18, 0xC4	; 196
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));
    1380:	00 00       	nop
    1382:	86 e5       	ldi	r24, 0x56	; 86
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	fc 01       	movw	r30, r24
    1388:	80 81       	ld	r24, Z
    138a:	80 95       	com	r24
    138c:	88 1f       	adc	r24, r24
    138e:	88 27       	eor	r24, r24
    1390:	88 1f       	adc	r24, r24
    1392:	88 23       	and	r24, r24
    1394:	b1 f7       	brne	.-20     	; 0x1382 <_ZN3I2C7readAckEv+0x1a>
	return TWDR;
    1396:	83 e2       	ldi	r24, 0x23	; 35
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	fc 01       	movw	r30, r24
    139c:	80 81       	ld	r24, Z
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <_ZN3I2C7readNakEv>:

unsigned char I2C::readNak(void)
{
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <_ZN3I2C7readNakEv+0x6>
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	9a 83       	std	Y+2, r25	; 0x02
    13b4:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<<TWINT) | (1<<TWEN);
    13b6:	86 e5       	ldi	r24, 0x56	; 86
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	24 e8       	ldi	r18, 0x84	; 132
    13bc:	fc 01       	movw	r30, r24
    13be:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));	
    13c0:	00 00       	nop
    13c2:	86 e5       	ldi	r24, 0x56	; 86
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	fc 01       	movw	r30, r24
    13c8:	80 81       	ld	r24, Z
    13ca:	80 95       	com	r24
    13cc:	88 1f       	adc	r24, r24
    13ce:	88 27       	eor	r24, r24
    13d0:	88 1f       	adc	r24, r24
    13d2:	88 23       	and	r24, r24
    13d4:	b1 f7       	brne	.-20     	; 0x13c2 <_ZN3I2C7readNakEv+0x1a>
	return TWDR;
    13d6:	83 e2       	ldi	r24, 0x23	; 35
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	fc 01       	movw	r30, r24
    13dc:	80 81       	ld	r24, Z
}
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <_ZN3I2C10readXBytesEPhhh>:

void I2C::readXBytes(unsigned char data[], unsigned char amount, unsigned char startAddress)	//data[x] : x >= amount
{
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	27 97       	sbiw	r28, 0x07	; 7
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	9b 83       	std	Y+3, r25	; 0x03
    1402:	8a 83       	std	Y+2, r24	; 0x02
    1404:	7d 83       	std	Y+5, r23	; 0x05
    1406:	6c 83       	std	Y+4, r22	; 0x04
    1408:	4e 83       	std	Y+6, r20	; 0x06
    140a:	2f 83       	std	Y+7, r18	; 0x07
//	if ((sizeof (data)/sizeof (data[0])) >= amount){
		write(startAddress);
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	9b 81       	ldd	r25, Y+3	; 0x03
    1410:	6f 81       	ldd	r22, Y+7	; 0x07
    1412:	0e 94 83 09 	call	0x1306	; 0x1306 <_ZN3I2C5writeEh>
		rep_start(I2C_READ);
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	9b 81       	ldd	r25, Y+3	; 0x03
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN3I2C9rep_startEh>
		for (uint8_t i = 0; i < amount - 1; i++){
    1420:	19 82       	std	Y+1, r1	; 0x01
    1422:	11 c0       	rjmp	.+34     	; 0x1446 <_ZN3I2C10readXBytesEPhhh+0x5e>
			data[i] = readAck();
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	2c 81       	ldd	r18, Y+4	; 0x04
    142c:	3d 81       	ldd	r19, Y+5	; 0x05
    142e:	89 01       	movw	r16, r18
    1430:	08 0f       	add	r16, r24
    1432:	19 1f       	adc	r17, r25
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	9b 81       	ldd	r25, Y+3	; 0x03
    1438:	0e 94 b4 09 	call	0x1368	; 0x1368 <_ZN3I2C7readAckEv>
    143c:	f8 01       	movw	r30, r16
    143e:	80 83       	st	Z, r24
void I2C::readXBytes(unsigned char data[], unsigned char amount, unsigned char startAddress)	//data[x] : x >= amount
{
//	if ((sizeof (data)/sizeof (data[0])) >= amount){
		write(startAddress);
		rep_start(I2C_READ);
		for (uint8_t i = 0; i < amount - 1; i++){
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	8f 5f       	subi	r24, 0xFF	; 255
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	8e 81       	ldd	r24, Y+6	; 0x06
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	28 17       	cp	r18, r24
    1456:	39 07       	cpc	r19, r25
    1458:	2c f3       	brlt	.-54     	; 0x1424 <_ZN3I2C10readXBytesEPhhh+0x3c>
			data[i] = readAck();
		}
		data[amount - 1] = readNak();
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	2c 81       	ldd	r18, Y+4	; 0x04
    1464:	3d 81       	ldd	r19, Y+5	; 0x05
    1466:	89 01       	movw	r16, r18
    1468:	08 0f       	add	r16, r24
    146a:	19 1f       	adc	r17, r25
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	9b 81       	ldd	r25, Y+3	; 0x03
    1470:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <_ZN3I2C7readNakEv>
    1474:	f8 01       	movw	r30, r16
    1476:	80 83       	st	Z, r24
//	}
}
    1478:	27 96       	adiw	r28, 0x07	; 7
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	08 95       	ret

0000148e <_ZN3I2C11writeXBytesEPhj>:

void I2C::writeXBytes(unsigned char data[], unsigned int amount)	//data[x] : x >= amount
{
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	27 97       	sbiw	r28, 0x07	; 7
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	9b 83       	std	Y+3, r25	; 0x03
    14a4:	8a 83       	std	Y+2, r24	; 0x02
    14a6:	7d 83       	std	Y+5, r23	; 0x05
    14a8:	6c 83       	std	Y+4, r22	; 0x04
    14aa:	5f 83       	std	Y+7, r21	; 0x07
    14ac:	4e 83       	std	Y+6, r20	; 0x06
	for (uint8_t i = 0; i <= amount; i++){
    14ae:	19 82       	std	Y+1, r1	; 0x01
    14b0:	11 c0       	rjmp	.+34     	; 0x14d4 <_ZN3I2C11writeXBytesEPhj+0x46>
		write(data[i]);	
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	88 2f       	mov	r24, r24
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ba:	3d 81       	ldd	r19, Y+5	; 0x05
    14bc:	82 0f       	add	r24, r18
    14be:	93 1f       	adc	r25, r19
    14c0:	fc 01       	movw	r30, r24
    14c2:	20 81       	ld	r18, Z
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	9b 81       	ldd	r25, Y+3	; 0x03
    14c8:	62 2f       	mov	r22, r18
    14ca:	0e 94 83 09 	call	0x1306	; 0x1306 <_ZN3I2C5writeEh>
//	}
}

void I2C::writeXBytes(unsigned char data[], unsigned int amount)	//data[x] : x >= amount
{
	for (uint8_t i = 0; i <= amount; i++){
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	8f 5f       	subi	r24, 0xFF	; 255
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	8e 81       	ldd	r24, Y+6	; 0x06
    14dc:	9f 81       	ldd	r25, Y+7	; 0x07
    14de:	82 17       	cp	r24, r18
    14e0:	93 07       	cpc	r25, r19
    14e2:	38 f7       	brcc	.-50     	; 0x14b2 <_ZN3I2C11writeXBytesEPhj+0x24>
		write(data[i]);	
	}
}
    14e4:	27 96       	adiw	r28, 0x07	; 7
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <_ZN3I2CD1Ev>:

// default destructor
I2C::~I2C()
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <_ZN3I2CD1Ev+0x6>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	89 83       	std	Y+1, r24	; 0x01
{
} //~I2C
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	08 95       	ret

0000150e <_Z12_lcd_delay_8h>:

    These functions and macro's are written by Jesse.
*/

/* One byte delay loop, one loop costs 3 cycles. */
void _lcd_delay_8(uint8_t t) {
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	1f 92       	push	r1
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("\n"
                  "L_dl0%=: subi %0,1"    "\n\t"
                  "         brcc L_dl0%=" "\n\t"
                  :: "r" (t));
    151a:	89 81       	ldd	r24, Y+1	; 0x01

0000151c <L_dl021>:
    151c:	81 50       	subi	r24, 0x01	; 1
    151e:	f0 f7       	brcc	.-4      	; 0x151c <L_dl021>
}
    1520:	0f 90       	pop	r0
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	08 95       	ret

00001528 <_Z13_lcd_delay_16j>:

/* Two byte delay loop, one loop costs 4 cycles. */
void _lcd_delay_16(uint16_t t) {
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	00 d0       	rcall	.+0      	; 0x152e <_Z13_lcd_delay_16j+0x6>
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("\n"
                  "L_dl1%=: subi %A0,1"   "\n\t"
                  "         sbci %B0,0"   "\n\t"
                  "         brcc L_dl1%=" "\n\t"
                  :: "r" (t));
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	9a 81       	ldd	r25, Y+2	; 0x02

0000153a <L_dl149>:
    153a:	81 50       	subi	r24, 0x01	; 1
    153c:	90 40       	sbci	r25, 0x00	; 0
    153e:	e8 f7       	brcc	.-6      	; 0x153a <L_dl149>
}
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <_Z16lcd_read_commandv>:
// PA0 is Not Connected and is NOT AFFECTED by this LCD software
#define _LCD_E PA1
#define _LCD_RW PA2
#define _LCD_RS PA3

uint8_t lcd_read_command(void) {
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	1f 92       	push	r1
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    uint8_t command;
    DDRA |= 1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS; // control bus output
    1554:	8a e3       	ldi	r24, 0x3A	; 58
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	2a e3       	ldi	r18, 0x3A	; 58
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	f9 01       	movw	r30, r18
    155e:	20 81       	ld	r18, Z
    1560:	2e 60       	ori	r18, 0x0E	; 14
    1562:	fc 01       	movw	r30, r24
    1564:	20 83       	st	Z, r18
    DDRA &= ~0xF0; // databus input
    1566:	8a e3       	ldi	r24, 0x3A	; 58
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	2a e3       	ldi	r18, 0x3A	; 58
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	f9 01       	movw	r30, r18
    1570:	20 81       	ld	r18, Z
    1572:	2f 70       	andi	r18, 0x0F	; 15
    1574:	fc 01       	movw	r30, r24
    1576:	20 83       	st	Z, r18
    PORTA |= 1<<_LCD_RW | 0xF0; // R/!W= 1 (Read) and Pullup inputs 
    1578:	8b e3       	ldi	r24, 0x3B	; 59
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	2b e3       	ldi	r18, 0x3B	; 59
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	f9 01       	movw	r30, r18
    1582:	20 81       	ld	r18, Z
    1584:	24 6f       	ori	r18, 0xF4	; 244
    1586:	fc 01       	movw	r30, r24
    1588:	20 83       	st	Z, r18
    PORTA &= ~(1<<_LCD_RS); // RS=0
    158a:	8b e3       	ldi	r24, 0x3B	; 59
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	2b e3       	ldi	r18, 0x3B	; 59
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	f9 01       	movw	r30, r18
    1594:	20 81       	ld	r18, Z
    1596:	27 7f       	andi	r18, 0xF7	; 247
    1598:	fc 01       	movw	r30, r24
    159a:	20 83       	st	Z, r18
    _lcd_delay_us_small(2);
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	0e 94 87 0a 	call	0x150e	; 0x150e <_Z12_lcd_delay_8h>
    PORTA |= 1<<_LCD_E; // E=1
    15a2:	8b e3       	ldi	r24, 0x3B	; 59
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	2b e3       	ldi	r18, 0x3B	; 59
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	f9 01       	movw	r30, r18
    15ac:	20 81       	ld	r18, Z
    15ae:	22 60       	ori	r18, 0x02	; 2
    15b0:	fc 01       	movw	r30, r24
    15b2:	20 83       	st	Z, r18
    _lcd_delay_us_small(1);
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	0e 94 87 0a 	call	0x150e	; 0x150e <_Z12_lcd_delay_8h>
    command = PINA & 0xF0; // read high nibble
    15ba:	89 e3       	ldi	r24, 0x39	; 57
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	fc 01       	movw	r30, r24
    15c0:	80 81       	ld	r24, Z
    15c2:	80 7f       	andi	r24, 0xF0	; 240
    15c4:	89 83       	std	Y+1, r24	; 0x01
    PORTA &= ~(1<<_LCD_E); // E=0
    15c6:	8b e3       	ldi	r24, 0x3B	; 59
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	2b e3       	ldi	r18, 0x3B	; 59
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	f9 01       	movw	r30, r18
    15d0:	20 81       	ld	r18, Z
    15d2:	2d 7f       	andi	r18, 0xFD	; 253
    15d4:	fc 01       	movw	r30, r24
    15d6:	20 83       	st	Z, r18
    _lcd_delay_us_small(2);
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	0e 94 87 0a 	call	0x150e	; 0x150e <_Z12_lcd_delay_8h>
    PORTA |= 1<<_LCD_E; // E=1
    15de:	8b e3       	ldi	r24, 0x3B	; 59
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	2b e3       	ldi	r18, 0x3B	; 59
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	f9 01       	movw	r30, r18
    15e8:	20 81       	ld	r18, Z
    15ea:	22 60       	ori	r18, 0x02	; 2
    15ec:	fc 01       	movw	r30, r24
    15ee:	20 83       	st	Z, r18
    _lcd_delay_us_small(1);
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	0e 94 87 0a 	call	0x150e	; 0x150e <_Z12_lcd_delay_8h>
    command |= PINA >> 4; // read low nibble
    15f6:	89 e3       	ldi	r24, 0x39	; 57
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	fc 01       	movw	r30, r24
    15fc:	80 81       	ld	r24, Z
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	95 95       	asr	r25
    1604:	87 95       	ror	r24
    1606:	95 95       	asr	r25
    1608:	87 95       	ror	r24
    160a:	95 95       	asr	r25
    160c:	87 95       	ror	r24
    160e:	95 95       	asr	r25
    1610:	87 95       	ror	r24
    1612:	29 81       	ldd	r18, Y+1	; 0x01
    1614:	22 2f       	mov	r18, r18
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	82 2b       	or	r24, r18
    161a:	93 2b       	or	r25, r19
    161c:	89 83       	std	Y+1, r24	; 0x01
    PORTA &= ~(1<<_LCD_E); // E=0
    161e:	8b e3       	ldi	r24, 0x3B	; 59
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	2b e3       	ldi	r18, 0x3B	; 59
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	f9 01       	movw	r30, r18
    1628:	20 81       	ld	r18, Z
    162a:	2d 7f       	andi	r18, 0xFD	; 253
    162c:	fc 01       	movw	r30, r24
    162e:	20 83       	st	Z, r18
    return command;
    1630:	89 81       	ldd	r24, Y+1	; 0x01
}
    1632:	0f 90       	pop	r0
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	08 95       	ret

0000163a <_ZL4waitv>:
    data |= PINA>>4;
    PORTA &= ~(1<<_LCD_E);
    return data;
}

static void wait(void) {
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    while (lcd_read_command() & 0x80);
    1642:	00 00       	nop
    1644:	0e 94 a5 0a 	call	0x154a	; 0x154a <_Z16lcd_read_commandv>
    1648:	88 1f       	adc	r24, r24
    164a:	88 27       	eor	r24, r24
    164c:	88 1f       	adc	r24, r24
    164e:	88 23       	and	r24, r24
    1650:	c9 f7       	brne	.-14     	; 0x1644 <_ZL4waitv+0xa>
}
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <_ZL11pos_pulse_Ev>:
    
static void pos_pulse_E(void) {
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    _lcd_delay_us_small(2);
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	0e 94 87 0a 	call	0x150e	; 0x150e <_Z12_lcd_delay_8h>
    PORTA |= 1<<_LCD_E; // E=1
    1666:	8b e3       	ldi	r24, 0x3B	; 59
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	2b e3       	ldi	r18, 0x3B	; 59
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	f9 01       	movw	r30, r18
    1670:	20 81       	ld	r18, Z
    1672:	22 60       	ori	r18, 0x02	; 2
    1674:	fc 01       	movw	r30, r24
    1676:	20 83       	st	Z, r18
    _lcd_delay_us_small(1);
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	0e 94 87 0a 	call	0x150e	; 0x150e <_Z12_lcd_delay_8h>
    PORTA &= ~(1<<_LCD_E); // E=0
    167e:	8b e3       	ldi	r24, 0x3B	; 59
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	2b e3       	ldi	r18, 0x3B	; 59
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	f9 01       	movw	r30, r18
    1688:	20 81       	ld	r18, Z
    168a:	2d 7f       	andi	r18, 0xFD	; 253
    168c:	fc 01       	movw	r30, r24
    168e:	20 83       	st	Z, r18
}
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	08 95       	ret

00001696 <_Z17lcd_write_commandh>:

void lcd_write_command(uint8_t command) {
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	1f 92       	push	r1
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	89 83       	std	Y+1, r24	; 0x01
    wait();
    16a2:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZL4waitv>
    DDRA |= 1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0; // controlbus and databus output
    16a6:	8a e3       	ldi	r24, 0x3A	; 58
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	2a e3       	ldi	r18, 0x3A	; 58
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	f9 01       	movw	r30, r18
    16b0:	20 81       	ld	r18, Z
    16b2:	2e 6f       	ori	r18, 0xFE	; 254
    16b4:	fc 01       	movw	r30, r24
    16b6:	20 83       	st	Z, r18
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0);
    16b8:	8b e3       	ldi	r24, 0x3B	; 59
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	2b e3       	ldi	r18, 0x3B	; 59
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	f9 01       	movw	r30, r18
    16c2:	20 81       	ld	r18, Z
    16c4:	21 70       	andi	r18, 0x01	; 1
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 83       	st	Z, r18
    PORTA |= command & 0xF0; // all control signals low RS=0 R/!W=0
    16ca:	8b e3       	ldi	r24, 0x3B	; 59
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	2b e3       	ldi	r18, 0x3B	; 59
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	f9 01       	movw	r30, r18
    16d4:	20 81       	ld	r18, Z
    16d6:	32 2f       	mov	r19, r18
    16d8:	29 81       	ldd	r18, Y+1	; 0x01
    16da:	20 7f       	andi	r18, 0xF0	; 240
    16dc:	23 2b       	or	r18, r19
    16de:	fc 01       	movw	r30, r24
    16e0:	20 83       	st	Z, r18
    pos_pulse_E();// write high nibble
    16e2:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZL11pos_pulse_Ev>
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0);
    16e6:	8b e3       	ldi	r24, 0x3B	; 59
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	2b e3       	ldi	r18, 0x3B	; 59
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	f9 01       	movw	r30, r18
    16f0:	20 81       	ld	r18, Z
    16f2:	21 70       	andi	r18, 0x01	; 1
    16f4:	fc 01       	movw	r30, r24
    16f6:	20 83       	st	Z, r18
    PORTA |= command << 4; // all control signals low RS=0 R/!W=0
    16f8:	8b e3       	ldi	r24, 0x3B	; 59
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	2b e3       	ldi	r18, 0x3B	; 59
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	f9 01       	movw	r30, r18
    1702:	20 81       	ld	r18, Z
    1704:	42 2f       	mov	r20, r18
    1706:	29 81       	ldd	r18, Y+1	; 0x01
    1708:	22 2f       	mov	r18, r18
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	22 95       	swap	r18
    170e:	32 95       	swap	r19
    1710:	30 7f       	andi	r19, 0xF0	; 240
    1712:	32 27       	eor	r19, r18
    1714:	20 7f       	andi	r18, 0xF0	; 240
    1716:	32 27       	eor	r19, r18
    1718:	24 2b       	or	r18, r20
    171a:	fc 01       	movw	r30, r24
    171c:	20 83       	st	Z, r18
    pos_pulse_E();// write low nibble
    171e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZL11pos_pulse_Ev>
}
    1722:	0f 90       	pop	r0
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	08 95       	ret

0000172a <_Z14lcd_write_datah>:

void lcd_write_data(uint8_t data) {
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	1f 92       	push	r1
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	89 83       	std	Y+1, r24	; 0x01
    wait();
    1736:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZL4waitv>
    DDRA |= 1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0;
    173a:	8a e3       	ldi	r24, 0x3A	; 58
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	2a e3       	ldi	r18, 0x3A	; 58
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	f9 01       	movw	r30, r18
    1744:	20 81       	ld	r18, Z
    1746:	2e 6f       	ori	r18, 0xFE	; 254
    1748:	fc 01       	movw	r30, r24
    174a:	20 83       	st	Z, r18
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0);
    174c:	8b e3       	ldi	r24, 0x3B	; 59
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	2b e3       	ldi	r18, 0x3B	; 59
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	f9 01       	movw	r30, r18
    1756:	20 81       	ld	r18, Z
    1758:	21 70       	andi	r18, 0x01	; 1
    175a:	fc 01       	movw	r30, r24
    175c:	20 83       	st	Z, r18
    PORTA |= (data & 0xF0) | 1<<_LCD_RS; // RS=1 other control signals 0 R/!W=0
    175e:	8b e3       	ldi	r24, 0x3B	; 59
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	2b e3       	ldi	r18, 0x3B	; 59
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	f9 01       	movw	r30, r18
    1768:	30 81       	ld	r19, Z
    176a:	29 81       	ldd	r18, Y+1	; 0x01
    176c:	20 7f       	andi	r18, 0xF0	; 240
    176e:	23 2b       	or	r18, r19
    1770:	28 60       	ori	r18, 0x08	; 8
    1772:	fc 01       	movw	r30, r24
    1774:	20 83       	st	Z, r18
    pos_pulse_E();
    1776:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZL11pos_pulse_Ev>
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0);
    177a:	8b e3       	ldi	r24, 0x3B	; 59
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	2b e3       	ldi	r18, 0x3B	; 59
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	f9 01       	movw	r30, r18
    1784:	20 81       	ld	r18, Z
    1786:	21 70       	andi	r18, 0x01	; 1
    1788:	fc 01       	movw	r30, r24
    178a:	20 83       	st	Z, r18
    PORTA |= (data << 4) | 1<<_LCD_RS;
    178c:	8b e3       	ldi	r24, 0x3B	; 59
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	2b e3       	ldi	r18, 0x3B	; 59
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	f9 01       	movw	r30, r18
    1796:	40 81       	ld	r20, Z
    1798:	29 81       	ldd	r18, Y+1	; 0x01
    179a:	22 2f       	mov	r18, r18
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	22 95       	swap	r18
    17a0:	32 95       	swap	r19
    17a2:	30 7f       	andi	r19, 0xF0	; 240
    17a4:	32 27       	eor	r19, r18
    17a6:	20 7f       	andi	r18, 0xF0	; 240
    17a8:	32 27       	eor	r19, r18
    17aa:	24 2b       	or	r18, r20
    17ac:	28 60       	ori	r18, 0x08	; 8
    17ae:	fc 01       	movw	r30, r24
    17b0:	20 83       	st	Z, r18
    pos_pulse_E();
    17b2:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZL11pos_pulse_Ev>
}
    17b6:	0f 90       	pop	r0
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

000017be <_Z8lcd_initv>:

void lcd_init(void) {
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    DDRA |= 1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0;
    17c6:	8a e3       	ldi	r24, 0x3A	; 58
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	2a e3       	ldi	r18, 0x3A	; 58
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	f9 01       	movw	r30, r18
    17d0:	20 81       	ld	r18, Z
    17d2:	2e 6f       	ori	r18, 0xFE	; 254
    17d4:	fc 01       	movw	r30, r24
    17d6:	20 83       	st	Z, r18
    _lcd_delay_us(15000);
    17d8:	8e ef       	ldi	r24, 0xFE	; 254
    17da:	95 e3       	ldi	r25, 0x35	; 53
    17dc:	0e 94 94 0a 	call	0x1528	; 0x1528 <_Z13_lcd_delay_16j>
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0); 
    17e0:	8b e3       	ldi	r24, 0x3B	; 59
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	2b e3       	ldi	r18, 0x3B	; 59
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	f9 01       	movw	r30, r18
    17ea:	20 81       	ld	r18, Z
    17ec:	21 70       	andi	r18, 0x01	; 1
    17ee:	fc 01       	movw	r30, r24
    17f0:	20 83       	st	Z, r18
    PORTA |= 0x30; // all control signals low RS=0 R/!W=0
    17f2:	8b e3       	ldi	r24, 0x3B	; 59
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	2b e3       	ldi	r18, 0x3B	; 59
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	f9 01       	movw	r30, r18
    17fc:	20 81       	ld	r18, Z
    17fe:	20 63       	ori	r18, 0x30	; 48
    1800:	fc 01       	movw	r30, r24
    1802:	20 83       	st	Z, r18
    pos_pulse_E(); 
    1804:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZL11pos_pulse_Ev>
    _lcd_delay_us(4100);
    1808:	82 ec       	ldi	r24, 0xC2	; 194
    180a:	9e e0       	ldi	r25, 0x0E	; 14
    180c:	0e 94 94 0a 	call	0x1528	; 0x1528 <_Z13_lcd_delay_16j>
    pos_pulse_E(); 
    1810:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZL11pos_pulse_Ev>
    _lcd_delay_us(100);
    1814:	8c e5       	ldi	r24, 0x5C	; 92
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	0e 94 94 0a 	call	0x1528	; 0x1528 <_Z13_lcd_delay_16j>
    pos_pulse_E(); 
    181c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZL11pos_pulse_Ev>
    _lcd_delay_us(100);
    1820:	8c e5       	ldi	r24, 0x5C	; 92
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 94 0a 	call	0x1528	; 0x1528 <_Z13_lcd_delay_16j>
    PORTA &= ~0x10; 
    1828:	8b e3       	ldi	r24, 0x3B	; 59
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	2b e3       	ldi	r18, 0x3B	; 59
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	f9 01       	movw	r30, r18
    1832:	20 81       	ld	r18, Z
    1834:	2f 7e       	andi	r18, 0xEF	; 239
    1836:	fc 01       	movw	r30, r24
    1838:	20 83       	st	Z, r18
    pos_pulse_E(); 
    183a:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZL11pos_pulse_Ev>
    _lcd_delay_us(100);
    183e:	8c e5       	ldi	r24, 0x5C	; 92
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 94 0a 	call	0x1528	; 0x1528 <_Z13_lcd_delay_16j>
    lcd_write_command(0x28);
    1846:	88 e2       	ldi	r24, 0x28	; 40
    1848:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_Z17lcd_write_commandh>
    lcd_write_command(0x06);
    184c:	86 e0       	ldi	r24, 0x06	; 6
    184e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_Z17lcd_write_commandh>
    lcd_cls();
    1852:	0e 94 32 0c 	call	0x1864	; 0x1864 <_Z7lcd_clsv>
    lcd_cursor(true, true);
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	0e 94 46 0c 	call	0x188c	; 0x188c <_Z10lcd_cursorbb>
}
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	08 95       	ret

00001864 <_Z7lcd_clsv>:

void lcd_cls(void) {
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    lcd_write_command(0x01);
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_Z17lcd_write_commandh>
}
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	08 95       	ret

00001878 <_Z8lcd_homev>:

void lcd_home(void) {
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    lcd_write_command(0x02);
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_Z17lcd_write_commandh>
}
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	08 95       	ret

0000188c <_Z10lcd_cursorbb>:

void lcd_cursor(bool cursorOn, bool cursorBlinks) { 
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	00 d0       	rcall	.+0      	; 0x1892 <_Z10lcd_cursorbb+0x6>
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	6a 83       	std	Y+2, r22	; 0x02
    lcd_write_command(0x0C + (cursorOn ? 0x02 : 0) + (cursorBlinks ? 0x01 : 0));
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	88 23       	and	r24, r24
    189e:	11 f0       	breq	.+4      	; 0x18a4 <_Z10lcd_cursorbb+0x18>
    18a0:	9e e0       	ldi	r25, 0x0E	; 14
    18a2:	01 c0       	rjmp	.+2      	; 0x18a6 <_Z10lcd_cursorbb+0x1a>
    18a4:	9c e0       	ldi	r25, 0x0C	; 12
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	88 23       	and	r24, r24
    18aa:	11 f0       	breq	.+4      	; 0x18b0 <_Z10lcd_cursorbb+0x24>
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <_Z10lcd_cursorbb+0x26>
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	89 0f       	add	r24, r25
    18b4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_Z17lcd_write_commandh>
}
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <_Z8lcd_gotohh>:

void lcd_goto(uint8_t row, uint8_t column) {
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <_Z8lcd_gotohh+0x6>
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	6a 83       	std	Y+2, r22	; 0x02
    if (row < 2 && column < 16) {
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	82 30       	cpi	r24, 0x02	; 2
    18d4:	80 f4       	brcc	.+32     	; 0x18f6 <_Z8lcd_gotohh+0x34>
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	80 31       	cpi	r24, 0x10	; 16
    18da:	68 f4       	brcc	.+26     	; 0x18f6 <_Z8lcd_gotohh+0x34>
        lcd_write_command(0x80 + row * 0x40 + column);
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	02 96       	adiw	r24, 0x02	; 2
    18e4:	98 2f       	mov	r25, r24
    18e6:	92 95       	swap	r25
    18e8:	99 0f       	add	r25, r25
    18ea:	99 0f       	add	r25, r25
    18ec:	90 7c       	andi	r25, 0xC0	; 192
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	89 0f       	add	r24, r25
    18f2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_Z17lcd_write_commandh>
    }
}
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	08 95       	ret

00001900 <_Z11lcd_get_rowv>:

uint8_t lcd_get_row(void) {
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    wait();
    1908:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZL4waitv>
    return lcd_read_command() & 1<<6 ? 1 : 0;
    190c:	0e 94 a5 0a 	call	0x154a	; 0x154a <_Z16lcd_read_commandv>
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	80 74       	andi	r24, 0x40	; 64
    1916:	99 27       	eor	r25, r25
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	11 f0       	breq	.+4      	; 0x1920 <_Z11lcd_get_rowv+0x20>
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <_Z11lcd_get_rowv+0x22>
    1920:	80 e0       	ldi	r24, 0x00	; 0
}
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	08 95       	ret

00001928 <_Z14lcd_get_columnv>:

uint8_t lcd_get_column(void) {
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    wait();
    1930:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZL4waitv>
    return lcd_read_command() & 0x3f;
    1934:	0e 94 a5 0a 	call	0x154a	; 0x154a <_Z16lcd_read_commandv>
    1938:	8f 73       	andi	r24, 0x3F	; 63
}
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <_Z8lcd_putcc>:

void lcd_putc(char data) { 
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	1f 92       	push	r1
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	89 83       	std	Y+1, r24	; 0x01
    lcd_write_data(data);
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z14lcd_write_datah>
}
    1952:	0f 90       	pop	r0
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	08 95       	ret

0000195a <_Z8lcd_putsPc>:

void lcd_puts(char *s) {
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	00 d0       	rcall	.+0      	; 0x1960 <_Z8lcd_putsPc+0x6>
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	89 83       	std	Y+1, r24	; 0x01
    while (*s) {
    1968:	0b c0       	rjmp	.+22     	; 0x1980 <_Z8lcd_putsPc+0x26>
        lcd_putc(*s++);
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	9c 01       	movw	r18, r24
    1970:	2f 5f       	subi	r18, 0xFF	; 255
    1972:	3f 4f       	sbci	r19, 0xFF	; 255
    1974:	3a 83       	std	Y+2, r19	; 0x02
    1976:	29 83       	std	Y+1, r18	; 0x01
    1978:	fc 01       	movw	r30, r24
    197a:	80 81       	ld	r24, Z
    197c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_Z8lcd_putcc>
void lcd_putc(char data) { 
    lcd_write_data(data);
}

void lcd_puts(char *s) {
    while (*s) {
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	fc 01       	movw	r30, r24
    1986:	80 81       	ld	r24, Z
    1988:	88 23       	and	r24, r24
    198a:	79 f7       	brne	.-34     	; 0x196a <_Z8lcd_putsPc+0x10>
        lcd_putc(*s++);
    }
}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	08 95       	ret

00001996 <__cmpsf2>:
    1996:	2f d0       	rcall	.+94     	; 0x19f6 <__fp_cmp>
    1998:	08 f4       	brcc	.+2      	; 0x199c <__cmpsf2+0x6>
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	08 95       	ret

0000199e <__fixunssfsi>:
    199e:	57 d0       	rcall	.+174    	; 0x1a4e <__fp_splitA>
    19a0:	88 f0       	brcs	.+34     	; 0x19c4 <__fixunssfsi+0x26>
    19a2:	9f 57       	subi	r25, 0x7F	; 127
    19a4:	90 f0       	brcs	.+36     	; 0x19ca <__fixunssfsi+0x2c>
    19a6:	b9 2f       	mov	r27, r25
    19a8:	99 27       	eor	r25, r25
    19aa:	b7 51       	subi	r27, 0x17	; 23
    19ac:	a0 f0       	brcs	.+40     	; 0x19d6 <__fixunssfsi+0x38>
    19ae:	d1 f0       	breq	.+52     	; 0x19e4 <__fixunssfsi+0x46>
    19b0:	66 0f       	add	r22, r22
    19b2:	77 1f       	adc	r23, r23
    19b4:	88 1f       	adc	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	1a f0       	brmi	.+6      	; 0x19c0 <__fixunssfsi+0x22>
    19ba:	ba 95       	dec	r27
    19bc:	c9 f7       	brne	.-14     	; 0x19b0 <__fixunssfsi+0x12>
    19be:	12 c0       	rjmp	.+36     	; 0x19e4 <__fixunssfsi+0x46>
    19c0:	b1 30       	cpi	r27, 0x01	; 1
    19c2:	81 f0       	breq	.+32     	; 0x19e4 <__fixunssfsi+0x46>
    19c4:	5e d0       	rcall	.+188    	; 0x1a82 <__fp_zero>
    19c6:	b1 e0       	ldi	r27, 0x01	; 1
    19c8:	08 95       	ret
    19ca:	5b c0       	rjmp	.+182    	; 0x1a82 <__fp_zero>
    19cc:	67 2f       	mov	r22, r23
    19ce:	78 2f       	mov	r23, r24
    19d0:	88 27       	eor	r24, r24
    19d2:	b8 5f       	subi	r27, 0xF8	; 248
    19d4:	39 f0       	breq	.+14     	; 0x19e4 <__fixunssfsi+0x46>
    19d6:	b9 3f       	cpi	r27, 0xF9	; 249
    19d8:	cc f3       	brlt	.-14     	; 0x19cc <__fixunssfsi+0x2e>
    19da:	86 95       	lsr	r24
    19dc:	77 95       	ror	r23
    19de:	67 95       	ror	r22
    19e0:	b3 95       	inc	r27
    19e2:	d9 f7       	brne	.-10     	; 0x19da <__fixunssfsi+0x3c>
    19e4:	3e f4       	brtc	.+14     	; 0x19f4 <__fixunssfsi+0x56>
    19e6:	90 95       	com	r25
    19e8:	80 95       	com	r24
    19ea:	70 95       	com	r23
    19ec:	61 95       	neg	r22
    19ee:	7f 4f       	sbci	r23, 0xFF	; 255
    19f0:	8f 4f       	sbci	r24, 0xFF	; 255
    19f2:	9f 4f       	sbci	r25, 0xFF	; 255
    19f4:	08 95       	ret

000019f6 <__fp_cmp>:
    19f6:	99 0f       	add	r25, r25
    19f8:	00 08       	sbc	r0, r0
    19fa:	55 0f       	add	r21, r21
    19fc:	aa 0b       	sbc	r26, r26
    19fe:	e0 e8       	ldi	r30, 0x80	; 128
    1a00:	fe ef       	ldi	r31, 0xFE	; 254
    1a02:	16 16       	cp	r1, r22
    1a04:	17 06       	cpc	r1, r23
    1a06:	e8 07       	cpc	r30, r24
    1a08:	f9 07       	cpc	r31, r25
    1a0a:	c0 f0       	brcs	.+48     	; 0x1a3c <__fp_cmp+0x46>
    1a0c:	12 16       	cp	r1, r18
    1a0e:	13 06       	cpc	r1, r19
    1a10:	e4 07       	cpc	r30, r20
    1a12:	f5 07       	cpc	r31, r21
    1a14:	98 f0       	brcs	.+38     	; 0x1a3c <__fp_cmp+0x46>
    1a16:	62 1b       	sub	r22, r18
    1a18:	73 0b       	sbc	r23, r19
    1a1a:	84 0b       	sbc	r24, r20
    1a1c:	95 0b       	sbc	r25, r21
    1a1e:	39 f4       	brne	.+14     	; 0x1a2e <__fp_cmp+0x38>
    1a20:	0a 26       	eor	r0, r26
    1a22:	61 f0       	breq	.+24     	; 0x1a3c <__fp_cmp+0x46>
    1a24:	23 2b       	or	r18, r19
    1a26:	24 2b       	or	r18, r20
    1a28:	25 2b       	or	r18, r21
    1a2a:	21 f4       	brne	.+8      	; 0x1a34 <__fp_cmp+0x3e>
    1a2c:	08 95       	ret
    1a2e:	0a 26       	eor	r0, r26
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <__fp_cmp+0x3e>
    1a32:	a1 40       	sbci	r26, 0x01	; 1
    1a34:	a6 95       	lsr	r26
    1a36:	8f ef       	ldi	r24, 0xFF	; 255
    1a38:	81 1d       	adc	r24, r1
    1a3a:	81 1d       	adc	r24, r1
    1a3c:	08 95       	ret

00001a3e <__fp_split3>:
    1a3e:	57 fd       	sbrc	r21, 7
    1a40:	90 58       	subi	r25, 0x80	; 128
    1a42:	44 0f       	add	r20, r20
    1a44:	55 1f       	adc	r21, r21
    1a46:	59 f0       	breq	.+22     	; 0x1a5e <__fp_splitA+0x10>
    1a48:	5f 3f       	cpi	r21, 0xFF	; 255
    1a4a:	71 f0       	breq	.+28     	; 0x1a68 <__fp_splitA+0x1a>
    1a4c:	47 95       	ror	r20

00001a4e <__fp_splitA>:
    1a4e:	88 0f       	add	r24, r24
    1a50:	97 fb       	bst	r25, 7
    1a52:	99 1f       	adc	r25, r25
    1a54:	61 f0       	breq	.+24     	; 0x1a6e <__fp_splitA+0x20>
    1a56:	9f 3f       	cpi	r25, 0xFF	; 255
    1a58:	79 f0       	breq	.+30     	; 0x1a78 <__fp_splitA+0x2a>
    1a5a:	87 95       	ror	r24
    1a5c:	08 95       	ret
    1a5e:	12 16       	cp	r1, r18
    1a60:	13 06       	cpc	r1, r19
    1a62:	14 06       	cpc	r1, r20
    1a64:	55 1f       	adc	r21, r21
    1a66:	f2 cf       	rjmp	.-28     	; 0x1a4c <__fp_split3+0xe>
    1a68:	46 95       	lsr	r20
    1a6a:	f1 df       	rcall	.-30     	; 0x1a4e <__fp_splitA>
    1a6c:	08 c0       	rjmp	.+16     	; 0x1a7e <__fp_splitA+0x30>
    1a6e:	16 16       	cp	r1, r22
    1a70:	17 06       	cpc	r1, r23
    1a72:	18 06       	cpc	r1, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	f1 cf       	rjmp	.-30     	; 0x1a5a <__fp_splitA+0xc>
    1a78:	86 95       	lsr	r24
    1a7a:	71 05       	cpc	r23, r1
    1a7c:	61 05       	cpc	r22, r1
    1a7e:	08 94       	sec
    1a80:	08 95       	ret

00001a82 <__fp_zero>:
    1a82:	e8 94       	clt

00001a84 <__fp_szero>:
    1a84:	bb 27       	eor	r27, r27
    1a86:	66 27       	eor	r22, r22
    1a88:	77 27       	eor	r23, r23
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	97 f9       	bld	r25, 7
    1a8e:	08 95       	ret

00001a90 <__gesf2>:
    1a90:	b2 df       	rcall	.-156    	; 0x19f6 <__fp_cmp>
    1a92:	08 f4       	brcc	.+2      	; 0x1a96 <__gesf2+0x6>
    1a94:	8f ef       	ldi	r24, 0xFF	; 255
    1a96:	08 95       	ret

00001a98 <__mulsf3>:
    1a98:	0b d0       	rcall	.+22     	; 0x1ab0 <__mulsf3x>
    1a9a:	78 c0       	rjmp	.+240    	; 0x1b8c <__fp_round>
    1a9c:	69 d0       	rcall	.+210    	; 0x1b70 <__fp_pscA>
    1a9e:	28 f0       	brcs	.+10     	; 0x1aaa <__mulsf3+0x12>
    1aa0:	6e d0       	rcall	.+220    	; 0x1b7e <__fp_pscB>
    1aa2:	18 f0       	brcs	.+6      	; 0x1aaa <__mulsf3+0x12>
    1aa4:	95 23       	and	r25, r21
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <__mulsf3+0x12>
    1aa8:	5a c0       	rjmp	.+180    	; 0x1b5e <__fp_inf>
    1aaa:	5f c0       	rjmp	.+190    	; 0x1b6a <__fp_nan>
    1aac:	11 24       	eor	r1, r1
    1aae:	ea cf       	rjmp	.-44     	; 0x1a84 <__fp_szero>

00001ab0 <__mulsf3x>:
    1ab0:	c6 df       	rcall	.-116    	; 0x1a3e <__fp_split3>
    1ab2:	a0 f3       	brcs	.-24     	; 0x1a9c <__mulsf3+0x4>

00001ab4 <__mulsf3_pse>:
    1ab4:	95 9f       	mul	r25, r21
    1ab6:	d1 f3       	breq	.-12     	; 0x1aac <__mulsf3+0x14>
    1ab8:	95 0f       	add	r25, r21
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	55 1f       	adc	r21, r21
    1abe:	62 9f       	mul	r22, r18
    1ac0:	f0 01       	movw	r30, r0
    1ac2:	72 9f       	mul	r23, r18
    1ac4:	bb 27       	eor	r27, r27
    1ac6:	f0 0d       	add	r31, r0
    1ac8:	b1 1d       	adc	r27, r1
    1aca:	63 9f       	mul	r22, r19
    1acc:	aa 27       	eor	r26, r26
    1ace:	f0 0d       	add	r31, r0
    1ad0:	b1 1d       	adc	r27, r1
    1ad2:	aa 1f       	adc	r26, r26
    1ad4:	64 9f       	mul	r22, r20
    1ad6:	66 27       	eor	r22, r22
    1ad8:	b0 0d       	add	r27, r0
    1ada:	a1 1d       	adc	r26, r1
    1adc:	66 1f       	adc	r22, r22
    1ade:	82 9f       	mul	r24, r18
    1ae0:	22 27       	eor	r18, r18
    1ae2:	b0 0d       	add	r27, r0
    1ae4:	a1 1d       	adc	r26, r1
    1ae6:	62 1f       	adc	r22, r18
    1ae8:	73 9f       	mul	r23, r19
    1aea:	b0 0d       	add	r27, r0
    1aec:	a1 1d       	adc	r26, r1
    1aee:	62 1f       	adc	r22, r18
    1af0:	83 9f       	mul	r24, r19
    1af2:	a0 0d       	add	r26, r0
    1af4:	61 1d       	adc	r22, r1
    1af6:	22 1f       	adc	r18, r18
    1af8:	74 9f       	mul	r23, r20
    1afa:	33 27       	eor	r19, r19
    1afc:	a0 0d       	add	r26, r0
    1afe:	61 1d       	adc	r22, r1
    1b00:	23 1f       	adc	r18, r19
    1b02:	84 9f       	mul	r24, r20
    1b04:	60 0d       	add	r22, r0
    1b06:	21 1d       	adc	r18, r1
    1b08:	82 2f       	mov	r24, r18
    1b0a:	76 2f       	mov	r23, r22
    1b0c:	6a 2f       	mov	r22, r26
    1b0e:	11 24       	eor	r1, r1
    1b10:	9f 57       	subi	r25, 0x7F	; 127
    1b12:	50 40       	sbci	r21, 0x00	; 0
    1b14:	8a f0       	brmi	.+34     	; 0x1b38 <__mulsf3_pse+0x84>
    1b16:	e1 f0       	breq	.+56     	; 0x1b50 <__mulsf3_pse+0x9c>
    1b18:	88 23       	and	r24, r24
    1b1a:	4a f0       	brmi	.+18     	; 0x1b2e <__mulsf3_pse+0x7a>
    1b1c:	ee 0f       	add	r30, r30
    1b1e:	ff 1f       	adc	r31, r31
    1b20:	bb 1f       	adc	r27, r27
    1b22:	66 1f       	adc	r22, r22
    1b24:	77 1f       	adc	r23, r23
    1b26:	88 1f       	adc	r24, r24
    1b28:	91 50       	subi	r25, 0x01	; 1
    1b2a:	50 40       	sbci	r21, 0x00	; 0
    1b2c:	a9 f7       	brne	.-22     	; 0x1b18 <__mulsf3_pse+0x64>
    1b2e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b30:	51 05       	cpc	r21, r1
    1b32:	70 f0       	brcs	.+28     	; 0x1b50 <__mulsf3_pse+0x9c>
    1b34:	14 c0       	rjmp	.+40     	; 0x1b5e <__fp_inf>
    1b36:	a6 cf       	rjmp	.-180    	; 0x1a84 <__fp_szero>
    1b38:	5f 3f       	cpi	r21, 0xFF	; 255
    1b3a:	ec f3       	brlt	.-6      	; 0x1b36 <__mulsf3_pse+0x82>
    1b3c:	98 3e       	cpi	r25, 0xE8	; 232
    1b3e:	dc f3       	brlt	.-10     	; 0x1b36 <__mulsf3_pse+0x82>
    1b40:	86 95       	lsr	r24
    1b42:	77 95       	ror	r23
    1b44:	67 95       	ror	r22
    1b46:	b7 95       	ror	r27
    1b48:	f7 95       	ror	r31
    1b4a:	e7 95       	ror	r30
    1b4c:	9f 5f       	subi	r25, 0xFF	; 255
    1b4e:	c1 f7       	brne	.-16     	; 0x1b40 <__mulsf3_pse+0x8c>
    1b50:	fe 2b       	or	r31, r30
    1b52:	88 0f       	add	r24, r24
    1b54:	91 1d       	adc	r25, r1
    1b56:	96 95       	lsr	r25
    1b58:	87 95       	ror	r24
    1b5a:	97 f9       	bld	r25, 7
    1b5c:	08 95       	ret

00001b5e <__fp_inf>:
    1b5e:	97 f9       	bld	r25, 7
    1b60:	9f 67       	ori	r25, 0x7F	; 127
    1b62:	80 e8       	ldi	r24, 0x80	; 128
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	08 95       	ret

00001b6a <__fp_nan>:
    1b6a:	9f ef       	ldi	r25, 0xFF	; 255
    1b6c:	80 ec       	ldi	r24, 0xC0	; 192
    1b6e:	08 95       	ret

00001b70 <__fp_pscA>:
    1b70:	00 24       	eor	r0, r0
    1b72:	0a 94       	dec	r0
    1b74:	16 16       	cp	r1, r22
    1b76:	17 06       	cpc	r1, r23
    1b78:	18 06       	cpc	r1, r24
    1b7a:	09 06       	cpc	r0, r25
    1b7c:	08 95       	ret

00001b7e <__fp_pscB>:
    1b7e:	00 24       	eor	r0, r0
    1b80:	0a 94       	dec	r0
    1b82:	12 16       	cp	r1, r18
    1b84:	13 06       	cpc	r1, r19
    1b86:	14 06       	cpc	r1, r20
    1b88:	05 06       	cpc	r0, r21
    1b8a:	08 95       	ret

00001b8c <__fp_round>:
    1b8c:	09 2e       	mov	r0, r25
    1b8e:	03 94       	inc	r0
    1b90:	00 0c       	add	r0, r0
    1b92:	11 f4       	brne	.+4      	; 0x1b98 <__fp_round+0xc>
    1b94:	88 23       	and	r24, r24
    1b96:	52 f0       	brmi	.+20     	; 0x1bac <__fp_round+0x20>
    1b98:	bb 0f       	add	r27, r27
    1b9a:	40 f4       	brcc	.+16     	; 0x1bac <__fp_round+0x20>
    1b9c:	bf 2b       	or	r27, r31
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <__fp_round+0x18>
    1ba0:	60 ff       	sbrs	r22, 0
    1ba2:	04 c0       	rjmp	.+8      	; 0x1bac <__fp_round+0x20>
    1ba4:	6f 5f       	subi	r22, 0xFF	; 255
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    1baa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bac:	08 95       	ret

00001bae <__tablejump2__>:
    1bae:	ee 0f       	add	r30, r30
    1bb0:	ff 1f       	adc	r31, r31

00001bb2 <__tablejump__>:
    1bb2:	05 90       	lpm	r0, Z+
    1bb4:	f4 91       	lpm	r31, Z
    1bb6:	e0 2d       	mov	r30, r0
    1bb8:	09 94       	ijmp

00001bba <snprintf>:
    1bba:	ae e0       	ldi	r26, 0x0E	; 14
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e3 ee       	ldi	r30, 0xE3	; 227
    1bc0:	fd e0       	ldi	r31, 0x0D	; 13
    1bc2:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__prologue_saves__+0x1c>
    1bc6:	0d 89       	ldd	r16, Y+21	; 0x15
    1bc8:	1e 89       	ldd	r17, Y+22	; 0x16
    1bca:	8f 89       	ldd	r24, Y+23	; 0x17
    1bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bce:	26 e0       	ldi	r18, 0x06	; 6
    1bd0:	2c 83       	std	Y+4, r18	; 0x04
    1bd2:	1a 83       	std	Y+2, r17	; 0x02
    1bd4:	09 83       	std	Y+1, r16	; 0x01
    1bd6:	97 ff       	sbrs	r25, 7
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <snprintf+0x24>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e8       	ldi	r25, 0x80	; 128
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	ae 01       	movw	r20, r28
    1be6:	45 5e       	subi	r20, 0xE5	; 229
    1be8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bea:	69 8d       	ldd	r22, Y+25	; 0x19
    1bec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bee:	ce 01       	movw	r24, r28
    1bf0:	01 96       	adiw	r24, 0x01	; 1
    1bf2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <vfprintf>
    1bf6:	4d 81       	ldd	r20, Y+5	; 0x05
    1bf8:	5e 81       	ldd	r21, Y+6	; 0x06
    1bfa:	57 fd       	sbrc	r21, 7
    1bfc:	0a c0       	rjmp	.+20     	; 0x1c12 <snprintf+0x58>
    1bfe:	2f 81       	ldd	r18, Y+7	; 0x07
    1c00:	38 85       	ldd	r19, Y+8	; 0x08
    1c02:	42 17       	cp	r20, r18
    1c04:	53 07       	cpc	r21, r19
    1c06:	0c f4       	brge	.+2      	; 0x1c0a <snprintf+0x50>
    1c08:	9a 01       	movw	r18, r20
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	e2 0f       	add	r30, r18
    1c0e:	f3 1f       	adc	r31, r19
    1c10:	10 82       	st	Z, r1
    1c12:	2e 96       	adiw	r28, 0x0e	; 14
    1c14:	e4 e0       	ldi	r30, 0x04	; 4
    1c16:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__epilogue_restores__+0x1c>

00001c1a <vfprintf>:
    1c1a:	ac e0       	ldi	r26, 0x0C	; 12
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e3 e1       	ldi	r30, 0x13	; 19
    1c20:	fe e0       	ldi	r31, 0x0E	; 14
    1c22:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__prologue_saves__>
    1c26:	7c 01       	movw	r14, r24
    1c28:	6b 01       	movw	r12, r22
    1c2a:	8a 01       	movw	r16, r20
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	17 82       	std	Z+7, r1	; 0x07
    1c30:	16 82       	std	Z+6, r1	; 0x06
    1c32:	83 81       	ldd	r24, Z+3	; 0x03
    1c34:	81 ff       	sbrs	r24, 1
    1c36:	bd c1       	rjmp	.+890    	; 0x1fb2 <vfprintf+0x398>
    1c38:	ce 01       	movw	r24, r28
    1c3a:	01 96       	adiw	r24, 0x01	; 1
    1c3c:	4c 01       	movw	r8, r24
    1c3e:	f7 01       	movw	r30, r14
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	f6 01       	movw	r30, r12
    1c44:	93 fd       	sbrc	r25, 3
    1c46:	85 91       	lpm	r24, Z+
    1c48:	93 ff       	sbrs	r25, 3
    1c4a:	81 91       	ld	r24, Z+
    1c4c:	6f 01       	movw	r12, r30
    1c4e:	88 23       	and	r24, r24
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <vfprintf+0x3a>
    1c52:	ab c1       	rjmp	.+854    	; 0x1faa <vfprintf+0x390>
    1c54:	85 32       	cpi	r24, 0x25	; 37
    1c56:	39 f4       	brne	.+14     	; 0x1c66 <vfprintf+0x4c>
    1c58:	93 fd       	sbrc	r25, 3
    1c5a:	85 91       	lpm	r24, Z+
    1c5c:	93 ff       	sbrs	r25, 3
    1c5e:	81 91       	ld	r24, Z+
    1c60:	6f 01       	movw	r12, r30
    1c62:	85 32       	cpi	r24, 0x25	; 37
    1c64:	29 f4       	brne	.+10     	; 0x1c70 <vfprintf+0x56>
    1c66:	b7 01       	movw	r22, r14
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	0e 94 1c 10 	call	0x2038	; 0x2038 <fputc>
    1c6e:	e7 cf       	rjmp	.-50     	; 0x1c3e <vfprintf+0x24>
    1c70:	51 2c       	mov	r5, r1
    1c72:	31 2c       	mov	r3, r1
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	20 32       	cpi	r18, 0x20	; 32
    1c78:	a0 f4       	brcc	.+40     	; 0x1ca2 <vfprintf+0x88>
    1c7a:	8b 32       	cpi	r24, 0x2B	; 43
    1c7c:	69 f0       	breq	.+26     	; 0x1c98 <vfprintf+0x7e>
    1c7e:	30 f4       	brcc	.+12     	; 0x1c8c <vfprintf+0x72>
    1c80:	80 32       	cpi	r24, 0x20	; 32
    1c82:	59 f0       	breq	.+22     	; 0x1c9a <vfprintf+0x80>
    1c84:	83 32       	cpi	r24, 0x23	; 35
    1c86:	69 f4       	brne	.+26     	; 0x1ca2 <vfprintf+0x88>
    1c88:	20 61       	ori	r18, 0x10	; 16
    1c8a:	2c c0       	rjmp	.+88     	; 0x1ce4 <vfprintf+0xca>
    1c8c:	8d 32       	cpi	r24, 0x2D	; 45
    1c8e:	39 f0       	breq	.+14     	; 0x1c9e <vfprintf+0x84>
    1c90:	80 33       	cpi	r24, 0x30	; 48
    1c92:	39 f4       	brne	.+14     	; 0x1ca2 <vfprintf+0x88>
    1c94:	21 60       	ori	r18, 0x01	; 1
    1c96:	26 c0       	rjmp	.+76     	; 0x1ce4 <vfprintf+0xca>
    1c98:	22 60       	ori	r18, 0x02	; 2
    1c9a:	24 60       	ori	r18, 0x04	; 4
    1c9c:	23 c0       	rjmp	.+70     	; 0x1ce4 <vfprintf+0xca>
    1c9e:	28 60       	ori	r18, 0x08	; 8
    1ca0:	21 c0       	rjmp	.+66     	; 0x1ce4 <vfprintf+0xca>
    1ca2:	27 fd       	sbrc	r18, 7
    1ca4:	27 c0       	rjmp	.+78     	; 0x1cf4 <vfprintf+0xda>
    1ca6:	30 ed       	ldi	r19, 0xD0	; 208
    1ca8:	38 0f       	add	r19, r24
    1caa:	3a 30       	cpi	r19, 0x0A	; 10
    1cac:	78 f4       	brcc	.+30     	; 0x1ccc <vfprintf+0xb2>
    1cae:	26 ff       	sbrs	r18, 6
    1cb0:	06 c0       	rjmp	.+12     	; 0x1cbe <vfprintf+0xa4>
    1cb2:	fa e0       	ldi	r31, 0x0A	; 10
    1cb4:	5f 9e       	mul	r5, r31
    1cb6:	30 0d       	add	r19, r0
    1cb8:	11 24       	eor	r1, r1
    1cba:	53 2e       	mov	r5, r19
    1cbc:	13 c0       	rjmp	.+38     	; 0x1ce4 <vfprintf+0xca>
    1cbe:	8a e0       	ldi	r24, 0x0A	; 10
    1cc0:	38 9e       	mul	r3, r24
    1cc2:	30 0d       	add	r19, r0
    1cc4:	11 24       	eor	r1, r1
    1cc6:	33 2e       	mov	r3, r19
    1cc8:	20 62       	ori	r18, 0x20	; 32
    1cca:	0c c0       	rjmp	.+24     	; 0x1ce4 <vfprintf+0xca>
    1ccc:	8e 32       	cpi	r24, 0x2E	; 46
    1cce:	21 f4       	brne	.+8      	; 0x1cd8 <vfprintf+0xbe>
    1cd0:	26 fd       	sbrc	r18, 6
    1cd2:	6b c1       	rjmp	.+726    	; 0x1faa <vfprintf+0x390>
    1cd4:	20 64       	ori	r18, 0x40	; 64
    1cd6:	06 c0       	rjmp	.+12     	; 0x1ce4 <vfprintf+0xca>
    1cd8:	8c 36       	cpi	r24, 0x6C	; 108
    1cda:	11 f4       	brne	.+4      	; 0x1ce0 <vfprintf+0xc6>
    1cdc:	20 68       	ori	r18, 0x80	; 128
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <vfprintf+0xca>
    1ce0:	88 36       	cpi	r24, 0x68	; 104
    1ce2:	41 f4       	brne	.+16     	; 0x1cf4 <vfprintf+0xda>
    1ce4:	f6 01       	movw	r30, r12
    1ce6:	93 fd       	sbrc	r25, 3
    1ce8:	85 91       	lpm	r24, Z+
    1cea:	93 ff       	sbrs	r25, 3
    1cec:	81 91       	ld	r24, Z+
    1cee:	6f 01       	movw	r12, r30
    1cf0:	81 11       	cpse	r24, r1
    1cf2:	c1 cf       	rjmp	.-126    	; 0x1c76 <vfprintf+0x5c>
    1cf4:	98 2f       	mov	r25, r24
    1cf6:	9f 7d       	andi	r25, 0xDF	; 223
    1cf8:	95 54       	subi	r25, 0x45	; 69
    1cfa:	93 30       	cpi	r25, 0x03	; 3
    1cfc:	28 f4       	brcc	.+10     	; 0x1d08 <vfprintf+0xee>
    1cfe:	0c 5f       	subi	r16, 0xFC	; 252
    1d00:	1f 4f       	sbci	r17, 0xFF	; 255
    1d02:	ff e3       	ldi	r31, 0x3F	; 63
    1d04:	f9 83       	std	Y+1, r31	; 0x01
    1d06:	0d c0       	rjmp	.+26     	; 0x1d22 <vfprintf+0x108>
    1d08:	83 36       	cpi	r24, 0x63	; 99
    1d0a:	31 f0       	breq	.+12     	; 0x1d18 <vfprintf+0xfe>
    1d0c:	83 37       	cpi	r24, 0x73	; 115
    1d0e:	71 f0       	breq	.+28     	; 0x1d2c <vfprintf+0x112>
    1d10:	83 35       	cpi	r24, 0x53	; 83
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <vfprintf+0xfc>
    1d14:	5b c0       	rjmp	.+182    	; 0x1dcc <vfprintf+0x1b2>
    1d16:	22 c0       	rjmp	.+68     	; 0x1d5c <vfprintf+0x142>
    1d18:	f8 01       	movw	r30, r16
    1d1a:	80 81       	ld	r24, Z
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	0e 5f       	subi	r16, 0xFE	; 254
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
    1d22:	44 24       	eor	r4, r4
    1d24:	43 94       	inc	r4
    1d26:	51 2c       	mov	r5, r1
    1d28:	54 01       	movw	r10, r8
    1d2a:	15 c0       	rjmp	.+42     	; 0x1d56 <vfprintf+0x13c>
    1d2c:	38 01       	movw	r6, r16
    1d2e:	f2 e0       	ldi	r31, 0x02	; 2
    1d30:	6f 0e       	add	r6, r31
    1d32:	71 1c       	adc	r7, r1
    1d34:	f8 01       	movw	r30, r16
    1d36:	a0 80       	ld	r10, Z
    1d38:	b1 80       	ldd	r11, Z+1	; 0x01
    1d3a:	26 ff       	sbrs	r18, 6
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <vfprintf+0x12a>
    1d3e:	65 2d       	mov	r22, r5
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <vfprintf+0x12e>
    1d44:	6f ef       	ldi	r22, 0xFF	; 255
    1d46:	7f ef       	ldi	r23, 0xFF	; 255
    1d48:	c5 01       	movw	r24, r10
    1d4a:	2c 87       	std	Y+12, r18	; 0x0c
    1d4c:	0e 94 11 10 	call	0x2022	; 0x2022 <strnlen>
    1d50:	2c 01       	movw	r4, r24
    1d52:	83 01       	movw	r16, r6
    1d54:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d56:	2f 77       	andi	r18, 0x7F	; 127
    1d58:	22 2e       	mov	r2, r18
    1d5a:	17 c0       	rjmp	.+46     	; 0x1d8a <vfprintf+0x170>
    1d5c:	38 01       	movw	r6, r16
    1d5e:	f2 e0       	ldi	r31, 0x02	; 2
    1d60:	6f 0e       	add	r6, r31
    1d62:	71 1c       	adc	r7, r1
    1d64:	f8 01       	movw	r30, r16
    1d66:	a0 80       	ld	r10, Z
    1d68:	b1 80       	ldd	r11, Z+1	; 0x01
    1d6a:	26 ff       	sbrs	r18, 6
    1d6c:	03 c0       	rjmp	.+6      	; 0x1d74 <vfprintf+0x15a>
    1d6e:	65 2d       	mov	r22, r5
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <vfprintf+0x15e>
    1d74:	6f ef       	ldi	r22, 0xFF	; 255
    1d76:	7f ef       	ldi	r23, 0xFF	; 255
    1d78:	c5 01       	movw	r24, r10
    1d7a:	2c 87       	std	Y+12, r18	; 0x0c
    1d7c:	0e 94 06 10 	call	0x200c	; 0x200c <strnlen_P>
    1d80:	2c 01       	movw	r4, r24
    1d82:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d84:	20 68       	ori	r18, 0x80	; 128
    1d86:	22 2e       	mov	r2, r18
    1d88:	83 01       	movw	r16, r6
    1d8a:	23 fc       	sbrc	r2, 3
    1d8c:	1b c0       	rjmp	.+54     	; 0x1dc4 <vfprintf+0x1aa>
    1d8e:	83 2d       	mov	r24, r3
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	48 16       	cp	r4, r24
    1d94:	59 06       	cpc	r5, r25
    1d96:	b0 f4       	brcc	.+44     	; 0x1dc4 <vfprintf+0x1aa>
    1d98:	b7 01       	movw	r22, r14
    1d9a:	80 e2       	ldi	r24, 0x20	; 32
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	0e 94 1c 10 	call	0x2038	; 0x2038 <fputc>
    1da2:	3a 94       	dec	r3
    1da4:	f4 cf       	rjmp	.-24     	; 0x1d8e <vfprintf+0x174>
    1da6:	f5 01       	movw	r30, r10
    1da8:	27 fc       	sbrc	r2, 7
    1daa:	85 91       	lpm	r24, Z+
    1dac:	27 fe       	sbrs	r2, 7
    1dae:	81 91       	ld	r24, Z+
    1db0:	5f 01       	movw	r10, r30
    1db2:	b7 01       	movw	r22, r14
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 1c 10 	call	0x2038	; 0x2038 <fputc>
    1dba:	31 10       	cpse	r3, r1
    1dbc:	3a 94       	dec	r3
    1dbe:	f1 e0       	ldi	r31, 0x01	; 1
    1dc0:	4f 1a       	sub	r4, r31
    1dc2:	51 08       	sbc	r5, r1
    1dc4:	41 14       	cp	r4, r1
    1dc6:	51 04       	cpc	r5, r1
    1dc8:	71 f7       	brne	.-36     	; 0x1da6 <vfprintf+0x18c>
    1dca:	e5 c0       	rjmp	.+458    	; 0x1f96 <vfprintf+0x37c>
    1dcc:	84 36       	cpi	r24, 0x64	; 100
    1dce:	11 f0       	breq	.+4      	; 0x1dd4 <vfprintf+0x1ba>
    1dd0:	89 36       	cpi	r24, 0x69	; 105
    1dd2:	39 f5       	brne	.+78     	; 0x1e22 <vfprintf+0x208>
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	27 ff       	sbrs	r18, 7
    1dd8:	07 c0       	rjmp	.+14     	; 0x1de8 <vfprintf+0x1ce>
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	0c 5f       	subi	r16, 0xFC	; 252
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	08 c0       	rjmp	.+16     	; 0x1df8 <vfprintf+0x1de>
    1de8:	60 81       	ld	r22, Z
    1dea:	71 81       	ldd	r23, Z+1	; 0x01
    1dec:	88 27       	eor	r24, r24
    1dee:	77 fd       	sbrc	r23, 7
    1df0:	80 95       	com	r24
    1df2:	98 2f       	mov	r25, r24
    1df4:	0e 5f       	subi	r16, 0xFE	; 254
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	2f 76       	andi	r18, 0x6F	; 111
    1dfa:	b2 2e       	mov	r11, r18
    1dfc:	97 ff       	sbrs	r25, 7
    1dfe:	09 c0       	rjmp	.+18     	; 0x1e12 <vfprintf+0x1f8>
    1e00:	90 95       	com	r25
    1e02:	80 95       	com	r24
    1e04:	70 95       	com	r23
    1e06:	61 95       	neg	r22
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0e:	20 68       	ori	r18, 0x80	; 128
    1e10:	b2 2e       	mov	r11, r18
    1e12:	2a e0       	ldi	r18, 0x0A	; 10
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	a4 01       	movw	r20, r8
    1e18:	0e 94 4e 10 	call	0x209c	; 0x209c <__ultoa_invert>
    1e1c:	a8 2e       	mov	r10, r24
    1e1e:	a8 18       	sub	r10, r8
    1e20:	44 c0       	rjmp	.+136    	; 0x1eaa <vfprintf+0x290>
    1e22:	85 37       	cpi	r24, 0x75	; 117
    1e24:	29 f4       	brne	.+10     	; 0x1e30 <vfprintf+0x216>
    1e26:	2f 7e       	andi	r18, 0xEF	; 239
    1e28:	b2 2e       	mov	r11, r18
    1e2a:	2a e0       	ldi	r18, 0x0A	; 10
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	25 c0       	rjmp	.+74     	; 0x1e7a <vfprintf+0x260>
    1e30:	f2 2f       	mov	r31, r18
    1e32:	f9 7f       	andi	r31, 0xF9	; 249
    1e34:	bf 2e       	mov	r11, r31
    1e36:	8f 36       	cpi	r24, 0x6F	; 111
    1e38:	c1 f0       	breq	.+48     	; 0x1e6a <vfprintf+0x250>
    1e3a:	18 f4       	brcc	.+6      	; 0x1e42 <vfprintf+0x228>
    1e3c:	88 35       	cpi	r24, 0x58	; 88
    1e3e:	79 f0       	breq	.+30     	; 0x1e5e <vfprintf+0x244>
    1e40:	b4 c0       	rjmp	.+360    	; 0x1faa <vfprintf+0x390>
    1e42:	80 37       	cpi	r24, 0x70	; 112
    1e44:	19 f0       	breq	.+6      	; 0x1e4c <vfprintf+0x232>
    1e46:	88 37       	cpi	r24, 0x78	; 120
    1e48:	21 f0       	breq	.+8      	; 0x1e52 <vfprintf+0x238>
    1e4a:	af c0       	rjmp	.+350    	; 0x1faa <vfprintf+0x390>
    1e4c:	2f 2f       	mov	r18, r31
    1e4e:	20 61       	ori	r18, 0x10	; 16
    1e50:	b2 2e       	mov	r11, r18
    1e52:	b4 fe       	sbrs	r11, 4
    1e54:	0d c0       	rjmp	.+26     	; 0x1e70 <vfprintf+0x256>
    1e56:	8b 2d       	mov	r24, r11
    1e58:	84 60       	ori	r24, 0x04	; 4
    1e5a:	b8 2e       	mov	r11, r24
    1e5c:	09 c0       	rjmp	.+18     	; 0x1e70 <vfprintf+0x256>
    1e5e:	24 ff       	sbrs	r18, 4
    1e60:	0a c0       	rjmp	.+20     	; 0x1e76 <vfprintf+0x25c>
    1e62:	9f 2f       	mov	r25, r31
    1e64:	96 60       	ori	r25, 0x06	; 6
    1e66:	b9 2e       	mov	r11, r25
    1e68:	06 c0       	rjmp	.+12     	; 0x1e76 <vfprintf+0x25c>
    1e6a:	28 e0       	ldi	r18, 0x08	; 8
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <vfprintf+0x260>
    1e70:	20 e1       	ldi	r18, 0x10	; 16
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <vfprintf+0x260>
    1e76:	20 e1       	ldi	r18, 0x10	; 16
    1e78:	32 e0       	ldi	r19, 0x02	; 2
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	b7 fe       	sbrs	r11, 7
    1e7e:	07 c0       	rjmp	.+14     	; 0x1e8e <vfprintf+0x274>
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	0c 5f       	subi	r16, 0xFC	; 252
    1e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <vfprintf+0x280>
    1e8e:	60 81       	ld	r22, Z
    1e90:	71 81       	ldd	r23, Z+1	; 0x01
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	0e 5f       	subi	r16, 0xFE	; 254
    1e98:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9a:	a4 01       	movw	r20, r8
    1e9c:	0e 94 4e 10 	call	0x209c	; 0x209c <__ultoa_invert>
    1ea0:	a8 2e       	mov	r10, r24
    1ea2:	a8 18       	sub	r10, r8
    1ea4:	fb 2d       	mov	r31, r11
    1ea6:	ff 77       	andi	r31, 0x7F	; 127
    1ea8:	bf 2e       	mov	r11, r31
    1eaa:	b6 fe       	sbrs	r11, 6
    1eac:	0b c0       	rjmp	.+22     	; 0x1ec4 <vfprintf+0x2aa>
    1eae:	2b 2d       	mov	r18, r11
    1eb0:	2e 7f       	andi	r18, 0xFE	; 254
    1eb2:	a5 14       	cp	r10, r5
    1eb4:	50 f4       	brcc	.+20     	; 0x1eca <vfprintf+0x2b0>
    1eb6:	b4 fe       	sbrs	r11, 4
    1eb8:	0a c0       	rjmp	.+20     	; 0x1ece <vfprintf+0x2b4>
    1eba:	b2 fc       	sbrc	r11, 2
    1ebc:	08 c0       	rjmp	.+16     	; 0x1ece <vfprintf+0x2b4>
    1ebe:	2b 2d       	mov	r18, r11
    1ec0:	2e 7e       	andi	r18, 0xEE	; 238
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <vfprintf+0x2b4>
    1ec4:	7a 2c       	mov	r7, r10
    1ec6:	2b 2d       	mov	r18, r11
    1ec8:	03 c0       	rjmp	.+6      	; 0x1ed0 <vfprintf+0x2b6>
    1eca:	7a 2c       	mov	r7, r10
    1ecc:	01 c0       	rjmp	.+2      	; 0x1ed0 <vfprintf+0x2b6>
    1ece:	75 2c       	mov	r7, r5
    1ed0:	24 ff       	sbrs	r18, 4
    1ed2:	0d c0       	rjmp	.+26     	; 0x1eee <vfprintf+0x2d4>
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ea 0d       	add	r30, r10
    1ed8:	f1 1d       	adc	r31, r1
    1eda:	80 81       	ld	r24, Z
    1edc:	80 33       	cpi	r24, 0x30	; 48
    1ede:	11 f4       	brne	.+4      	; 0x1ee4 <vfprintf+0x2ca>
    1ee0:	29 7e       	andi	r18, 0xE9	; 233
    1ee2:	09 c0       	rjmp	.+18     	; 0x1ef6 <vfprintf+0x2dc>
    1ee4:	22 ff       	sbrs	r18, 2
    1ee6:	06 c0       	rjmp	.+12     	; 0x1ef4 <vfprintf+0x2da>
    1ee8:	73 94       	inc	r7
    1eea:	73 94       	inc	r7
    1eec:	04 c0       	rjmp	.+8      	; 0x1ef6 <vfprintf+0x2dc>
    1eee:	82 2f       	mov	r24, r18
    1ef0:	86 78       	andi	r24, 0x86	; 134
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <vfprintf+0x2dc>
    1ef4:	73 94       	inc	r7
    1ef6:	23 fd       	sbrc	r18, 3
    1ef8:	13 c0       	rjmp	.+38     	; 0x1f20 <vfprintf+0x306>
    1efa:	20 ff       	sbrs	r18, 0
    1efc:	06 c0       	rjmp	.+12     	; 0x1f0a <vfprintf+0x2f0>
    1efe:	5a 2c       	mov	r5, r10
    1f00:	73 14       	cp	r7, r3
    1f02:	18 f4       	brcc	.+6      	; 0x1f0a <vfprintf+0x2f0>
    1f04:	53 0c       	add	r5, r3
    1f06:	57 18       	sub	r5, r7
    1f08:	73 2c       	mov	r7, r3
    1f0a:	73 14       	cp	r7, r3
    1f0c:	68 f4       	brcc	.+26     	; 0x1f28 <vfprintf+0x30e>
    1f0e:	b7 01       	movw	r22, r14
    1f10:	80 e2       	ldi	r24, 0x20	; 32
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	2c 87       	std	Y+12, r18	; 0x0c
    1f16:	0e 94 1c 10 	call	0x2038	; 0x2038 <fputc>
    1f1a:	73 94       	inc	r7
    1f1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f1e:	f5 cf       	rjmp	.-22     	; 0x1f0a <vfprintf+0x2f0>
    1f20:	73 14       	cp	r7, r3
    1f22:	10 f4       	brcc	.+4      	; 0x1f28 <vfprintf+0x30e>
    1f24:	37 18       	sub	r3, r7
    1f26:	01 c0       	rjmp	.+2      	; 0x1f2a <vfprintf+0x310>
    1f28:	31 2c       	mov	r3, r1
    1f2a:	24 ff       	sbrs	r18, 4
    1f2c:	12 c0       	rjmp	.+36     	; 0x1f52 <vfprintf+0x338>
    1f2e:	b7 01       	movw	r22, r14
    1f30:	80 e3       	ldi	r24, 0x30	; 48
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	2c 87       	std	Y+12, r18	; 0x0c
    1f36:	0e 94 1c 10 	call	0x2038	; 0x2038 <fputc>
    1f3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f3c:	22 ff       	sbrs	r18, 2
    1f3e:	17 c0       	rjmp	.+46     	; 0x1f6e <vfprintf+0x354>
    1f40:	21 ff       	sbrs	r18, 1
    1f42:	03 c0       	rjmp	.+6      	; 0x1f4a <vfprintf+0x330>
    1f44:	88 e5       	ldi	r24, 0x58	; 88
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <vfprintf+0x334>
    1f4a:	88 e7       	ldi	r24, 0x78	; 120
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	b7 01       	movw	r22, r14
    1f50:	0c c0       	rjmp	.+24     	; 0x1f6a <vfprintf+0x350>
    1f52:	82 2f       	mov	r24, r18
    1f54:	86 78       	andi	r24, 0x86	; 134
    1f56:	59 f0       	breq	.+22     	; 0x1f6e <vfprintf+0x354>
    1f58:	21 fd       	sbrc	r18, 1
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <vfprintf+0x346>
    1f5c:	80 e2       	ldi	r24, 0x20	; 32
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <vfprintf+0x348>
    1f60:	8b e2       	ldi	r24, 0x2B	; 43
    1f62:	27 fd       	sbrc	r18, 7
    1f64:	8d e2       	ldi	r24, 0x2D	; 45
    1f66:	b7 01       	movw	r22, r14
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 1c 10 	call	0x2038	; 0x2038 <fputc>
    1f6e:	a5 14       	cp	r10, r5
    1f70:	38 f4       	brcc	.+14     	; 0x1f80 <vfprintf+0x366>
    1f72:	b7 01       	movw	r22, r14
    1f74:	80 e3       	ldi	r24, 0x30	; 48
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 1c 10 	call	0x2038	; 0x2038 <fputc>
    1f7c:	5a 94       	dec	r5
    1f7e:	f7 cf       	rjmp	.-18     	; 0x1f6e <vfprintf+0x354>
    1f80:	aa 94       	dec	r10
    1f82:	f4 01       	movw	r30, r8
    1f84:	ea 0d       	add	r30, r10
    1f86:	f1 1d       	adc	r31, r1
    1f88:	80 81       	ld	r24, Z
    1f8a:	b7 01       	movw	r22, r14
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	0e 94 1c 10 	call	0x2038	; 0x2038 <fputc>
    1f92:	a1 10       	cpse	r10, r1
    1f94:	f5 cf       	rjmp	.-22     	; 0x1f80 <vfprintf+0x366>
    1f96:	33 20       	and	r3, r3
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <vfprintf+0x382>
    1f9a:	51 ce       	rjmp	.-862    	; 0x1c3e <vfprintf+0x24>
    1f9c:	b7 01       	movw	r22, r14
    1f9e:	80 e2       	ldi	r24, 0x20	; 32
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 1c 10 	call	0x2038	; 0x2038 <fputc>
    1fa6:	3a 94       	dec	r3
    1fa8:	f6 cf       	rjmp	.-20     	; 0x1f96 <vfprintf+0x37c>
    1faa:	f7 01       	movw	r30, r14
    1fac:	86 81       	ldd	r24, Z+6	; 0x06
    1fae:	97 81       	ldd	r25, Z+7	; 0x07
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <vfprintf+0x39c>
    1fb2:	8f ef       	ldi	r24, 0xFF	; 255
    1fb4:	9f ef       	ldi	r25, 0xFF	; 255
    1fb6:	2c 96       	adiw	r28, 0x0c	; 12
    1fb8:	e2 e1       	ldi	r30, 0x12	; 18
    1fba:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__epilogue_restores__>

00001fbe <__eerd_block_m32>:
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22

00001fc2 <__eerd_blraw_m32>:
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	e1 99       	sbic	0x1c, 1	; 28
    1fc6:	fe cf       	rjmp	.-4      	; 0x1fc4 <__eerd_blraw_m32+0x2>
    1fc8:	06 c0       	rjmp	.+12     	; 0x1fd6 <__eerd_blraw_m32+0x14>
    1fca:	ff bb       	out	0x1f, r31	; 31
    1fcc:	ee bb       	out	0x1e, r30	; 30
    1fce:	e0 9a       	sbi	0x1c, 0	; 28
    1fd0:	31 96       	adiw	r30, 0x01	; 1
    1fd2:	0d b2       	in	r0, 0x1d	; 29
    1fd4:	0d 92       	st	X+, r0
    1fd6:	41 50       	subi	r20, 0x01	; 1
    1fd8:	50 40       	sbci	r21, 0x00	; 0
    1fda:	b8 f7       	brcc	.-18     	; 0x1fca <__eerd_blraw_m32+0x8>
    1fdc:	08 95       	ret

00001fde <__eewr_block_m32>:
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	03 c0       	rjmp	.+6      	; 0x1fea <__eewr_block_m32+0xc>
    1fe4:	2d 91       	ld	r18, X+
    1fe6:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__eewr_r18_m32>
    1fea:	41 50       	subi	r20, 0x01	; 1
    1fec:	50 40       	sbci	r21, 0x00	; 0
    1fee:	d0 f7       	brcc	.-12     	; 0x1fe4 <__eewr_block_m32+0x6>
    1ff0:	08 95       	ret

00001ff2 <__eewr_byte_m32>:
    1ff2:	26 2f       	mov	r18, r22

00001ff4 <__eewr_r18_m32>:
    1ff4:	e1 99       	sbic	0x1c, 1	; 28
    1ff6:	fe cf       	rjmp	.-4      	; 0x1ff4 <__eewr_r18_m32>
    1ff8:	9f bb       	out	0x1f, r25	; 31
    1ffa:	8e bb       	out	0x1e, r24	; 30
    1ffc:	2d bb       	out	0x1d, r18	; 29
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	e2 9a       	sbi	0x1c, 2	; 28
    2004:	e1 9a       	sbi	0x1c, 1	; 28
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	08 95       	ret

0000200c <strnlen_P>:
    200c:	fc 01       	movw	r30, r24
    200e:	05 90       	lpm	r0, Z+
    2010:	61 50       	subi	r22, 0x01	; 1
    2012:	70 40       	sbci	r23, 0x00	; 0
    2014:	01 10       	cpse	r0, r1
    2016:	d8 f7       	brcc	.-10     	; 0x200e <strnlen_P+0x2>
    2018:	80 95       	com	r24
    201a:	90 95       	com	r25
    201c:	8e 0f       	add	r24, r30
    201e:	9f 1f       	adc	r25, r31
    2020:	08 95       	ret

00002022 <strnlen>:
    2022:	fc 01       	movw	r30, r24
    2024:	61 50       	subi	r22, 0x01	; 1
    2026:	70 40       	sbci	r23, 0x00	; 0
    2028:	01 90       	ld	r0, Z+
    202a:	01 10       	cpse	r0, r1
    202c:	d8 f7       	brcc	.-10     	; 0x2024 <strnlen+0x2>
    202e:	80 95       	com	r24
    2030:	90 95       	com	r25
    2032:	8e 0f       	add	r24, r30
    2034:	9f 1f       	adc	r25, r31
    2036:	08 95       	ret

00002038 <fputc>:
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	18 2f       	mov	r17, r24
    2042:	09 2f       	mov	r16, r25
    2044:	eb 01       	movw	r28, r22
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	81 fd       	sbrc	r24, 1
    204a:	03 c0       	rjmp	.+6      	; 0x2052 <fputc+0x1a>
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	9f ef       	ldi	r25, 0xFF	; 255
    2050:	20 c0       	rjmp	.+64     	; 0x2092 <fputc+0x5a>
    2052:	82 ff       	sbrs	r24, 2
    2054:	10 c0       	rjmp	.+32     	; 0x2076 <fputc+0x3e>
    2056:	4e 81       	ldd	r20, Y+6	; 0x06
    2058:	5f 81       	ldd	r21, Y+7	; 0x07
    205a:	2c 81       	ldd	r18, Y+4	; 0x04
    205c:	3d 81       	ldd	r19, Y+5	; 0x05
    205e:	42 17       	cp	r20, r18
    2060:	53 07       	cpc	r21, r19
    2062:	7c f4       	brge	.+30     	; 0x2082 <fputc+0x4a>
    2064:	e8 81       	ld	r30, Y
    2066:	f9 81       	ldd	r31, Y+1	; 0x01
    2068:	9f 01       	movw	r18, r30
    206a:	2f 5f       	subi	r18, 0xFF	; 255
    206c:	3f 4f       	sbci	r19, 0xFF	; 255
    206e:	39 83       	std	Y+1, r19	; 0x01
    2070:	28 83       	st	Y, r18
    2072:	10 83       	st	Z, r17
    2074:	06 c0       	rjmp	.+12     	; 0x2082 <fputc+0x4a>
    2076:	e8 85       	ldd	r30, Y+8	; 0x08
    2078:	f9 85       	ldd	r31, Y+9	; 0x09
    207a:	81 2f       	mov	r24, r17
    207c:	09 95       	icall
    207e:	89 2b       	or	r24, r25
    2080:	29 f7       	brne	.-54     	; 0x204c <fputc+0x14>
    2082:	2e 81       	ldd	r18, Y+6	; 0x06
    2084:	3f 81       	ldd	r19, Y+7	; 0x07
    2086:	2f 5f       	subi	r18, 0xFF	; 255
    2088:	3f 4f       	sbci	r19, 0xFF	; 255
    208a:	3f 83       	std	Y+7, r19	; 0x07
    208c:	2e 83       	std	Y+6, r18	; 0x06
    208e:	81 2f       	mov	r24, r17
    2090:	90 2f       	mov	r25, r16
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	1f 91       	pop	r17
    2098:	0f 91       	pop	r16
    209a:	08 95       	ret

0000209c <__ultoa_invert>:
    209c:	fa 01       	movw	r30, r20
    209e:	aa 27       	eor	r26, r26
    20a0:	28 30       	cpi	r18, 0x08	; 8
    20a2:	51 f1       	breq	.+84     	; 0x20f8 <__ultoa_invert+0x5c>
    20a4:	20 31       	cpi	r18, 0x10	; 16
    20a6:	81 f1       	breq	.+96     	; 0x2108 <__ultoa_invert+0x6c>
    20a8:	e8 94       	clt
    20aa:	6f 93       	push	r22
    20ac:	6e 7f       	andi	r22, 0xFE	; 254
    20ae:	6e 5f       	subi	r22, 0xFE	; 254
    20b0:	7f 4f       	sbci	r23, 0xFF	; 255
    20b2:	8f 4f       	sbci	r24, 0xFF	; 255
    20b4:	9f 4f       	sbci	r25, 0xFF	; 255
    20b6:	af 4f       	sbci	r26, 0xFF	; 255
    20b8:	b1 e0       	ldi	r27, 0x01	; 1
    20ba:	3e d0       	rcall	.+124    	; 0x2138 <__ultoa_invert+0x9c>
    20bc:	b4 e0       	ldi	r27, 0x04	; 4
    20be:	3c d0       	rcall	.+120    	; 0x2138 <__ultoa_invert+0x9c>
    20c0:	67 0f       	add	r22, r23
    20c2:	78 1f       	adc	r23, r24
    20c4:	89 1f       	adc	r24, r25
    20c6:	9a 1f       	adc	r25, r26
    20c8:	a1 1d       	adc	r26, r1
    20ca:	68 0f       	add	r22, r24
    20cc:	79 1f       	adc	r23, r25
    20ce:	8a 1f       	adc	r24, r26
    20d0:	91 1d       	adc	r25, r1
    20d2:	a1 1d       	adc	r26, r1
    20d4:	6a 0f       	add	r22, r26
    20d6:	71 1d       	adc	r23, r1
    20d8:	81 1d       	adc	r24, r1
    20da:	91 1d       	adc	r25, r1
    20dc:	a1 1d       	adc	r26, r1
    20de:	20 d0       	rcall	.+64     	; 0x2120 <__ultoa_invert+0x84>
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <__ultoa_invert+0x48>
    20e2:	68 94       	set
    20e4:	3f 91       	pop	r19
    20e6:	2a e0       	ldi	r18, 0x0A	; 10
    20e8:	26 9f       	mul	r18, r22
    20ea:	11 24       	eor	r1, r1
    20ec:	30 19       	sub	r19, r0
    20ee:	30 5d       	subi	r19, 0xD0	; 208
    20f0:	31 93       	st	Z+, r19
    20f2:	de f6       	brtc	.-74     	; 0x20aa <__ultoa_invert+0xe>
    20f4:	cf 01       	movw	r24, r30
    20f6:	08 95       	ret
    20f8:	46 2f       	mov	r20, r22
    20fa:	47 70       	andi	r20, 0x07	; 7
    20fc:	40 5d       	subi	r20, 0xD0	; 208
    20fe:	41 93       	st	Z+, r20
    2100:	b3 e0       	ldi	r27, 0x03	; 3
    2102:	0f d0       	rcall	.+30     	; 0x2122 <__ultoa_invert+0x86>
    2104:	c9 f7       	brne	.-14     	; 0x20f8 <__ultoa_invert+0x5c>
    2106:	f6 cf       	rjmp	.-20     	; 0x20f4 <__ultoa_invert+0x58>
    2108:	46 2f       	mov	r20, r22
    210a:	4f 70       	andi	r20, 0x0F	; 15
    210c:	40 5d       	subi	r20, 0xD0	; 208
    210e:	4a 33       	cpi	r20, 0x3A	; 58
    2110:	18 f0       	brcs	.+6      	; 0x2118 <__ultoa_invert+0x7c>
    2112:	49 5d       	subi	r20, 0xD9	; 217
    2114:	31 fd       	sbrc	r19, 1
    2116:	40 52       	subi	r20, 0x20	; 32
    2118:	41 93       	st	Z+, r20
    211a:	02 d0       	rcall	.+4      	; 0x2120 <__ultoa_invert+0x84>
    211c:	a9 f7       	brne	.-22     	; 0x2108 <__ultoa_invert+0x6c>
    211e:	ea cf       	rjmp	.-44     	; 0x20f4 <__ultoa_invert+0x58>
    2120:	b4 e0       	ldi	r27, 0x04	; 4
    2122:	a6 95       	lsr	r26
    2124:	97 95       	ror	r25
    2126:	87 95       	ror	r24
    2128:	77 95       	ror	r23
    212a:	67 95       	ror	r22
    212c:	ba 95       	dec	r27
    212e:	c9 f7       	brne	.-14     	; 0x2122 <__ultoa_invert+0x86>
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	61 05       	cpc	r22, r1
    2134:	71 05       	cpc	r23, r1
    2136:	08 95       	ret
    2138:	9b 01       	movw	r18, r22
    213a:	ac 01       	movw	r20, r24
    213c:	0a 2e       	mov	r0, r26
    213e:	06 94       	lsr	r0
    2140:	57 95       	ror	r21
    2142:	47 95       	ror	r20
    2144:	37 95       	ror	r19
    2146:	27 95       	ror	r18
    2148:	ba 95       	dec	r27
    214a:	c9 f7       	brne	.-14     	; 0x213e <__ultoa_invert+0xa2>
    214c:	62 0f       	add	r22, r18
    214e:	73 1f       	adc	r23, r19
    2150:	84 1f       	adc	r24, r20
    2152:	95 1f       	adc	r25, r21
    2154:	a0 1d       	adc	r26, r0
    2156:	08 95       	ret

00002158 <__prologue_saves__>:
    2158:	2f 92       	push	r2
    215a:	3f 92       	push	r3
    215c:	4f 92       	push	r4
    215e:	5f 92       	push	r5
    2160:	6f 92       	push	r6
    2162:	7f 92       	push	r7
    2164:	8f 92       	push	r8
    2166:	9f 92       	push	r9
    2168:	af 92       	push	r10
    216a:	bf 92       	push	r11
    216c:	cf 92       	push	r12
    216e:	df 92       	push	r13
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	ca 1b       	sub	r28, r26
    2182:	db 0b       	sbc	r29, r27
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	09 94       	ijmp

00002190 <__epilogue_restores__>:
    2190:	2a 88       	ldd	r2, Y+18	; 0x12
    2192:	39 88       	ldd	r3, Y+17	; 0x11
    2194:	48 88       	ldd	r4, Y+16	; 0x10
    2196:	5f 84       	ldd	r5, Y+15	; 0x0f
    2198:	6e 84       	ldd	r6, Y+14	; 0x0e
    219a:	7d 84       	ldd	r7, Y+13	; 0x0d
    219c:	8c 84       	ldd	r8, Y+12	; 0x0c
    219e:	9b 84       	ldd	r9, Y+11	; 0x0b
    21a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    21a2:	b9 84       	ldd	r11, Y+9	; 0x09
    21a4:	c8 84       	ldd	r12, Y+8	; 0x08
    21a6:	df 80       	ldd	r13, Y+7	; 0x07
    21a8:	ee 80       	ldd	r14, Y+6	; 0x06
    21aa:	fd 80       	ldd	r15, Y+5	; 0x05
    21ac:	0c 81       	ldd	r16, Y+4	; 0x04
    21ae:	1b 81       	ldd	r17, Y+3	; 0x03
    21b0:	aa 81       	ldd	r26, Y+2	; 0x02
    21b2:	b9 81       	ldd	r27, Y+1	; 0x01
    21b4:	ce 0f       	add	r28, r30
    21b6:	d1 1d       	adc	r29, r1
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	ed 01       	movw	r28, r26
    21c4:	08 95       	ret

000021c6 <__do_global_dtors>:
    21c6:	10 e0       	ldi	r17, 0x00	; 0
    21c8:	c6 e5       	ldi	r28, 0x56	; 86
    21ca:	d0 e0       	ldi	r29, 0x00	; 0
    21cc:	04 c0       	rjmp	.+8      	; 0x21d6 <__do_global_dtors+0x10>
    21ce:	fe 01       	movw	r30, r28
    21d0:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__tablejump__>
    21d4:	22 96       	adiw	r28, 0x02	; 2
    21d6:	c8 35       	cpi	r28, 0x58	; 88
    21d8:	d1 07       	cpc	r29, r17
    21da:	c9 f7       	brne	.-14     	; 0x21ce <__do_global_dtors+0x8>
    21dc:	f8 94       	cli

000021de <__stop_program>:
    21de:	ff cf       	rjmp	.-2      	; 0x21de <__stop_program>
