
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021ee  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000021ee  000022a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  008000a4  008000a4  000022e6  2**0
                  ALLOC
  3 .eeprom       00000007  00810000  00810000  000022e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000022ed  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00002349  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b8  00000000  00000000  00002519  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000647  00000000  00000000  000038d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000904  00000000  00000000  00003f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d8  00000000  00000000  0000481c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000729  00000000  00000000  00004ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e3a  00000000  00000000  0000561d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  00006457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
       4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      2c:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__vector_11>
      30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	50 08       	sbc	r5, r0

00000056 <__ctors_end>:
      56:	5d 08       	sbc	r5, r13

00000058 <__dtors_end>:
      58:	11 24       	eor	r1, r1
      5a:	1f be       	out	0x3f, r1	; 63
      5c:	cf e5       	ldi	r28, 0x5F	; 95
      5e:	d8 e0       	ldi	r29, 0x08	; 8
      60:	de bf       	out	0x3e, r29	; 62
      62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
      64:	10 e0       	ldi	r17, 0x00	; 0
      66:	a0 e6       	ldi	r26, 0x60	; 96
      68:	b0 e0       	ldi	r27, 0x00	; 0
      6a:	ee ee       	ldi	r30, 0xEE	; 238
      6c:	f1 e2       	ldi	r31, 0x21	; 33
      6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
      70:	05 90       	lpm	r0, Z+
      72:	0d 92       	st	X+, r0
      74:	a4 3a       	cpi	r26, 0xA4	; 164
      76:	b1 07       	cpc	r27, r17
      78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
      7a:	20 e0       	ldi	r18, 0x00	; 0
      7c:	a4 ea       	ldi	r26, 0xA4	; 164
      7e:	b0 e0       	ldi	r27, 0x00	; 0
      80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
      82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
      84:	af 3c       	cpi	r26, 0xCF	; 207
      86:	b2 07       	cpc	r27, r18
      88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
      8a:	10 e0       	ldi	r17, 0x00	; 0
      8c:	c6 e5       	ldi	r28, 0x56	; 86
      8e:	d0 e0       	ldi	r29, 0x00	; 0
      90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
      92:	22 97       	sbiw	r28, 0x02	; 2
      94:	fe 01       	movw	r30, r28
      96:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__tablejump__>
      9a:	c4 35       	cpi	r28, 0x54	; 84
      9c:	d1 07       	cpc	r29, r17
      9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
      a0:	0e 94 2a 07 	call	0xe54	; 0xe54 <main>
      a4:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__do_global_dtors>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_Z8bcdToDech>:
	{ 23,23,0,59,59,0,59,59 },
	{ 31,31,0,12,12,0,99,99 }
};

unsigned char bcdToDec(unsigned char val)
{
      ac:	cf 93       	push	r28
      ae:	df 93       	push	r29
      b0:	1f 92       	push	r1
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	89 83       	std	Y+1, r24	; 0x01
	return ((val/16*10) + (val%16) );
      b8:	89 81       	ldd	r24, Y+1	; 0x01
      ba:	82 95       	swap	r24
      bc:	8f 70       	andi	r24, 0x0F	; 15
      be:	88 0f       	add	r24, r24
      c0:	98 2f       	mov	r25, r24
      c2:	99 0f       	add	r25, r25
      c4:	99 0f       	add	r25, r25
      c6:	98 0f       	add	r25, r24
      c8:	89 81       	ldd	r24, Y+1	; 0x01
      ca:	8f 70       	andi	r24, 0x0F	; 15
      cc:	89 0f       	add	r24, r25
}
      ce:	0f 90       	pop	r0
      d0:	df 91       	pop	r29
      d2:	cf 91       	pop	r28
      d4:	08 95       	ret

000000d6 <_Z8decToBcdh>:

unsigned char decToBcd(unsigned char val)
{
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	1f 92       	push	r1
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	89 83       	std	Y+1, r24	; 0x01
	return ((val/10*16) + (val%10) );
      e2:	99 81       	ldd	r25, Y+1	; 0x01
      e4:	8d ec       	ldi	r24, 0xCD	; 205
      e6:	98 9f       	mul	r25, r24
      e8:	81 2d       	mov	r24, r1
      ea:	11 24       	eor	r1, r1
      ec:	86 95       	lsr	r24
      ee:	86 95       	lsr	r24
      f0:	86 95       	lsr	r24
      f2:	28 2f       	mov	r18, r24
      f4:	22 95       	swap	r18
      f6:	20 7f       	andi	r18, 0xF0	; 240
      f8:	99 81       	ldd	r25, Y+1	; 0x01
      fa:	8d ec       	ldi	r24, 0xCD	; 205
      fc:	98 9f       	mul	r25, r24
      fe:	81 2d       	mov	r24, r1
     100:	11 24       	eor	r1, r1
     102:	86 95       	lsr	r24
     104:	86 95       	lsr	r24
     106:	86 95       	lsr	r24
     108:	88 0f       	add	r24, r24
     10a:	38 2f       	mov	r19, r24
     10c:	33 0f       	add	r19, r19
     10e:	33 0f       	add	r19, r19
     110:	83 0f       	add	r24, r19
     112:	39 2f       	mov	r19, r25
     114:	38 1b       	sub	r19, r24
     116:	83 2f       	mov	r24, r19
     118:	82 0f       	add	r24, r18
}
     11a:	0f 90       	pop	r0
     11c:	df 91       	pop	r29
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <_Z7init_T0v>:

void init_T0(void)
{
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS02) && (1<<CS00);
     12a:	83 e5       	ldi	r24, 0x53	; 83
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	21 e0       	ldi	r18, 0x01	; 1
     130:	fc 01       	movw	r30, r24
     132:	20 83       	st	Z, r18
	TCNT0 = 0;
     134:	82 e5       	ldi	r24, 0x52	; 82
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	fc 01       	movw	r30, r24
     13a:	10 82       	st	Z, r1
	TIMSK = (1<<TOIE0);
     13c:	89 e5       	ldi	r24, 0x59	; 89
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	21 e0       	ldi	r18, 0x01	; 1
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
}
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <_Z8init_lcdv>:

void init_lcd(void)
{
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
	lcd_init();
     154:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_Z8lcd_initv>
	lcd_cursor(false, false);								//  cursor off
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	0e 94 4d 0c 	call	0x189a	; 0x189a <_Z10lcd_cursorbb>
	lcd_home();
     160:	0e 94 43 0c 	call	0x1886	; 0x1886 <_Z8lcd_homev>
}
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <_Z4initv>:

void init(void)
{
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	00 d0       	rcall	.+0      	; 0x174 <_Z4initv+0xa>
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0x00;
     178:	81 e3       	ldi	r24, 0x31	; 49
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	fc 01       	movw	r30, r24
     17e:	10 82       	st	Z, r1
	DDRB = 0xFF;
     180:	87 e3       	ldi	r24, 0x37	; 55
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	2f ef       	ldi	r18, 0xFF	; 255
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
	eeprom_read_block(&alarmTime, &alarmTimeEEMEM, 7);
     18a:	47 e0       	ldi	r20, 0x07	; 7
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	84 ec       	ldi	r24, 0xC4	; 196
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__eerd_block_m32>
	init_lcd();
     19a:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z8init_lcdv>
	TWI.init();												// Function to initialize TWI
     19e:	8c ec       	ldi	r24, 0xCC	; 204
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 80 08 	call	0x1100	; 0x1100 <_ZN3I2C4initEv>
	unsigned char ret = TWI.start(I2C_WRITE);				// set device address and write mode
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	8c ec       	ldi	r24, 0xCC	; 204
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN3I2C5startEh>
     1b0:	89 83       	std	Y+1, r24	; 0x01
	while(ret)
     1b2:	19 c0       	rjmp	.+50     	; 0x1e6 <_Z4initv+0x7c>
	{
		TWI.stop();
     1b4:	8c ec       	ldi	r24, 0xCC	; 204
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN3I2C4stopEv>
		ret = TWI.start(I2C_WRITE);
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	8c ec       	ldi	r24, 0xCC	; 204
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN3I2C5startEh>
     1c6:	89 83       	std	Y+1, r24	; 0x01
		snprintf(buffer, sizeof buffer, "Failed");
     1c8:	87 e0       	ldi	r24, 0x07	; 7
     1ca:	e0 e9       	ldi	r30, 0x90	; 144
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	a4 ea       	ldi	r26, 0xA4	; 164
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	01 90       	ld	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	8a 95       	dec	r24
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <_Z4initv+0x68>
		lcd_puts(buffer);
     1da:	84 ea       	ldi	r24, 0xA4	; 164
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_Z8lcd_putsPc>
		lcd_home();
     1e2:	0e 94 43 0c 	call	0x1886	; 0x1886 <_Z8lcd_homev>
	DDRB = 0xFF;
	eeprom_read_block(&alarmTime, &alarmTimeEEMEM, 7);
	init_lcd();
	TWI.init();												// Function to initialize TWI
	unsigned char ret = TWI.start(I2C_WRITE);				// set device address and write mode
	while(ret)
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	88 23       	and	r24, r24
     1ea:	21 f7       	brne	.-56     	; 0x1b4 <_Z4initv+0x4a>
		ret = TWI.start(I2C_WRITE);
		snprintf(buffer, sizeof buffer, "Failed");
		lcd_puts(buffer);
		lcd_home();
	}
	TWI.start_wait(I2C_WRITE);						// set device address and write mode
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	8c ec       	ldi	r24, 0xCC	; 204
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN3I2C10start_waitEh>
	TWI.readXBytes(data,7,0x00);
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	47 e0       	ldi	r20, 0x07	; 7
     1fa:	6c eb       	ldi	r22, 0xBC	; 188
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	8c ec       	ldi	r24, 0xCC	; 204
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN3I2C10readXBytesEPhhh>
	TWI.stop();
     206:	8c ec       	ldi	r24, 0xCC	; 204
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN3I2C4stopEv>
	for (uint8_t i = 0; i <= 6 ; i++)
     20e:	1a 82       	std	Y+2, r1	; 0x02
     210:	15 c0       	rjmp	.+42     	; 0x23c <_Z4initv+0xd2>
	{
		realTime[i] = bcdToDec(data[i]);
     212:	8a 81       	ldd	r24, Y+2	; 0x02
     214:	08 2f       	mov	r16, r24
     216:	10 e0       	ldi	r17, 0x00	; 0
     218:	8a 81       	ldd	r24, Y+2	; 0x02
     21a:	88 2f       	mov	r24, r24
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	84 54       	subi	r24, 0x44	; 68
     220:	9f 4f       	sbci	r25, 0xFF	; 255
     222:	fc 01       	movw	r30, r24
     224:	80 81       	ld	r24, Z
     226:	0e 94 56 00 	call	0xac	; 0xac <_Z8bcdToDech>
     22a:	28 2f       	mov	r18, r24
     22c:	c8 01       	movw	r24, r16
     22e:	8b 54       	subi	r24, 0x4B	; 75
     230:	9f 4f       	sbci	r25, 0xFF	; 255
     232:	fc 01       	movw	r30, r24
     234:	20 83       	st	Z, r18
		lcd_home();
	}
	TWI.start_wait(I2C_WRITE);						// set device address and write mode
	TWI.readXBytes(data,7,0x00);
	TWI.stop();
	for (uint8_t i = 0; i <= 6 ; i++)
     236:	8a 81       	ldd	r24, Y+2	; 0x02
     238:	8f 5f       	subi	r24, 0xFF	; 255
     23a:	8a 83       	std	Y+2, r24	; 0x02
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	87 30       	cpi	r24, 0x07	; 7
     240:	40 f3       	brcs	.-48     	; 0x212 <_Z4initv+0xa8>
	{
		realTime[i] = bcdToDec(data[i]);
	}
	init_T0();
     242:	0e 94 91 00 	call	0x122	; 0x122 <_Z7init_T0v>
}
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	08 95       	ret

00000254 <_Z11t1_Stop_TOIv>:

void t1_Stop_TOI(void)
{
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= ~(1<<TOIE0);
     25c:	89 e5       	ldi	r24, 0x59	; 89
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	29 e5       	ldi	r18, 0x59	; 89
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	f9 01       	movw	r30, r18
     266:	20 81       	ld	r18, Z
     268:	2e 7f       	andi	r18, 0xFE	; 254
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <_Z12t1_Start_TOIv>:

void t1_Start_TOI(void)
{
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	cd b7       	in	r28, 0x3d	; 61
     27a:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);
     27c:	89 e5       	ldi	r24, 0x59	; 89
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	29 e5       	ldi	r18, 0x59	; 89
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	f9 01       	movw	r30, r18
     286:	20 81       	ld	r18, Z
     288:	21 60       	ori	r18, 0x01	; 1
     28a:	fc 01       	movw	r30, r24
     28c:	20 83       	st	Z, r18
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <_Z11Alarm_startv>:

void Alarm_start(void)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x01;
     29c:	88 e3       	ldi	r24, 0x38	; 56
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	21 e0       	ldi	r18, 0x01	; 1
     2a2:	fc 01       	movw	r30, r24
     2a4:	20 83       	st	Z, r18
}
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <_Z10Alarm_stopv>:

void Alarm_stop(void)
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x00;
     2b4:	88 e3       	ldi	r24, 0x38	; 56
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	10 82       	st	Z, r1
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <_Z11writeScreenPhb>:
//
//unsigned char timeIn[7] = {	decToBcd(30), decToBcd(41), decToBcd(17), decToBcd(5),	 decToBcd(6), decToBcd(2), decToBcd(15)};
//								Seconds,	  Minutes,	   Hours,	    Day of the week, Date,		  month,	   Year.

void writeScreen(unsigned char time[], bool alarm)
{
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <_Z11writeScreenPhb+0x6>
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <_Z11writeScreenPhb+0x8>
     2ca:	1f 92       	push	r1
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	9c 83       	std	Y+4, r25	; 0x04
     2d2:	8b 83       	std	Y+3, r24	; 0x03
     2d4:	6d 83       	std	Y+5, r22	; 0x05
	lcd_home();
     2d6:	0e 94 43 0c 	call	0x1886	; 0x1886 <_Z8lcd_homev>
	for(int8_t i = 2;i>=0;i--)
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	89 83       	std	Y+1, r24	; 0x01
     2de:	46 c0       	rjmp	.+140    	; 0x36c <_Z11writeScreenPhb+0xaa>
	{
		if (time[i] < 10)
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	99 27       	eor	r25, r25
     2e4:	87 fd       	sbrc	r24, 7
     2e6:	90 95       	com	r25
     2e8:	2b 81       	ldd	r18, Y+3	; 0x03
     2ea:	3c 81       	ldd	r19, Y+4	; 0x04
     2ec:	82 0f       	add	r24, r18
     2ee:	93 1f       	adc	r25, r19
     2f0:	fc 01       	movw	r30, r24
     2f2:	80 81       	ld	r24, Z
     2f4:	8a 30       	cpi	r24, 0x0A	; 10
     2f6:	18 f4       	brcc	.+6      	; 0x2fe <_Z11writeScreenPhb+0x3c>
		{
			lcd_putc('0');
     2f8:	80 e3       	ldi	r24, 0x30	; 48
     2fa:	0e 94 a7 0c 	call	0x194e	; 0x194e <_Z8lcd_putcc>
		}
		snprintf(buffer,sizeof buffer,"%d",time[i]);
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
     300:	99 27       	eor	r25, r25
     302:	87 fd       	sbrc	r24, 7
     304:	90 95       	com	r25
     306:	2b 81       	ldd	r18, Y+3	; 0x03
     308:	3c 81       	ldd	r19, Y+4	; 0x04
     30a:	82 0f       	add	r24, r18
     30c:	93 1f       	adc	r25, r19
     30e:	fc 01       	movw	r30, r24
     310:	80 81       	ld	r24, Z
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	29 2f       	mov	r18, r25
     318:	2f 93       	push	r18
     31a:	8f 93       	push	r24
     31c:	87 e9       	ldi	r24, 0x97	; 151
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	89 2f       	mov	r24, r25
     322:	8f 93       	push	r24
     324:	87 e9       	ldi	r24, 0x97	; 151
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	8f 93       	push	r24
     32a:	1f 92       	push	r1
     32c:	81 e1       	ldi	r24, 0x11	; 17
     32e:	8f 93       	push	r24
     330:	84 ea       	ldi	r24, 0xA4	; 164
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	89 2f       	mov	r24, r25
     336:	8f 93       	push	r24
     338:	84 ea       	ldi	r24, 0xA4	; 164
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	8f 93       	push	r24
     33e:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <snprintf>
     342:	8d b7       	in	r24, 0x3d	; 61
     344:	9e b7       	in	r25, 0x3e	; 62
     346:	08 96       	adiw	r24, 0x08	; 8
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	cd bf       	out	0x3d, r28	; 61
		lcd_puts(buffer);
     352:	84 ea       	ldi	r24, 0xA4	; 164
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_Z8lcd_putsPc>
		if(i>0)
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	18 16       	cp	r1, r24
     35e:	1c f4       	brge	.+6      	; 0x366 <_Z11writeScreenPhb+0xa4>
		{
			lcd_putc(':');
     360:	8a e3       	ldi	r24, 0x3A	; 58
     362:	0e 94 a7 0c 	call	0x194e	; 0x194e <_Z8lcd_putcc>
//								Seconds,	  Minutes,	   Hours,	    Day of the week, Date,		  month,	   Year.

void writeScreen(unsigned char time[], bool alarm)
{
	lcd_home();
	for(int8_t i = 2;i>=0;i--)
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	81 50       	subi	r24, 0x01	; 1
     36a:	89 83       	std	Y+1, r24	; 0x01
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	88 23       	and	r24, r24
     370:	0c f0       	brlt	.+2      	; 0x374 <_Z11writeScreenPhb+0xb2>
     372:	b6 cf       	rjmp	.-148    	; 0x2e0 <_Z11writeScreenPhb+0x1e>
		if(i>0)
		{
			lcd_putc(':');
		}
	}
	lcd_goto(1,0);
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_Z8lcd_gotohh>
	if (alarm == false)
     37c:	9d 81       	ldd	r25, Y+5	; 0x05
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	89 27       	eor	r24, r25
     382:	88 23       	and	r24, r24
     384:	09 f4       	brne	.+2      	; 0x388 <_Z11writeScreenPhb+0xc6>
     386:	4e c0       	rjmp	.+156    	; 0x424 <_Z11writeScreenPhb+0x162>
	{
		for(int8_t i = 4;i<=6;i++)
     388:	84 e0       	ldi	r24, 0x04	; 4
     38a:	8a 83       	std	Y+2, r24	; 0x02
     38c:	46 c0       	rjmp	.+140    	; 0x41a <_Z11writeScreenPhb+0x158>
		{
			if (time[i] < 10)
     38e:	8a 81       	ldd	r24, Y+2	; 0x02
     390:	99 27       	eor	r25, r25
     392:	87 fd       	sbrc	r24, 7
     394:	90 95       	com	r25
     396:	2b 81       	ldd	r18, Y+3	; 0x03
     398:	3c 81       	ldd	r19, Y+4	; 0x04
     39a:	82 0f       	add	r24, r18
     39c:	93 1f       	adc	r25, r19
     39e:	fc 01       	movw	r30, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	8a 30       	cpi	r24, 0x0A	; 10
     3a4:	18 f4       	brcc	.+6      	; 0x3ac <_Z11writeScreenPhb+0xea>
			{
				lcd_putc('0');
     3a6:	80 e3       	ldi	r24, 0x30	; 48
     3a8:	0e 94 a7 0c 	call	0x194e	; 0x194e <_Z8lcd_putcc>
			}
			snprintf(buffer,sizeof buffer,"%d",time[i]);
     3ac:	8a 81       	ldd	r24, Y+2	; 0x02
     3ae:	99 27       	eor	r25, r25
     3b0:	87 fd       	sbrc	r24, 7
     3b2:	90 95       	com	r25
     3b4:	2b 81       	ldd	r18, Y+3	; 0x03
     3b6:	3c 81       	ldd	r19, Y+4	; 0x04
     3b8:	82 0f       	add	r24, r18
     3ba:	93 1f       	adc	r25, r19
     3bc:	fc 01       	movw	r30, r24
     3be:	80 81       	ld	r24, Z
     3c0:	88 2f       	mov	r24, r24
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	29 2f       	mov	r18, r25
     3c6:	2f 93       	push	r18
     3c8:	8f 93       	push	r24
     3ca:	87 e9       	ldi	r24, 0x97	; 151
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	89 2f       	mov	r24, r25
     3d0:	8f 93       	push	r24
     3d2:	87 e9       	ldi	r24, 0x97	; 151
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	8f 93       	push	r24
     3d8:	1f 92       	push	r1
     3da:	81 e1       	ldi	r24, 0x11	; 17
     3dc:	8f 93       	push	r24
     3de:	84 ea       	ldi	r24, 0xA4	; 164
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	89 2f       	mov	r24, r25
     3e4:	8f 93       	push	r24
     3e6:	84 ea       	ldi	r24, 0xA4	; 164
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	8f 93       	push	r24
     3ec:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <snprintf>
     3f0:	8d b7       	in	r24, 0x3d	; 61
     3f2:	9e b7       	in	r25, 0x3e	; 62
     3f4:	08 96       	adiw	r24, 0x08	; 8
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
			lcd_puts(buffer);
     400:	84 ea       	ldi	r24, 0xA4	; 164
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_Z8lcd_putsPc>
			if(i<6)
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	86 30       	cpi	r24, 0x06	; 6
     40c:	1c f4       	brge	.+6      	; 0x414 <_Z11writeScreenPhb+0x152>
			{
				lcd_putc(':');
     40e:	8a e3       	ldi	r24, 0x3A	; 58
     410:	0e 94 a7 0c 	call	0x194e	; 0x194e <_Z8lcd_putcc>
		}
	}
	lcd_goto(1,0);
	if (alarm == false)
	{
		for(int8_t i = 4;i<=6;i++)
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	8f 5f       	subi	r24, 0xFF	; 255
     418:	8a 83       	std	Y+2, r24	; 0x02
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	87 30       	cpi	r24, 0x07	; 7
     41e:	0c f4       	brge	.+2      	; 0x422 <_Z11writeScreenPhb+0x160>
     420:	b6 cf       	rjmp	.-148    	; 0x38e <_Z11writeScreenPhb+0xcc>
     422:	0d c0       	rjmp	.+26     	; 0x43e <_Z11writeScreenPhb+0x17c>
			}
		}
	}
	else
	{
		snprintf(buffer,sizeof buffer,"        ");
     424:	89 e0       	ldi	r24, 0x09	; 9
     426:	ea e9       	ldi	r30, 0x9A	; 154
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	a4 ea       	ldi	r26, 0xA4	; 164
     42c:	b0 e0       	ldi	r27, 0x00	; 0
     42e:	01 90       	ld	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	8a 95       	dec	r24
     434:	e1 f7       	brne	.-8      	; 0x42e <_Z11writeScreenPhb+0x16c>
		lcd_puts(buffer);
     436:	84 ea       	ldi	r24, 0xA4	; 164
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_Z8lcd_putsPc>
	}
	lcd_goto(0,15);
     43e:	6f e0       	ldi	r22, 0x0F	; 15
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_Z8lcd_gotohh>
	if (alarmSet == true){
     446:	80 91 cb 00 	lds	r24, 0x00CB
     44a:	88 23       	and	r24, r24
     44c:	21 f0       	breq	.+8      	; 0x456 <_Z11writeScreenPhb+0x194>
		lcd_putc('A');
     44e:	81 e4       	ldi	r24, 0x41	; 65
     450:	0e 94 a7 0c 	call	0x194e	; 0x194e <_Z8lcd_putcc>
     454:	03 c0       	rjmp	.+6      	; 0x45c <_Z11writeScreenPhb+0x19a>
	}
	else
	{
		lcd_putc(' ');
     456:	80 e2       	ldi	r24, 0x20	; 32
     458:	0e 94 a7 0c 	call	0x194e	; 0x194e <_Z8lcd_putcc>
	}
}
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <_Z10changeTimebPh>:

void changeTime(bool alarm, unsigned char time[])
{
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	ee 97       	sbiw	r28, 0x3e	; 62
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	8c af       	std	Y+60, r24	; 0x3c
     48a:	7e af       	std	Y+62, r23	; 0x3e
     48c:	6d af       	std	Y+61, r22	; 0x3d
	uint8_t x = 0, y = 0;
     48e:	19 82       	std	Y+1, r1	; 0x01
     490:	1a 82       	std	Y+2, r1	; 0x02
	writeScreen(time, alarm);
     492:	8d ad       	ldd	r24, Y+61	; 0x3d
     494:	9e ad       	ldd	r25, Y+62	; 0x3e
     496:	6c ad       	ldd	r22, Y+60	; 0x3c
     498:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11writeScreenPhb>
	t1_Stop_TOI();
     49c:	0e 94 2a 01 	call	0x254	; 0x254 <_Z11t1_Stop_TOIv>
	lcd_cursor(true,true);
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0e 94 4d 0c 	call	0x189a	; 0x189a <_Z10lcd_cursorbb>
	lcd_home();
     4a8:	0e 94 43 0c 	call	0x1886	; 0x1886 <_Z8lcd_homev>
	while ((PIND & (1<<PD0)) == (1<<PD0)) {}
     4ac:	00 00       	nop
     4ae:	80 e3       	ldi	r24, 0x30	; 48
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	88 2f       	mov	r24, r24
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	81 70       	andi	r24, 0x01	; 1
     4bc:	99 27       	eor	r25, r25
     4be:	21 e0       	ldi	r18, 0x01	; 1
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <_Z10changeTimebPh+0x5a>
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	22 23       	and	r18, r18
     4c8:	91 f7       	brne	.-28     	; 0x4ae <_Z10changeTimebPh+0x42>
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	a0 e2       	ldi	r26, 0x20	; 32
     4d0:	b1 e4       	ldi	r27, 0x41	; 65
     4d2:	8c 83       	std	Y+4, r24	; 0x04
     4d4:	9d 83       	std	Y+5, r25	; 0x05
     4d6:	ae 83       	std	Y+6, r26	; 0x06
     4d8:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	4a e7       	ldi	r20, 0x7A	; 122
     4e0:	54 e4       	ldi	r21, 0x44	; 68
     4e2:	6c 81       	ldd	r22, Y+4	; 0x04
     4e4:	7d 81       	ldd	r23, Y+5	; 0x05
     4e6:	8e 81       	ldd	r24, Y+6	; 0x06
     4e8:	9f 81       	ldd	r25, Y+7	; 0x07
     4ea:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__mulsf3>
     4ee:	dc 01       	movw	r26, r24
     4f0:	cb 01       	movw	r24, r22
     4f2:	88 87       	std	Y+8, r24	; 0x08
     4f4:	99 87       	std	Y+9, r25	; 0x09
     4f6:	aa 87       	std	Y+10, r26	; 0x0a
     4f8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e8       	ldi	r20, 0x80	; 128
     500:	5f e3       	ldi	r21, 0x3F	; 63
     502:	68 85       	ldd	r22, Y+8	; 0x08
     504:	79 85       	ldd	r23, Y+9	; 0x09
     506:	8a 85       	ldd	r24, Y+10	; 0x0a
     508:	9b 85       	ldd	r25, Y+11	; 0x0b
     50a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__cmpsf2>
     50e:	88 23       	and	r24, r24
     510:	2c f4       	brge	.+10     	; 0x51c <_Z10changeTimebPh+0xb0>
		__ticks = 1;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	9d 87       	std	Y+13, r25	; 0x0d
     518:	8c 87       	std	Y+12, r24	; 0x0c
     51a:	3f c0       	rjmp	.+126    	; 0x59a <_Z10changeTimebPh+0x12e>
	else if (__tmp > 65535)
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	3f ef       	ldi	r19, 0xFF	; 255
     520:	4f e7       	ldi	r20, 0x7F	; 127
     522:	57 e4       	ldi	r21, 0x47	; 71
     524:	68 85       	ldd	r22, Y+8	; 0x08
     526:	79 85       	ldd	r23, Y+9	; 0x09
     528:	8a 85       	ldd	r24, Y+10	; 0x0a
     52a:	9b 85       	ldd	r25, Y+11	; 0x0b
     52c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__gesf2>
     530:	18 16       	cp	r1, r24
     532:	4c f5       	brge	.+82     	; 0x586 <_Z10changeTimebPh+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e2       	ldi	r20, 0x20	; 32
     53a:	51 e4       	ldi	r21, 0x41	; 65
     53c:	6c 81       	ldd	r22, Y+4	; 0x04
     53e:	7d 81       	ldd	r23, Y+5	; 0x05
     540:	8e 81       	ldd	r24, Y+6	; 0x06
     542:	9f 81       	ldd	r25, Y+7	; 0x07
     544:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__mulsf3>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	bc 01       	movw	r22, r24
     54e:	cd 01       	movw	r24, r26
     550:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fixunssfsi>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	9d 87       	std	Y+13, r25	; 0x0d
     55a:	8c 87       	std	Y+12, r24	; 0x0c
     55c:	0f c0       	rjmp	.+30     	; 0x57c <_Z10changeTimebPh+0x110>
     55e:	84 e6       	ldi	r24, 0x64	; 100
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9f 87       	std	Y+15, r25	; 0x0f
     564:	8e 87       	std	Y+14, r24	; 0x0e
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     566:	8e 85       	ldd	r24, Y+14	; 0x0e
     568:	9f 85       	ldd	r25, Y+15	; 0x0f
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <_Z10changeTimebPh+0xfe>
     56e:	9f 87       	std	Y+15, r25	; 0x0f
     570:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     572:	8c 85       	ldd	r24, Y+12	; 0x0c
     574:	9d 85       	ldd	r25, Y+13	; 0x0d
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	9d 87       	std	Y+13, r25	; 0x0d
     57a:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57c:	8c 85       	ldd	r24, Y+12	; 0x0c
     57e:	9d 85       	ldd	r25, Y+13	; 0x0d
     580:	00 97       	sbiw	r24, 0x00	; 0
     582:	69 f7       	brne	.-38     	; 0x55e <_Z10changeTimebPh+0xf2>
	_delay_ms(10);
	while ((PIND & (1<<PD0)) != (1<<PD0))						//button 1
     584:	91 c3       	rjmp	.+1826   	; 0xca8 <__stack+0x449>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     586:	68 85       	ldd	r22, Y+8	; 0x08
     588:	79 85       	ldd	r23, Y+9	; 0x09
     58a:	8a 85       	ldd	r24, Y+10	; 0x0a
     58c:	9b 85       	ldd	r25, Y+11	; 0x0b
     58e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fixunssfsi>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	9d 87       	std	Y+13, r25	; 0x0d
     598:	8c 87       	std	Y+12, r24	; 0x0c
     59a:	8c 85       	ldd	r24, Y+12	; 0x0c
     59c:	9d 85       	ldd	r25, Y+13	; 0x0d
     59e:	99 8b       	std	Y+17, r25	; 0x11
     5a0:	88 8b       	std	Y+16, r24	; 0x10
     5a2:	88 89       	ldd	r24, Y+16	; 0x10
     5a4:	99 89       	ldd	r25, Y+17	; 0x11
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <_Z10changeTimebPh+0x13a>
     5aa:	99 8b       	std	Y+17, r25	; 0x11
     5ac:	88 8b       	std	Y+16, r24	; 0x10
     5ae:	7c c3       	rjmp	.+1784   	; 0xca8 <__stack+0x449>
	{
		if ((PIND & (1<<PD1)) == (1<<PD1))						//button 2
     5b0:	80 e3       	ldi	r24, 0x30	; 48
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	88 2f       	mov	r24, r24
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	82 70       	andi	r24, 0x02	; 2
     5be:	99 27       	eor	r25, r25
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	00 97       	sbiw	r24, 0x00	; 0
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <_Z10changeTimebPh+0x15c>
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	22 23       	and	r18, r18
     5ca:	09 f4       	brne	.+2      	; 0x5ce <_Z10changeTimebPh+0x162>
     5cc:	a2 c0       	rjmp	.+324    	; 0x712 <_Z10changeTimebPh+0x2a6>
		{
			if (x == 7)
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	87 30       	cpi	r24, 0x07	; 7
     5d2:	69 f4       	brne	.+26     	; 0x5ee <_Z10changeTimebPh+0x182>
			{
				x = 0;
     5d4:	19 82       	std	Y+1, r1	; 0x01
				if(alarm == false)
     5d6:	9c ad       	ldd	r25, Y+60	; 0x3c
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	89 27       	eor	r24, r25
     5dc:	88 23       	and	r24, r24
     5de:	99 f0       	breq	.+38     	; 0x606 <_Z10changeTimebPh+0x19a>
				{
					y = 1 - y;
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	8a 81       	ldd	r24, Y+2	; 0x02
     5e4:	f9 2f       	mov	r31, r25
     5e6:	f8 1b       	sub	r31, r24
     5e8:	8f 2f       	mov	r24, r31
     5ea:	8a 83       	std	Y+2, r24	; 0x02
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <_Z10changeTimebPh+0x19a>
				}
			}
			else
			{
				if (x == 1 || x == 4)
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	19 f0       	breq	.+6      	; 0x5fa <_Z10changeTimebPh+0x18e>
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	84 30       	cpi	r24, 0x04	; 4
     5f8:	19 f4       	brne	.+6      	; 0x600 <_Z10changeTimebPh+0x194>
				{
					x++;
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	8f 5f       	subi	r24, 0xFF	; 255
     5fe:	89 83       	std	Y+1, r24	; 0x01
				}
				x++;
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	8f 5f       	subi	r24, 0xFF	; 255
     604:	89 83       	std	Y+1, r24	; 0x01
			}
			lcd_goto(y,x);
     606:	69 81       	ldd	r22, Y+1	; 0x01
     608:	8a 81       	ldd	r24, Y+2	; 0x02
     60a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_Z8lcd_gotohh>
			while((PIND & (1<<PD1)) == 2) {}
     60e:	00 00       	nop
     610:	80 e3       	ldi	r24, 0x30	; 48
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	fc 01       	movw	r30, r24
     616:	80 81       	ld	r24, Z
     618:	88 2f       	mov	r24, r24
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	82 70       	andi	r24, 0x02	; 2
     61e:	99 27       	eor	r25, r25
     620:	21 e0       	ldi	r18, 0x01	; 1
     622:	00 97       	sbiw	r24, 0x00	; 0
     624:	09 f4       	brne	.+2      	; 0x628 <_Z10changeTimebPh+0x1bc>
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	22 23       	and	r18, r18
     62a:	91 f7       	brne	.-28     	; 0x610 <_Z10changeTimebPh+0x1a4>
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	a0 e2       	ldi	r26, 0x20	; 32
     632:	b1 e4       	ldi	r27, 0x41	; 65
     634:	8a 8b       	std	Y+18, r24	; 0x12
     636:	9b 8b       	std	Y+19, r25	; 0x13
     638:	ac 8b       	std	Y+20, r26	; 0x14
     63a:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	4a e7       	ldi	r20, 0x7A	; 122
     642:	54 e4       	ldi	r21, 0x44	; 68
     644:	6a 89       	ldd	r22, Y+18	; 0x12
     646:	7b 89       	ldd	r23, Y+19	; 0x13
     648:	8c 89       	ldd	r24, Y+20	; 0x14
     64a:	9d 89       	ldd	r25, Y+21	; 0x15
     64c:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__mulsf3>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	8e 8b       	std	Y+22, r24	; 0x16
     656:	9f 8b       	std	Y+23, r25	; 0x17
     658:	a8 8f       	std	Y+24, r26	; 0x18
     65a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	40 e8       	ldi	r20, 0x80	; 128
     662:	5f e3       	ldi	r21, 0x3F	; 63
     664:	6e 89       	ldd	r22, Y+22	; 0x16
     666:	7f 89       	ldd	r23, Y+23	; 0x17
     668:	88 8d       	ldd	r24, Y+24	; 0x18
     66a:	99 8d       	ldd	r25, Y+25	; 0x19
     66c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__cmpsf2>
     670:	88 23       	and	r24, r24
     672:	2c f4       	brge	.+10     	; 0x67e <_Z10changeTimebPh+0x212>
		__ticks = 1;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	9b 8f       	std	Y+27, r25	; 0x1b
     67a:	8a 8f       	std	Y+26, r24	; 0x1a
     67c:	3f c0       	rjmp	.+126    	; 0x6fc <_Z10changeTimebPh+0x290>
	else if (__tmp > 65535)
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	3f ef       	ldi	r19, 0xFF	; 255
     682:	4f e7       	ldi	r20, 0x7F	; 127
     684:	57 e4       	ldi	r21, 0x47	; 71
     686:	6e 89       	ldd	r22, Y+22	; 0x16
     688:	7f 89       	ldd	r23, Y+23	; 0x17
     68a:	88 8d       	ldd	r24, Y+24	; 0x18
     68c:	99 8d       	ldd	r25, Y+25	; 0x19
     68e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__gesf2>
     692:	18 16       	cp	r1, r24
     694:	4c f5       	brge	.+82     	; 0x6e8 <_Z10changeTimebPh+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 e2       	ldi	r20, 0x20	; 32
     69c:	51 e4       	ldi	r21, 0x41	; 65
     69e:	6a 89       	ldd	r22, Y+18	; 0x12
     6a0:	7b 89       	ldd	r23, Y+19	; 0x13
     6a2:	8c 89       	ldd	r24, Y+20	; 0x14
     6a4:	9d 89       	ldd	r25, Y+21	; 0x15
     6a6:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__mulsf3>
     6aa:	dc 01       	movw	r26, r24
     6ac:	cb 01       	movw	r24, r22
     6ae:	bc 01       	movw	r22, r24
     6b0:	cd 01       	movw	r24, r26
     6b2:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fixunssfsi>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	9b 8f       	std	Y+27, r25	; 0x1b
     6bc:	8a 8f       	std	Y+26, r24	; 0x1a
     6be:	0f c0       	rjmp	.+30     	; 0x6de <_Z10changeTimebPh+0x272>
     6c0:	84 e6       	ldi	r24, 0x64	; 100
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	9d 8f       	std	Y+29, r25	; 0x1d
     6c6:	8c 8f       	std	Y+28, r24	; 0x1c
     6c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <_Z10changeTimebPh+0x260>
     6d0:	9d 8f       	std	Y+29, r25	; 0x1d
     6d2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	9b 8f       	std	Y+27, r25	; 0x1b
     6dc:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6de:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6e2:	00 97       	sbiw	r24, 0x00	; 0
     6e4:	69 f7       	brne	.-38     	; 0x6c0 <_Z10changeTimebPh+0x254>
     6e6:	e0 c2       	rjmp	.+1472   	; 0xca8 <__stack+0x449>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e8:	6e 89       	ldd	r22, Y+22	; 0x16
     6ea:	7f 89       	ldd	r23, Y+23	; 0x17
     6ec:	88 8d       	ldd	r24, Y+24	; 0x18
     6ee:	99 8d       	ldd	r25, Y+25	; 0x19
     6f0:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fixunssfsi>
     6f4:	dc 01       	movw	r26, r24
     6f6:	cb 01       	movw	r24, r22
     6f8:	9b 8f       	std	Y+27, r25	; 0x1b
     6fa:	8a 8f       	std	Y+26, r24	; 0x1a
     6fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
     700:	9f 8f       	std	Y+31, r25	; 0x1f
     702:	8e 8f       	std	Y+30, r24	; 0x1e
     704:	8e 8d       	ldd	r24, Y+30	; 0x1e
     706:	9f 8d       	ldd	r25, Y+31	; 0x1f
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <_Z10changeTimebPh+0x29c>
     70c:	9f 8f       	std	Y+31, r25	; 0x1f
     70e:	8e 8f       	std	Y+30, r24	; 0x1e
     710:	cb c2       	rjmp	.+1430   	; 0xca8 <__stack+0x449>
			_delay_ms(10);
		}
		else if ((PIND & (1<<PD2)) == (1<<PD2))				//button 3	UP
     712:	80 e3       	ldi	r24, 0x30	; 48
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	fc 01       	movw	r30, r24
     718:	80 81       	ld	r24, Z
     71a:	88 2f       	mov	r24, r24
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	84 70       	andi	r24, 0x04	; 4
     720:	99 27       	eor	r25, r25
     722:	21 e0       	ldi	r18, 0x01	; 1
     724:	00 97       	sbiw	r24, 0x00	; 0
     726:	09 f4       	brne	.+2      	; 0x72a <_Z10changeTimebPh+0x2be>
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	22 23       	and	r18, r18
     72c:	09 f4       	brne	.+2      	; 0x730 <_Z10changeTimebPh+0x2c4>
     72e:	57 c1       	rjmp	.+686    	; 0x9de <__stack+0x17f>
		{
			if (x == 0 || x == 3 || x == 6)
     730:	89 81       	ldd	r24, Y+1	; 0x01
     732:	88 23       	and	r24, r24
     734:	31 f0       	breq	.+12     	; 0x742 <_Z10changeTimebPh+0x2d6>
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	83 30       	cpi	r24, 0x03	; 3
     73a:	19 f0       	breq	.+6      	; 0x742 <_Z10changeTimebPh+0x2d6>
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	86 30       	cpi	r24, 0x06	; 6
     740:	39 f5       	brne	.+78     	; 0x790 <_Z10changeTimebPh+0x324>
			{
				time[index[lcd_get_row()][lcd_get_column()]] += 10;
     742:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z11lcd_get_rowv>
     746:	08 2f       	mov	r16, r24
     748:	10 e0       	ldi	r17, 0x00	; 0
     74a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_Z14lcd_get_columnv>
     74e:	88 2f       	mov	r24, r24
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	98 01       	movw	r18, r16
     754:	22 95       	swap	r18
     756:	32 95       	swap	r19
     758:	30 7f       	andi	r19, 0xF0	; 240
     75a:	32 27       	eor	r19, r18
     75c:	20 7f       	andi	r18, 0xF0	; 240
     75e:	32 27       	eor	r19, r18
     760:	82 0f       	add	r24, r18
     762:	93 1f       	adc	r25, r19
     764:	80 5a       	subi	r24, 0xA0	; 160
     766:	9f 4f       	sbci	r25, 0xFF	; 255
     768:	fc 01       	movw	r30, r24
     76a:	40 81       	ld	r20, Z
     76c:	84 2f       	mov	r24, r20
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	2d ad       	ldd	r18, Y+61	; 0x3d
     772:	3e ad       	ldd	r19, Y+62	; 0x3e
     774:	82 0f       	add	r24, r18
     776:	93 1f       	adc	r25, r19
     778:	24 2f       	mov	r18, r20
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	4d ad       	ldd	r20, Y+61	; 0x3d
     77e:	5e ad       	ldd	r21, Y+62	; 0x3e
     780:	24 0f       	add	r18, r20
     782:	35 1f       	adc	r19, r21
     784:	f9 01       	movw	r30, r18
     786:	20 81       	ld	r18, Z
     788:	26 5f       	subi	r18, 0xF6	; 246
     78a:	fc 01       	movw	r30, r24
     78c:	20 83       	st	Z, r18
     78e:	20 c0       	rjmp	.+64     	; 0x7d0 <_Z10changeTimebPh+0x364>
			}
			else
			{
				time[index[lcd_get_row()][lcd_get_column()]] ++;
     790:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z11lcd_get_rowv>
     794:	08 2f       	mov	r16, r24
     796:	10 e0       	ldi	r17, 0x00	; 0
     798:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_Z14lcd_get_columnv>
     79c:	88 2f       	mov	r24, r24
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	98 01       	movw	r18, r16
     7a2:	22 95       	swap	r18
     7a4:	32 95       	swap	r19
     7a6:	30 7f       	andi	r19, 0xF0	; 240
     7a8:	32 27       	eor	r19, r18
     7aa:	20 7f       	andi	r18, 0xF0	; 240
     7ac:	32 27       	eor	r19, r18
     7ae:	82 0f       	add	r24, r18
     7b0:	93 1f       	adc	r25, r19
     7b2:	80 5a       	subi	r24, 0xA0	; 160
     7b4:	9f 4f       	sbci	r25, 0xFF	; 255
     7b6:	fc 01       	movw	r30, r24
     7b8:	80 81       	ld	r24, Z
     7ba:	88 2f       	mov	r24, r24
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	2d ad       	ldd	r18, Y+61	; 0x3d
     7c0:	3e ad       	ldd	r19, Y+62	; 0x3e
     7c2:	82 0f       	add	r24, r18
     7c4:	93 1f       	adc	r25, r19
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 81       	ld	r18, Z
     7ca:	2f 5f       	subi	r18, 0xFF	; 255
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 83       	st	Z, r18
			}
			if (time[index[lcd_get_row()][lcd_get_column()]] > MaxVal[lcd_get_row()][lcd_get_column()])
     7d0:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z11lcd_get_rowv>
     7d4:	08 2f       	mov	r16, r24
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_Z14lcd_get_columnv>
     7dc:	88 2f       	mov	r24, r24
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	98 01       	movw	r18, r16
     7e2:	22 95       	swap	r18
     7e4:	32 95       	swap	r19
     7e6:	30 7f       	andi	r19, 0xF0	; 240
     7e8:	32 27       	eor	r19, r18
     7ea:	20 7f       	andi	r18, 0xF0	; 240
     7ec:	32 27       	eor	r19, r18
     7ee:	82 0f       	add	r24, r18
     7f0:	93 1f       	adc	r25, r19
     7f2:	80 5a       	subi	r24, 0xA0	; 160
     7f4:	9f 4f       	sbci	r25, 0xFF	; 255
     7f6:	fc 01       	movw	r30, r24
     7f8:	80 81       	ld	r24, Z
     7fa:	88 2f       	mov	r24, r24
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	2d ad       	ldd	r18, Y+61	; 0x3d
     800:	3e ad       	ldd	r19, Y+62	; 0x3e
     802:	82 0f       	add	r24, r18
     804:	93 1f       	adc	r25, r19
     806:	fc 01       	movw	r30, r24
     808:	f0 80       	ld	r15, Z
     80a:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z11lcd_get_rowv>
     80e:	08 2f       	mov	r16, r24
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_Z14lcd_get_columnv>
     816:	88 2f       	mov	r24, r24
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	98 01       	movw	r18, r16
     81c:	22 0f       	add	r18, r18
     81e:	33 1f       	adc	r19, r19
     820:	22 0f       	add	r18, r18
     822:	33 1f       	adc	r19, r19
     824:	22 0f       	add	r18, r18
     826:	33 1f       	adc	r19, r19
     828:	82 0f       	add	r24, r18
     82a:	93 1f       	adc	r25, r19
     82c:	80 58       	subi	r24, 0x80	; 128
     82e:	9f 4f       	sbci	r25, 0xFF	; 255
     830:	fc 01       	movw	r30, r24
     832:	90 81       	ld	r25, Z
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	9f 15       	cp	r25, r15
     838:	08 f0       	brcs	.+2      	; 0x83c <_Z10changeTimebPh+0x3d0>
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	88 23       	and	r24, r24
     83e:	09 f4       	brne	.+2      	; 0x842 <_Z10changeTimebPh+0x3d6>
     840:	43 c0       	rjmp	.+134    	; 0x8c8 <__stack+0x69>
			{
				time[index[lcd_get_row()][lcd_get_column()]] -= (MaxVal[lcd_get_row()][lcd_get_column()]+1);
     842:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z11lcd_get_rowv>
     846:	08 2f       	mov	r16, r24
     848:	10 e0       	ldi	r17, 0x00	; 0
     84a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_Z14lcd_get_columnv>
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	98 01       	movw	r18, r16
     854:	22 0f       	add	r18, r18
     856:	33 1f       	adc	r19, r19
     858:	22 0f       	add	r18, r18
     85a:	33 1f       	adc	r19, r19
     85c:	22 0f       	add	r18, r18
     85e:	33 1f       	adc	r19, r19
     860:	82 0f       	add	r24, r18
     862:	93 1f       	adc	r25, r19
     864:	80 58       	subi	r24, 0x80	; 128
     866:	9f 4f       	sbci	r25, 0xFF	; 255
     868:	fc 01       	movw	r30, r24
     86a:	80 81       	ld	r24, Z
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	8c 01       	movw	r16, r24
     872:	0f 5f       	subi	r16, 0xFF	; 255
     874:	1f 4f       	sbci	r17, 0xFF	; 255
     876:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z11lcd_get_rowv>
     87a:	e8 2e       	mov	r14, r24
     87c:	f1 2c       	mov	r15, r1
     87e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_Z14lcd_get_columnv>
     882:	88 2f       	mov	r24, r24
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	97 01       	movw	r18, r14
     888:	22 95       	swap	r18
     88a:	32 95       	swap	r19
     88c:	30 7f       	andi	r19, 0xF0	; 240
     88e:	32 27       	eor	r19, r18
     890:	20 7f       	andi	r18, 0xF0	; 240
     892:	32 27       	eor	r19, r18
     894:	82 0f       	add	r24, r18
     896:	93 1f       	adc	r25, r19
     898:	80 5a       	subi	r24, 0xA0	; 160
     89a:	9f 4f       	sbci	r25, 0xFF	; 255
     89c:	fc 01       	movw	r30, r24
     89e:	40 81       	ld	r20, Z
     8a0:	84 2f       	mov	r24, r20
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	2d ad       	ldd	r18, Y+61	; 0x3d
     8a6:	3e ad       	ldd	r19, Y+62	; 0x3e
     8a8:	82 0f       	add	r24, r18
     8aa:	93 1f       	adc	r25, r19
     8ac:	24 2f       	mov	r18, r20
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	4d ad       	ldd	r20, Y+61	; 0x3d
     8b2:	5e ad       	ldd	r21, Y+62	; 0x3e
     8b4:	24 0f       	add	r18, r20
     8b6:	35 1f       	adc	r19, r21
     8b8:	f9 01       	movw	r30, r18
     8ba:	20 81       	ld	r18, Z
     8bc:	22 2f       	mov	r18, r18
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	20 1b       	sub	r18, r16
     8c2:	31 0b       	sbc	r19, r17
     8c4:	fc 01       	movw	r30, r24
     8c6:	20 83       	st	Z, r18
			}
			writeScreen(time, alarm);
     8c8:	8d ad       	ldd	r24, Y+61	; 0x3d
     8ca:	9e ad       	ldd	r25, Y+62	; 0x3e
     8cc:	6c ad       	ldd	r22, Y+60	; 0x3c
     8ce:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11writeScreenPhb>
			lcd_goto(y,x);
     8d2:	69 81       	ldd	r22, Y+1	; 0x01
     8d4:	8a 81       	ldd	r24, Y+2	; 0x02
     8d6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_Z8lcd_gotohh>
			while ((PIND & (1<<PD2)) == 4) {}
     8da:	00 00       	nop
     8dc:	80 e3       	ldi	r24, 0x30	; 48
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	fc 01       	movw	r30, r24
     8e2:	80 81       	ld	r24, Z
     8e4:	88 2f       	mov	r24, r24
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	84 70       	andi	r24, 0x04	; 4
     8ea:	99 27       	eor	r25, r25
     8ec:	21 e0       	ldi	r18, 0x01	; 1
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <__stack+0x95>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	22 23       	and	r18, r18
     8f6:	91 f7       	brne	.-28     	; 0x8dc <__stack+0x7d>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e2       	ldi	r26, 0x20	; 32
     8fe:	b1 e4       	ldi	r27, 0x41	; 65
     900:	88 a3       	std	Y+32, r24	; 0x20
     902:	99 a3       	std	Y+33, r25	; 0x21
     904:	aa a3       	std	Y+34, r26	; 0x22
     906:	bb a3       	std	Y+35, r27	; 0x23

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	4a e7       	ldi	r20, 0x7A	; 122
     90e:	54 e4       	ldi	r21, 0x44	; 68
     910:	68 a1       	ldd	r22, Y+32	; 0x20
     912:	79 a1       	ldd	r23, Y+33	; 0x21
     914:	8a a1       	ldd	r24, Y+34	; 0x22
     916:	9b a1       	ldd	r25, Y+35	; 0x23
     918:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__mulsf3>
     91c:	dc 01       	movw	r26, r24
     91e:	cb 01       	movw	r24, r22
     920:	8c a3       	std	Y+36, r24	; 0x24
     922:	9d a3       	std	Y+37, r25	; 0x25
     924:	ae a3       	std	Y+38, r26	; 0x26
     926:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	40 e8       	ldi	r20, 0x80	; 128
     92e:	5f e3       	ldi	r21, 0x3F	; 63
     930:	6c a1       	ldd	r22, Y+36	; 0x24
     932:	7d a1       	ldd	r23, Y+37	; 0x25
     934:	8e a1       	ldd	r24, Y+38	; 0x26
     936:	9f a1       	ldd	r25, Y+39	; 0x27
     938:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__cmpsf2>
     93c:	88 23       	and	r24, r24
     93e:	2c f4       	brge	.+10     	; 0x94a <__stack+0xeb>
		__ticks = 1;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	99 a7       	std	Y+41, r25	; 0x29
     946:	88 a7       	std	Y+40, r24	; 0x28
     948:	3f c0       	rjmp	.+126    	; 0x9c8 <__stack+0x169>
	else if (__tmp > 65535)
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	3f ef       	ldi	r19, 0xFF	; 255
     94e:	4f e7       	ldi	r20, 0x7F	; 127
     950:	57 e4       	ldi	r21, 0x47	; 71
     952:	6c a1       	ldd	r22, Y+36	; 0x24
     954:	7d a1       	ldd	r23, Y+37	; 0x25
     956:	8e a1       	ldd	r24, Y+38	; 0x26
     958:	9f a1       	ldd	r25, Y+39	; 0x27
     95a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__gesf2>
     95e:	18 16       	cp	r1, r24
     960:	4c f5       	brge	.+82     	; 0x9b4 <__stack+0x155>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	40 e2       	ldi	r20, 0x20	; 32
     968:	51 e4       	ldi	r21, 0x41	; 65
     96a:	68 a1       	ldd	r22, Y+32	; 0x20
     96c:	79 a1       	ldd	r23, Y+33	; 0x21
     96e:	8a a1       	ldd	r24, Y+34	; 0x22
     970:	9b a1       	ldd	r25, Y+35	; 0x23
     972:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__mulsf3>
     976:	dc 01       	movw	r26, r24
     978:	cb 01       	movw	r24, r22
     97a:	bc 01       	movw	r22, r24
     97c:	cd 01       	movw	r24, r26
     97e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fixunssfsi>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	99 a7       	std	Y+41, r25	; 0x29
     988:	88 a7       	std	Y+40, r24	; 0x28
     98a:	0f c0       	rjmp	.+30     	; 0x9aa <__stack+0x14b>
     98c:	84 e6       	ldi	r24, 0x64	; 100
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	9b a7       	std	Y+43, r25	; 0x2b
     992:	8a a7       	std	Y+42, r24	; 0x2a
     994:	8a a5       	ldd	r24, Y+42	; 0x2a
     996:	9b a5       	ldd	r25, Y+43	; 0x2b
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <__stack+0x139>
     99c:	9b a7       	std	Y+43, r25	; 0x2b
     99e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9a0:	88 a5       	ldd	r24, Y+40	; 0x28
     9a2:	99 a5       	ldd	r25, Y+41	; 0x29
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	99 a7       	std	Y+41, r25	; 0x29
     9a8:	88 a7       	std	Y+40, r24	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9aa:	88 a5       	ldd	r24, Y+40	; 0x28
     9ac:	99 a5       	ldd	r25, Y+41	; 0x29
     9ae:	00 97       	sbiw	r24, 0x00	; 0
     9b0:	69 f7       	brne	.-38     	; 0x98c <__stack+0x12d>
     9b2:	7a c1       	rjmp	.+756    	; 0xca8 <__stack+0x449>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9b4:	6c a1       	ldd	r22, Y+36	; 0x24
     9b6:	7d a1       	ldd	r23, Y+37	; 0x25
     9b8:	8e a1       	ldd	r24, Y+38	; 0x26
     9ba:	9f a1       	ldd	r25, Y+39	; 0x27
     9bc:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fixunssfsi>
     9c0:	dc 01       	movw	r26, r24
     9c2:	cb 01       	movw	r24, r22
     9c4:	99 a7       	std	Y+41, r25	; 0x29
     9c6:	88 a7       	std	Y+40, r24	; 0x28
     9c8:	88 a5       	ldd	r24, Y+40	; 0x28
     9ca:	99 a5       	ldd	r25, Y+41	; 0x29
     9cc:	9d a7       	std	Y+45, r25	; 0x2d
     9ce:	8c a7       	std	Y+44, r24	; 0x2c
     9d0:	8c a5       	ldd	r24, Y+44	; 0x2c
     9d2:	9d a5       	ldd	r25, Y+45	; 0x2d
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <__stack+0x175>
     9d8:	9d a7       	std	Y+45, r25	; 0x2d
     9da:	8c a7       	std	Y+44, r24	; 0x2c
     9dc:	65 c1       	rjmp	.+714    	; 0xca8 <__stack+0x449>
			_delay_ms(10);
		}
		else if ((PIND & (1<<PD3)) == (1<<PD3))				//button 4	Down
     9de:	80 e3       	ldi	r24, 0x30	; 48
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	fc 01       	movw	r30, r24
     9e4:	80 81       	ld	r24, Z
     9e6:	88 2f       	mov	r24, r24
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	88 70       	andi	r24, 0x08	; 8
     9ec:	99 27       	eor	r25, r25
     9ee:	21 e0       	ldi	r18, 0x01	; 1
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <__stack+0x197>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	22 23       	and	r18, r18
     9f8:	09 f4       	brne	.+2      	; 0x9fc <__stack+0x19d>
     9fa:	56 c1       	rjmp	.+684    	; 0xca8 <__stack+0x449>
		{
			if (x == 0 || x == 3 || x == 6){
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	88 23       	and	r24, r24
     a00:	31 f0       	breq	.+12     	; 0xa0e <__stack+0x1af>
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	83 30       	cpi	r24, 0x03	; 3
     a06:	19 f0       	breq	.+6      	; 0xa0e <__stack+0x1af>
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	86 30       	cpi	r24, 0x06	; 6
     a0c:	39 f5       	brne	.+78     	; 0xa5c <__stack+0x1fd>
				time[index[lcd_get_row()][lcd_get_column()]] -= 10;
     a0e:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z11lcd_get_rowv>
     a12:	08 2f       	mov	r16, r24
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_Z14lcd_get_columnv>
     a1a:	88 2f       	mov	r24, r24
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	98 01       	movw	r18, r16
     a20:	22 95       	swap	r18
     a22:	32 95       	swap	r19
     a24:	30 7f       	andi	r19, 0xF0	; 240
     a26:	32 27       	eor	r19, r18
     a28:	20 7f       	andi	r18, 0xF0	; 240
     a2a:	32 27       	eor	r19, r18
     a2c:	82 0f       	add	r24, r18
     a2e:	93 1f       	adc	r25, r19
     a30:	80 5a       	subi	r24, 0xA0	; 160
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	fc 01       	movw	r30, r24
     a36:	40 81       	ld	r20, Z
     a38:	84 2f       	mov	r24, r20
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	2d ad       	ldd	r18, Y+61	; 0x3d
     a3e:	3e ad       	ldd	r19, Y+62	; 0x3e
     a40:	82 0f       	add	r24, r18
     a42:	93 1f       	adc	r25, r19
     a44:	24 2f       	mov	r18, r20
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	4d ad       	ldd	r20, Y+61	; 0x3d
     a4a:	5e ad       	ldd	r21, Y+62	; 0x3e
     a4c:	24 0f       	add	r18, r20
     a4e:	35 1f       	adc	r19, r21
     a50:	f9 01       	movw	r30, r18
     a52:	20 81       	ld	r18, Z
     a54:	2a 50       	subi	r18, 0x0A	; 10
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
     a5a:	20 c0       	rjmp	.+64     	; 0xa9c <__stack+0x23d>
			}
			else
			{
				time[index[lcd_get_row()][lcd_get_column()]] --;
     a5c:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z11lcd_get_rowv>
     a60:	08 2f       	mov	r16, r24
     a62:	10 e0       	ldi	r17, 0x00	; 0
     a64:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_Z14lcd_get_columnv>
     a68:	88 2f       	mov	r24, r24
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	98 01       	movw	r18, r16
     a6e:	22 95       	swap	r18
     a70:	32 95       	swap	r19
     a72:	30 7f       	andi	r19, 0xF0	; 240
     a74:	32 27       	eor	r19, r18
     a76:	20 7f       	andi	r18, 0xF0	; 240
     a78:	32 27       	eor	r19, r18
     a7a:	82 0f       	add	r24, r18
     a7c:	93 1f       	adc	r25, r19
     a7e:	80 5a       	subi	r24, 0xA0	; 160
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	fc 01       	movw	r30, r24
     a84:	80 81       	ld	r24, Z
     a86:	88 2f       	mov	r24, r24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	2d ad       	ldd	r18, Y+61	; 0x3d
     a8c:	3e ad       	ldd	r19, Y+62	; 0x3e
     a8e:	82 0f       	add	r24, r18
     a90:	93 1f       	adc	r25, r19
     a92:	fc 01       	movw	r30, r24
     a94:	20 81       	ld	r18, Z
     a96:	21 50       	subi	r18, 0x01	; 1
     a98:	fc 01       	movw	r30, r24
     a9a:	20 83       	st	Z, r18
			}
			if (time[index[lcd_get_row()][lcd_get_column()]] > MaxVal[lcd_get_row()][lcd_get_column()])
     a9c:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z11lcd_get_rowv>
     aa0:	08 2f       	mov	r16, r24
     aa2:	10 e0       	ldi	r17, 0x00	; 0
     aa4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_Z14lcd_get_columnv>
     aa8:	88 2f       	mov	r24, r24
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	98 01       	movw	r18, r16
     aae:	22 95       	swap	r18
     ab0:	32 95       	swap	r19
     ab2:	30 7f       	andi	r19, 0xF0	; 240
     ab4:	32 27       	eor	r19, r18
     ab6:	20 7f       	andi	r18, 0xF0	; 240
     ab8:	32 27       	eor	r19, r18
     aba:	82 0f       	add	r24, r18
     abc:	93 1f       	adc	r25, r19
     abe:	80 5a       	subi	r24, 0xA0	; 160
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	fc 01       	movw	r30, r24
     ac4:	80 81       	ld	r24, Z
     ac6:	88 2f       	mov	r24, r24
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	2d ad       	ldd	r18, Y+61	; 0x3d
     acc:	3e ad       	ldd	r19, Y+62	; 0x3e
     ace:	82 0f       	add	r24, r18
     ad0:	93 1f       	adc	r25, r19
     ad2:	fc 01       	movw	r30, r24
     ad4:	f0 80       	ld	r15, Z
     ad6:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z11lcd_get_rowv>
     ada:	08 2f       	mov	r16, r24
     adc:	10 e0       	ldi	r17, 0x00	; 0
     ade:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_Z14lcd_get_columnv>
     ae2:	88 2f       	mov	r24, r24
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	98 01       	movw	r18, r16
     ae8:	22 0f       	add	r18, r18
     aea:	33 1f       	adc	r19, r19
     aec:	22 0f       	add	r18, r18
     aee:	33 1f       	adc	r19, r19
     af0:	22 0f       	add	r18, r18
     af2:	33 1f       	adc	r19, r19
     af4:	82 0f       	add	r24, r18
     af6:	93 1f       	adc	r25, r19
     af8:	80 58       	subi	r24, 0x80	; 128
     afa:	9f 4f       	sbci	r25, 0xFF	; 255
     afc:	fc 01       	movw	r30, r24
     afe:	90 81       	ld	r25, Z
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	9f 15       	cp	r25, r15
     b04:	08 f0       	brcs	.+2      	; 0xb08 <__stack+0x2a9>
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	88 23       	and	r24, r24
     b0a:	09 f4       	brne	.+2      	; 0xb0e <__stack+0x2af>
     b0c:	43 c0       	rjmp	.+134    	; 0xb94 <__stack+0x335>
			{
				time[index[lcd_get_row()][lcd_get_column()]] += (MaxVal[lcd_get_row()][lcd_get_column()]+1);
     b0e:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z11lcd_get_rowv>
     b12:	08 2f       	mov	r16, r24
     b14:	10 e0       	ldi	r17, 0x00	; 0
     b16:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_Z14lcd_get_columnv>
     b1a:	88 2f       	mov	r24, r24
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	98 01       	movw	r18, r16
     b20:	22 0f       	add	r18, r18
     b22:	33 1f       	adc	r19, r19
     b24:	22 0f       	add	r18, r18
     b26:	33 1f       	adc	r19, r19
     b28:	22 0f       	add	r18, r18
     b2a:	33 1f       	adc	r19, r19
     b2c:	82 0f       	add	r24, r18
     b2e:	93 1f       	adc	r25, r19
     b30:	80 58       	subi	r24, 0x80	; 128
     b32:	9f 4f       	sbci	r25, 0xFF	; 255
     b34:	fc 01       	movw	r30, r24
     b36:	80 81       	ld	r24, Z
     b38:	88 2f       	mov	r24, r24
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	8c 01       	movw	r16, r24
     b3e:	0f 5f       	subi	r16, 0xFF	; 255
     b40:	1f 4f       	sbci	r17, 0xFF	; 255
     b42:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z11lcd_get_rowv>
     b46:	e8 2e       	mov	r14, r24
     b48:	f1 2c       	mov	r15, r1
     b4a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_Z14lcd_get_columnv>
     b4e:	88 2f       	mov	r24, r24
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	97 01       	movw	r18, r14
     b54:	22 95       	swap	r18
     b56:	32 95       	swap	r19
     b58:	30 7f       	andi	r19, 0xF0	; 240
     b5a:	32 27       	eor	r19, r18
     b5c:	20 7f       	andi	r18, 0xF0	; 240
     b5e:	32 27       	eor	r19, r18
     b60:	82 0f       	add	r24, r18
     b62:	93 1f       	adc	r25, r19
     b64:	80 5a       	subi	r24, 0xA0	; 160
     b66:	9f 4f       	sbci	r25, 0xFF	; 255
     b68:	fc 01       	movw	r30, r24
     b6a:	40 81       	ld	r20, Z
     b6c:	84 2f       	mov	r24, r20
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	2d ad       	ldd	r18, Y+61	; 0x3d
     b72:	3e ad       	ldd	r19, Y+62	; 0x3e
     b74:	82 0f       	add	r24, r18
     b76:	93 1f       	adc	r25, r19
     b78:	24 2f       	mov	r18, r20
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	4d ad       	ldd	r20, Y+61	; 0x3d
     b7e:	5e ad       	ldd	r21, Y+62	; 0x3e
     b80:	24 0f       	add	r18, r20
     b82:	35 1f       	adc	r19, r21
     b84:	f9 01       	movw	r30, r18
     b86:	20 81       	ld	r18, Z
     b88:	22 2f       	mov	r18, r18
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	20 0f       	add	r18, r16
     b8e:	31 1f       	adc	r19, r17
     b90:	fc 01       	movw	r30, r24
     b92:	20 83       	st	Z, r18
			}
			writeScreen(time, alarm);
     b94:	8d ad       	ldd	r24, Y+61	; 0x3d
     b96:	9e ad       	ldd	r25, Y+62	; 0x3e
     b98:	6c ad       	ldd	r22, Y+60	; 0x3c
     b9a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11writeScreenPhb>
			lcd_goto(y,x);
     b9e:	69 81       	ldd	r22, Y+1	; 0x01
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_Z8lcd_gotohh>
			while ((PIND & (1<<PD3)) == (1<<PD3)) {}
     ba6:	00 00       	nop
     ba8:	80 e3       	ldi	r24, 0x30	; 48
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	fc 01       	movw	r30, r24
     bae:	80 81       	ld	r24, Z
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	88 70       	andi	r24, 0x08	; 8
     bb6:	99 27       	eor	r25, r25
     bb8:	21 e0       	ldi	r18, 0x01	; 1
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <__stack+0x361>
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	22 23       	and	r18, r18
     bc2:	91 f7       	brne	.-28     	; 0xba8 <__stack+0x349>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e2       	ldi	r26, 0x20	; 32
     bca:	b1 e4       	ldi	r27, 0x41	; 65
     bcc:	8e a7       	std	Y+46, r24	; 0x2e
     bce:	9f a7       	std	Y+47, r25	; 0x2f
     bd0:	a8 ab       	std	Y+48, r26	; 0x30
     bd2:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	4a e7       	ldi	r20, 0x7A	; 122
     bda:	54 e4       	ldi	r21, 0x44	; 68
     bdc:	6e a5       	ldd	r22, Y+46	; 0x2e
     bde:	7f a5       	ldd	r23, Y+47	; 0x2f
     be0:	88 a9       	ldd	r24, Y+48	; 0x30
     be2:	99 a9       	ldd	r25, Y+49	; 0x31
     be4:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	8a ab       	std	Y+50, r24	; 0x32
     bee:	9b ab       	std	Y+51, r25	; 0x33
     bf0:	ac ab       	std	Y+52, r26	; 0x34
     bf2:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e8       	ldi	r20, 0x80	; 128
     bfa:	5f e3       	ldi	r21, 0x3F	; 63
     bfc:	6a a9       	ldd	r22, Y+50	; 0x32
     bfe:	7b a9       	ldd	r23, Y+51	; 0x33
     c00:	8c a9       	ldd	r24, Y+52	; 0x34
     c02:	9d a9       	ldd	r25, Y+53	; 0x35
     c04:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__cmpsf2>
     c08:	88 23       	and	r24, r24
     c0a:	2c f4       	brge	.+10     	; 0xc16 <__stack+0x3b7>
		__ticks = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9f ab       	std	Y+55, r25	; 0x37
     c12:	8e ab       	std	Y+54, r24	; 0x36
     c14:	3f c0       	rjmp	.+126    	; 0xc94 <__stack+0x435>
	else if (__tmp > 65535)
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	3f ef       	ldi	r19, 0xFF	; 255
     c1a:	4f e7       	ldi	r20, 0x7F	; 127
     c1c:	57 e4       	ldi	r21, 0x47	; 71
     c1e:	6a a9       	ldd	r22, Y+50	; 0x32
     c20:	7b a9       	ldd	r23, Y+51	; 0x33
     c22:	8c a9       	ldd	r24, Y+52	; 0x34
     c24:	9d a9       	ldd	r25, Y+53	; 0x35
     c26:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__gesf2>
     c2a:	18 16       	cp	r1, r24
     c2c:	4c f5       	brge	.+82     	; 0xc80 <__stack+0x421>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e2       	ldi	r20, 0x20	; 32
     c34:	51 e4       	ldi	r21, 0x41	; 65
     c36:	6e a5       	ldd	r22, Y+46	; 0x2e
     c38:	7f a5       	ldd	r23, Y+47	; 0x2f
     c3a:	88 a9       	ldd	r24, Y+48	; 0x30
     c3c:	99 a9       	ldd	r25, Y+49	; 0x31
     c3e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__mulsf3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9f ab       	std	Y+55, r25	; 0x37
     c54:	8e ab       	std	Y+54, r24	; 0x36
     c56:	0f c0       	rjmp	.+30     	; 0xc76 <__stack+0x417>
     c58:	84 e6       	ldi	r24, 0x64	; 100
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	99 af       	std	Y+57, r25	; 0x39
     c5e:	88 af       	std	Y+56, r24	; 0x38
     c60:	88 ad       	ldd	r24, Y+56	; 0x38
     c62:	99 ad       	ldd	r25, Y+57	; 0x39
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <__stack+0x405>
     c68:	99 af       	std	Y+57, r25	; 0x39
     c6a:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	8e a9       	ldd	r24, Y+54	; 0x36
     c6e:	9f a9       	ldd	r25, Y+55	; 0x37
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	9f ab       	std	Y+55, r25	; 0x37
     c74:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c76:	8e a9       	ldd	r24, Y+54	; 0x36
     c78:	9f a9       	ldd	r25, Y+55	; 0x37
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	69 f7       	brne	.-38     	; 0xc58 <__stack+0x3f9>
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <__stack+0x449>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c80:	6a a9       	ldd	r22, Y+50	; 0x32
     c82:	7b a9       	ldd	r23, Y+51	; 0x33
     c84:	8c a9       	ldd	r24, Y+52	; 0x34
     c86:	9d a9       	ldd	r25, Y+53	; 0x35
     c88:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fixunssfsi>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	9f ab       	std	Y+55, r25	; 0x37
     c92:	8e ab       	std	Y+54, r24	; 0x36
     c94:	8e a9       	ldd	r24, Y+54	; 0x36
     c96:	9f a9       	ldd	r25, Y+55	; 0x37
     c98:	9b af       	std	Y+59, r25	; 0x3b
     c9a:	8a af       	std	Y+58, r24	; 0x3a
     c9c:	8a ad       	ldd	r24, Y+58	; 0x3a
     c9e:	9b ad       	ldd	r25, Y+59	; 0x3b
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <__stack+0x441>
     ca4:	9b af       	std	Y+59, r25	; 0x3b
     ca6:	8a af       	std	Y+58, r24	; 0x3a
	t1_Stop_TOI();
	lcd_cursor(true,true);
	lcd_home();
	while ((PIND & (1<<PD0)) == (1<<PD0)) {}
	_delay_ms(10);
	while ((PIND & (1<<PD0)) != (1<<PD0))						//button 1
     ca8:	80 e3       	ldi	r24, 0x30	; 48
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	fc 01       	movw	r30, r24
     cae:	80 81       	ld	r24, Z
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	81 70       	andi	r24, 0x01	; 1
     cb6:	99 27       	eor	r25, r25
     cb8:	21 e0       	ldi	r18, 0x01	; 1
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <__stack+0x461>
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	22 23       	and	r18, r18
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <__stack+0x467>
     cc4:	75 cc       	rjmp	.-1814   	; 0x5b0 <_Z10changeTimebPh+0x144>
			lcd_goto(y,x);
			while ((PIND & (1<<PD3)) == (1<<PD3)) {}
			_delay_ms(10);
		}
	}
	if(alarm == false)
     cc6:	9c ad       	ldd	r25, Y+60	; 0x3c
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	89 27       	eor	r24, r25
     ccc:	88 23       	and	r24, r24
     cce:	b9 f1       	breq	.+110    	; 0xd3e <__stack+0x4df>
	{
		for (uint8_t i = 1; i <= 7 ; i++)
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	8b 83       	std	Y+3, r24	; 0x03
     cd4:	18 c0       	rjmp	.+48     	; 0xd06 <__stack+0x4a7>
		{
			data[i] = decToBcd(time[i-1]);
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	08 2f       	mov	r16, r24
     cda:	10 e0       	ldi	r17, 0x00	; 0
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	88 2f       	mov	r24, r24
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	2d ad       	ldd	r18, Y+61	; 0x3d
     ce6:	3e ad       	ldd	r19, Y+62	; 0x3e
     ce8:	82 0f       	add	r24, r18
     cea:	93 1f       	adc	r25, r19
     cec:	fc 01       	movw	r30, r24
     cee:	80 81       	ld	r24, Z
     cf0:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8decToBcdh>
     cf4:	28 2f       	mov	r18, r24
     cf6:	c8 01       	movw	r24, r16
     cf8:	84 54       	subi	r24, 0x44	; 68
     cfa:	9f 4f       	sbci	r25, 0xFF	; 255
     cfc:	fc 01       	movw	r30, r24
     cfe:	20 83       	st	Z, r18
			_delay_ms(10);
		}
	}
	if(alarm == false)
	{
		for (uint8_t i = 1; i <= 7 ; i++)
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	8f 5f       	subi	r24, 0xFF	; 255
     d04:	8b 83       	std	Y+3, r24	; 0x03
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	88 30       	cpi	r24, 0x08	; 8
     d0a:	28 f3       	brcs	.-54     	; 0xcd6 <__stack+0x477>
		{
			data[i] = decToBcd(time[i-1]);
		}
		data[0] = 0;
     d0c:	10 92 bc 00 	sts	0x00BC, r1
		TWI.start_wait(I2C_WRITE);
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	8c ec       	ldi	r24, 0xCC	; 204
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN3I2C10start_waitEh>
		TWI.writeXBytes(data,8);
     d1a:	48 e0       	ldi	r20, 0x08	; 8
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	6c eb       	ldi	r22, 0xBC	; 188
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	8c ec       	ldi	r24, 0xCC	; 204
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN3I2C11writeXBytesEPhj>
		TWI.stop();
     d2a:	8c ec       	ldi	r24, 0xCC	; 204
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN3I2C4stopEv>
		changeTime(true, alarmTime);
     d32:	64 ec       	ldi	r22, 0xC4	; 196
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	0e 94 36 02 	call	0x46c	; 0x46c <_Z10changeTimebPh>
     d3c:	0d c0       	rjmp	.+26     	; 0xd58 <__stack+0x4f9>
	}
	else
	{
		eeprom_write_block(&alarmTime, &alarmTimeEEMEM, 7);
     d3e:	47 e0       	ldi	r20, 0x07	; 7
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	84 ec       	ldi	r24, 0xC4	; 196
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__eewr_block_m32>
		writeScreen(realTime, false);
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	85 eb       	ldi	r24, 0xB5	; 181
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11writeScreenPhb>
	}
	t1_Start_TOI();
     d58:	0e 94 3a 01 	call	0x274	; 0x274 <_Z12t1_Start_TOIv>
	lcd_cursor(false,false);
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	0e 94 4d 0c 	call	0x189a	; 0x189a <_Z10lcd_cursorbb>
}
     d64:	ee 96       	adiw	r28, 0x3e	; 62
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	08 95       	ret

00000d7e <__vector_11>:

ISR(TIMER0_OVF_vect) {
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	00 90 5f 00 	lds	r0, 0x005F
     d86:	0f 92       	push	r0
     d88:	11 24       	eor	r1, r1
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	2f 93       	push	r18
     d90:	3f 93       	push	r19
     d92:	4f 93       	push	r20
     d94:	5f 93       	push	r21
     d96:	6f 93       	push	r22
     d98:	7f 93       	push	r23
     d9a:	8f 93       	push	r24
     d9c:	9f 93       	push	r25
     d9e:	af 93       	push	r26
     da0:	bf 93       	push	r27
     da2:	ef 93       	push	r30
     da4:	ff 93       	push	r31
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	1f 92       	push	r1
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
	static unsigned char x = 0;
	if ( x == 15 )
     db0:	80 91 ce 00 	lds	r24, 0x00CE
     db4:	8f 30       	cpi	r24, 0x0F	; 15
     db6:	71 f5       	brne	.+92     	; 0xe14 <__vector_11+0x96>
	{
		TWI.start_wait(I2C_WRITE);						// set device address and write mode
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	8c ec       	ldi	r24, 0xCC	; 204
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN3I2C10start_waitEh>
		TWI.readXBytes(data,7,0x00);
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	47 e0       	ldi	r20, 0x07	; 7
     dc6:	6c eb       	ldi	r22, 0xBC	; 188
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	8c ec       	ldi	r24, 0xCC	; 204
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN3I2C10readXBytesEPhhh>
		TWI.stop();
     dd2:	8c ec       	ldi	r24, 0xCC	; 204
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN3I2C4stopEv>
		for (uint8_t i = 0; i <= 6 ; i++)
     dda:	19 82       	std	Y+1, r1	; 0x01
     ddc:	15 c0       	rjmp	.+42     	; 0xe08 <__vector_11+0x8a>
		{
			realTime[i] = bcdToDec(data[i]);
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	08 2f       	mov	r16, r24
     de2:	10 e0       	ldi	r17, 0x00	; 0
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	88 2f       	mov	r24, r24
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	84 54       	subi	r24, 0x44	; 68
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	fc 01       	movw	r30, r24
     df0:	80 81       	ld	r24, Z
     df2:	0e 94 56 00 	call	0xac	; 0xac <_Z8bcdToDech>
     df6:	28 2f       	mov	r18, r24
     df8:	c8 01       	movw	r24, r16
     dfa:	8b 54       	subi	r24, 0x4B	; 75
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	fc 01       	movw	r30, r24
     e00:	20 83       	st	Z, r18
	if ( x == 15 )
	{
		TWI.start_wait(I2C_WRITE);						// set device address and write mode
		TWI.readXBytes(data,7,0x00);
		TWI.stop();
		for (uint8_t i = 0; i <= 6 ; i++)
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	87 30       	cpi	r24, 0x07	; 7
     e0c:	40 f3       	brcs	.-48     	; 0xdde <__vector_11+0x60>
		{
			realTime[i] = bcdToDec(data[i]);
		}
		x = 0;
     e0e:	10 92 ce 00 	sts	0x00CE, r1
     e12:	05 c0       	rjmp	.+10     	; 0xe1e <__vector_11+0xa0>
	}
	else
	{
		x++;
     e14:	80 91 ce 00 	lds	r24, 0x00CE
     e18:	8f 5f       	subi	r24, 0xFF	; 255
     e1a:	80 93 ce 00 	sts	0x00CE, r24
	}
	TCNT0 = 0;
     e1e:	82 e5       	ldi	r24, 0x52	; 82
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	fc 01       	movw	r30, r24
     e24:	10 82       	st	Z, r1
}
     e26:	0f 90       	pop	r0
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	ff 91       	pop	r31
     e2e:	ef 91       	pop	r30
     e30:	bf 91       	pop	r27
     e32:	af 91       	pop	r26
     e34:	9f 91       	pop	r25
     e36:	8f 91       	pop	r24
     e38:	7f 91       	pop	r23
     e3a:	6f 91       	pop	r22
     e3c:	5f 91       	pop	r21
     e3e:	4f 91       	pop	r20
     e40:	3f 91       	pop	r19
     e42:	2f 91       	pop	r18
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	0f 90       	pop	r0
     e4a:	00 92 5f 00 	sts	0x005F, r0
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <main>:

int main(void)
{
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	2e 97       	sbiw	r28, 0x0e	; 14
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
	init();
     e68:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z4initv>
	sei();
     e6c:	78 94       	sei
	while(1)
	{
		cli();
     e6e:	f8 94       	cli
		writeScreen(realTime, false);
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	85 eb       	ldi	r24, 0xB5	; 181
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11writeScreenPhb>
		sei();
     e7a:	78 94       	sei
		if ((PIND & (1<<PD0)) == (1<<PD0))
     e7c:	80 e3       	ldi	r24, 0x30	; 48
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	fc 01       	movw	r30, r24
     e82:	80 81       	ld	r24, Z
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	81 70       	andi	r24, 0x01	; 1
     e8a:	99 27       	eor	r25, r25
     e8c:	21 e0       	ldi	r18, 0x01	; 1
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	09 f4       	brne	.+2      	; 0xe94 <main+0x40>
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	22 23       	and	r18, r18
     e96:	09 f4       	brne	.+2      	; 0xe9a <main+0x46>
     e98:	86 c0       	rjmp	.+268    	; 0xfa6 <main+0x152>
		{
			changeTime(false, realTime);
     e9a:	65 eb       	ldi	r22, 0xB5	; 181
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	0e 94 36 02 	call	0x46c	; 0x46c <_Z10changeTimebPh>
			while((PIND & (1<<PD0)) == (1<<PD0)) {}
     ea4:	00 00       	nop
     ea6:	80 e3       	ldi	r24, 0x30	; 48
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	fc 01       	movw	r30, r24
     eac:	80 81       	ld	r24, Z
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	81 70       	andi	r24, 0x01	; 1
     eb4:	99 27       	eor	r25, r25
     eb6:	21 e0       	ldi	r18, 0x01	; 1
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	09 f4       	brne	.+2      	; 0xebe <main+0x6a>
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	22 23       	and	r18, r18
     ec0:	91 f7       	brne	.-28     	; 0xea6 <main+0x52>
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	a0 e2       	ldi	r26, 0x20	; 32
     ec8:	b1 e4       	ldi	r27, 0x41	; 65
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	9a 83       	std	Y+2, r25	; 0x02
     ece:	ab 83       	std	Y+3, r26	; 0x03
     ed0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	4a e7       	ldi	r20, 0x7A	; 122
     ed8:	54 e4       	ldi	r21, 0x44	; 68
     eda:	69 81       	ldd	r22, Y+1	; 0x01
     edc:	7a 81       	ldd	r23, Y+2	; 0x02
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__mulsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	8d 83       	std	Y+5, r24	; 0x05
     eec:	9e 83       	std	Y+6, r25	; 0x06
     eee:	af 83       	std	Y+7, r26	; 0x07
     ef0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e8       	ldi	r20, 0x80	; 128
     ef8:	5f e3       	ldi	r21, 0x3F	; 63
     efa:	6d 81       	ldd	r22, Y+5	; 0x05
     efc:	7e 81       	ldd	r23, Y+6	; 0x06
     efe:	8f 81       	ldd	r24, Y+7	; 0x07
     f00:	98 85       	ldd	r25, Y+8	; 0x08
     f02:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__cmpsf2>
     f06:	88 23       	and	r24, r24
     f08:	2c f4       	brge	.+10     	; 0xf14 <main+0xc0>
		__ticks = 1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	9a 87       	std	Y+10, r25	; 0x0a
     f10:	89 87       	std	Y+9, r24	; 0x09
     f12:	3f c0       	rjmp	.+126    	; 0xf92 <main+0x13e>
	else if (__tmp > 65535)
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	3f ef       	ldi	r19, 0xFF	; 255
     f18:	4f e7       	ldi	r20, 0x7F	; 127
     f1a:	57 e4       	ldi	r21, 0x47	; 71
     f1c:	6d 81       	ldd	r22, Y+5	; 0x05
     f1e:	7e 81       	ldd	r23, Y+6	; 0x06
     f20:	8f 81       	ldd	r24, Y+7	; 0x07
     f22:	98 85       	ldd	r25, Y+8	; 0x08
     f24:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__gesf2>
     f28:	18 16       	cp	r1, r24
     f2a:	4c f5       	brge	.+82     	; 0xf7e <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e2       	ldi	r20, 0x20	; 32
     f32:	51 e4       	ldi	r21, 0x41	; 65
     f34:	69 81       	ldd	r22, Y+1	; 0x01
     f36:	7a 81       	ldd	r23, Y+2	; 0x02
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	9c 81       	ldd	r25, Y+4	; 0x04
     f3c:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fixunssfsi>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	9a 87       	std	Y+10, r25	; 0x0a
     f52:	89 87       	std	Y+9, r24	; 0x09
     f54:	0f c0       	rjmp	.+30     	; 0xf74 <main+0x120>
     f56:	84 e6       	ldi	r24, 0x64	; 100
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	9c 87       	std	Y+12, r25	; 0x0c
     f5c:	8b 87       	std	Y+11, r24	; 0x0b
     f5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f60:	9c 85       	ldd	r25, Y+12	; 0x0c
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <main+0x10e>
     f66:	9c 87       	std	Y+12, r25	; 0x0c
     f68:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6a:	89 85       	ldd	r24, Y+9	; 0x09
     f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	9a 87       	std	Y+10, r25	; 0x0a
     f72:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f74:	89 85       	ldd	r24, Y+9	; 0x09
     f76:	9a 85       	ldd	r25, Y+10	; 0x0a
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	69 f7       	brne	.-38     	; 0xf56 <main+0x102>
     f7c:	14 c0       	rjmp	.+40     	; 0xfa6 <main+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7e:	6d 81       	ldd	r22, Y+5	; 0x05
     f80:	7e 81       	ldd	r23, Y+6	; 0x06
     f82:	8f 81       	ldd	r24, Y+7	; 0x07
     f84:	98 85       	ldd	r25, Y+8	; 0x08
     f86:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fixunssfsi>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	9a 87       	std	Y+10, r25	; 0x0a
     f90:	89 87       	std	Y+9, r24	; 0x09
     f92:	89 85       	ldd	r24, Y+9	; 0x09
     f94:	9a 85       	ldd	r25, Y+10	; 0x0a
     f96:	9e 87       	std	Y+14, r25	; 0x0e
     f98:	8d 87       	std	Y+13, r24	; 0x0d
     f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <main+0x14a>
     fa2:	9e 87       	std	Y+14, r25	; 0x0e
     fa4:	8d 87       	std	Y+13, r24	; 0x0d
			_delay_ms(10);
		}
		if (alarmSet == true)
     fa6:	80 91 cb 00 	lds	r24, 0x00CB
     faa:	88 23       	and	r24, r24
     fac:	a1 f0       	breq	.+40     	; 0xfd6 <main+0x182>
		{
			if (realTime[0] == alarmTime[0] && realTime[1] == alarmTime[1] && realTime[2] == alarmTime[2])
     fae:	90 91 b5 00 	lds	r25, 0x00B5
     fb2:	80 91 c4 00 	lds	r24, 0x00C4
     fb6:	98 17       	cp	r25, r24
     fb8:	71 f4       	brne	.+28     	; 0xfd6 <main+0x182>
     fba:	90 91 b6 00 	lds	r25, 0x00B6
     fbe:	80 91 c5 00 	lds	r24, 0x00C5
     fc2:	98 17       	cp	r25, r24
     fc4:	41 f4       	brne	.+16     	; 0xfd6 <main+0x182>
     fc6:	90 91 b7 00 	lds	r25, 0x00B7
     fca:	80 91 c6 00 	lds	r24, 0x00C6
     fce:	98 17       	cp	r25, r24
     fd0:	11 f4       	brne	.+4      	; 0xfd6 <main+0x182>
			{
				Alarm_start();
     fd2:	0e 94 4a 01 	call	0x294	; 0x294 <_Z11Alarm_startv>
			}
		}
		if((PIND & (1<<PD6)) == (1<<PD6))
     fd6:	80 e3       	ldi	r24, 0x30	; 48
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	fc 01       	movw	r30, r24
     fdc:	80 81       	ld	r24, Z
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	80 74       	andi	r24, 0x40	; 64
     fe4:	99 27       	eor	r25, r25
     fe6:	21 e0       	ldi	r18, 0x01	; 1
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	09 f4       	brne	.+2      	; 0xfee <main+0x19a>
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	22 23       	and	r18, r18
     ff0:	39 f1       	breq	.+78     	; 0x1040 <main+0x1ec>
		{
			alarmSet = !alarmSet;
     ff2:	90 91 cb 00 	lds	r25, 0x00CB
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	89 27       	eor	r24, r25
     ffa:	80 93 cb 00 	sts	0x00CB, r24
			if((PORTB & (1<<PD0)) == (1<<PD0))
     ffe:	88 e3       	ldi	r24, 0x38	; 56
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	fc 01       	movw	r30, r24
    1004:	80 81       	ld	r24, Z
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	81 70       	andi	r24, 0x01	; 1
    100c:	99 27       	eor	r25, r25
    100e:	21 e0       	ldi	r18, 0x01	; 1
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	09 f4       	brne	.+2      	; 0x1016 <main+0x1c2>
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	22 23       	and	r18, r18
    1018:	21 f0       	breq	.+8      	; 0x1022 <main+0x1ce>
			{
				Alarm_stop();
    101a:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z10Alarm_stopv>
				alarmSet = false;
    101e:	10 92 cb 00 	sts	0x00CB, r1
			}
			while((PIND & (1<<PD6)) == (1<<PD6)) {}
    1022:	00 00       	nop
    1024:	80 e3       	ldi	r24, 0x30	; 48
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	fc 01       	movw	r30, r24
    102a:	80 81       	ld	r24, Z
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	80 74       	andi	r24, 0x40	; 64
    1032:	99 27       	eor	r25, r25
    1034:	21 e0       	ldi	r18, 0x01	; 1
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	09 f4       	brne	.+2      	; 0x103c <main+0x1e8>
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	22 23       	and	r18, r18
    103e:	91 f7       	brne	.-28     	; 0x1024 <main+0x1d0>
		x++;
	}
	TCNT0 = 0;
}

int main(void)
    1040:	16 cf       	rjmp	.-468    	; 0xe6e <main+0x1a>

00001042 <_Z41__static_initialization_and_destruction_0ii>:
				alarmSet = false;
			}
			while((PIND & (1<<PD6)) == (1<<PD6)) {}
		}
	}
}
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	00 d0       	rcall	.+0      	; 0x1048 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1048:	00 d0       	rcall	.+0      	; 0x104a <_Z41__static_initialization_and_destruction_0ii+0x8>
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	7c 83       	std	Y+4, r23	; 0x04
    1054:	6b 83       	std	Y+3, r22	; 0x03
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	91 05       	cpc	r25, r1
    105e:	59 f4       	brne	.+22     	; 0x1076 <_Z41__static_initialization_and_destruction_0ii+0x34>
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	8f 3f       	cpi	r24, 0xFF	; 255
    1066:	2f ef       	ldi	r18, 0xFF	; 255
    1068:	92 07       	cpc	r25, r18
    106a:	29 f4       	brne	.+10     	; 0x1076 <_Z41__static_initialization_and_destruction_0ii+0x34>
unsigned char alarmTime[7];
unsigned char EEMEM alarmTimeEEMEM[7];

bool alarmSet = false;

I2C TWI(address);
    106c:	68 e6       	ldi	r22, 0x68	; 104
    106e:	8c ec       	ldi	r24, 0xCC	; 204
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN3I2CC1Eh>
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	51 f4       	brne	.+20     	; 0x1092 <_Z41__static_initialization_and_destruction_0ii+0x50>
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	8f 3f       	cpi	r24, 0xFF	; 255
    1084:	2f ef       	ldi	r18, 0xFF	; 255
    1086:	92 07       	cpc	r25, r18
    1088:	21 f4       	brne	.+8      	; 0x1092 <_Z41__static_initialization_and_destruction_0ii+0x50>
    108a:	8c ec       	ldi	r24, 0xCC	; 204
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 82 0a 	call	0x1504	; 0x1504 <_ZN3I2CD1Ev>
				alarmSet = false;
			}
			while((PIND & (1<<PD6)) == (1<<PD6)) {}
		}
	}
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <_GLOBAL__sub_I_buffer>:
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	6f ef       	ldi	r22, 0xFF	; 255
    10aa:	7f ef       	ldi	r23, 0xFF	; 255
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 21 08 	call	0x1042	; 0x1042 <_Z41__static_initialization_and_destruction_0ii>
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <_GLOBAL__sub_D_buffer>:
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	6f ef       	ldi	r22, 0xFF	; 255
    10c4:	7f ef       	ldi	r23, 0xFF	; 255
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 21 08 	call	0x1042	; 0x1042 <_Z41__static_initialization_and_destruction_0ii>
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <_ZN3I2CC1Eh>:
#define SCL_CLOCK  100000L

// default constructor
I2C::I2C():address(0) {}

I2C::I2C(unsigned char newaddress) : address(newaddress<<1) {}
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	00 d0       	rcall	.+0      	; 0x10da <_ZN3I2CC1Eh+0x6>
    10da:	1f 92       	push	r1
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	9a 83       	std	Y+2, r25	; 0x02
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	6b 83       	std	Y+3, r22	; 0x03
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	28 2f       	mov	r18, r24
    10ea:	22 0f       	add	r18, r18
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	fc 01       	movw	r30, r24
    10f2:	20 83       	st	Z, r18
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <_ZN3I2C4initEv>:

void I2C::init(void)
{
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	00 d0       	rcall	.+0      	; 0x1106 <_ZN3I2C4initEv+0x6>
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	89 83       	std	Y+1, r24	; 0x01
	 /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
	 TWSR = 0;                         /* no prescaler */
    110e:	81 e2       	ldi	r24, 0x21	; 33
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	fc 01       	movw	r30, r24
    1114:	10 82       	st	Z, r1
	 TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1116:	80 e2       	ldi	r24, 0x20	; 32
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	2c e0       	ldi	r18, 0x0C	; 12
    111c:	fc 01       	movw	r30, r24
    111e:	20 83       	st	Z, r18
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <_ZN3I2C5startEh>:
	return address>>1;
}


unsigned char I2C::start(unsigned char RW)
{
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	00 d0       	rcall	.+0      	; 0x1130 <_ZN3I2C5startEh+0x6>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <_ZN3I2C5startEh+0x8>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	9b 83       	std	Y+3, r25	; 0x03
    1138:	8a 83       	std	Y+2, r24	; 0x02
    113a:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);				// send START condition
    113c:	86 e5       	ldi	r24, 0x56	; 86
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	24 ea       	ldi	r18, 0xA4	; 164
    1142:	fc 01       	movw	r30, r24
    1144:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));							// wait until transmission completed
    1146:	00 00       	nop
    1148:	86 e5       	ldi	r24, 0x56	; 86
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	fc 01       	movw	r30, r24
    114e:	80 81       	ld	r24, Z
    1150:	80 95       	com	r24
    1152:	88 1f       	adc	r24, r24
    1154:	88 27       	eor	r24, r24
    1156:	88 1f       	adc	r24, r24
    1158:	88 23       	and	r24, r24
    115a:	b1 f7       	brne	.-20     	; 0x1148 <_ZN3I2C5startEh+0x1e>
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
    115c:	81 e2       	ldi	r24, 0x21	; 33
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	fc 01       	movw	r30, r24
    1162:	80 81       	ld	r24, Z
    1164:	88 7f       	andi	r24, 0xF8	; 248
    1166:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	88 30       	cpi	r24, 0x08	; 8
    116c:	29 f0       	breq	.+10     	; 0x1178 <_ZN3I2C5startEh+0x4e>
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	80 31       	cpi	r24, 0x10	; 16
    1172:	11 f0       	breq	.+4      	; 0x1178 <_ZN3I2C5startEh+0x4e>
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	29 c0       	rjmp	.+82     	; 0x11ca <_ZN3I2C5startEh+0xa0>
	TWDR = address + RW;									// send device address
    1178:	83 e2       	ldi	r24, 0x23	; 35
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	2a 81       	ldd	r18, Y+2	; 0x02
    117e:	3b 81       	ldd	r19, Y+3	; 0x03
    1180:	f9 01       	movw	r30, r18
    1182:	30 81       	ld	r19, Z
    1184:	2c 81       	ldd	r18, Y+4	; 0x04
    1186:	23 0f       	add	r18, r19
    1188:	fc 01       	movw	r30, r24
    118a:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    118c:	86 e5       	ldi	r24, 0x56	; 86
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	24 e8       	ldi	r18, 0x84	; 132
    1192:	fc 01       	movw	r30, r24
    1194:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));							// wail until transmission completed and ACK/NACK has been received
    1196:	00 00       	nop
    1198:	86 e5       	ldi	r24, 0x56	; 86
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	fc 01       	movw	r30, r24
    119e:	80 81       	ld	r24, Z
    11a0:	80 95       	com	r24
    11a2:	88 1f       	adc	r24, r24
    11a4:	88 27       	eor	r24, r24
    11a6:	88 1f       	adc	r24, r24
    11a8:	88 23       	and	r24, r24
    11aa:	b1 f7       	brne	.-20     	; 0x1198 <_ZN3I2C5startEh+0x6e>
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
    11ac:	81 e2       	ldi	r24, 0x21	; 33
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	fc 01       	movw	r30, r24
    11b2:	80 81       	ld	r24, Z
    11b4:	88 7f       	andi	r24, 0xF8	; 248
    11b6:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	88 31       	cpi	r24, 0x18	; 24
    11bc:	29 f0       	breq	.+10     	; 0x11c8 <_ZN3I2C5startEh+0x9e>
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	80 34       	cpi	r24, 0x40	; 64
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <_ZN3I2C5startEh+0x9e>
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <_ZN3I2C5startEh+0xa0>
	return 0;
    11c8:	80 e0       	ldi	r24, 0x00	; 0
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <_ZN3I2C9rep_startEh>:

unsigned char I2C::rep_start(unsigned char RW)
{
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	00 d0       	rcall	.+0      	; 0x11de <_ZN3I2C9rep_startEh+0x6>
    11de:	1f 92       	push	r1
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	6b 83       	std	Y+3, r22	; 0x03
	return start(RW);
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	6b 81       	ldd	r22, Y+3	; 0x03
    11f0:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN3I2C5startEh>
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <_ZN3I2C10start_waitEh>:

void I2C::start_wait(unsigned char RW)
{
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	00 d0       	rcall	.+0      	; 0x1206 <_ZN3I2C10start_waitEh+0x6>
    1206:	00 d0       	rcall	.+0      	; 0x1208 <_ZN3I2C10start_waitEh+0x8>
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	9b 83       	std	Y+3, r25	; 0x03
    120e:	8a 83       	std	Y+2, r24	; 0x02
    1210:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t   twst;
	while ( 1 )
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);						// send START condition
    1212:	86 e5       	ldi	r24, 0x56	; 86
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	24 ea       	ldi	r18, 0xA4	; 164
    1218:	fc 01       	movw	r30, r24
    121a:	20 83       	st	Z, r18
		while(!(TWCR & (1<<TWINT)));									// wait until transmission completed
    121c:	00 00       	nop
    121e:	86 e5       	ldi	r24, 0x56	; 86
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	fc 01       	movw	r30, r24
    1224:	80 81       	ld	r24, Z
    1226:	80 95       	com	r24
    1228:	88 1f       	adc	r24, r24
    122a:	88 27       	eor	r24, r24
    122c:	88 1f       	adc	r24, r24
    122e:	88 23       	and	r24, r24
    1230:	b1 f7       	brne	.-20     	; 0x121e <_ZN3I2C10start_waitEh+0x1e>
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
    1232:	81 e2       	ldi	r24, 0x21	; 33
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	fc 01       	movw	r30, r24
    1238:	80 81       	ld	r24, Z
    123a:	88 7f       	andi	r24, 0xF8	; 248
    123c:	89 83       	std	Y+1, r24	; 0x01
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	88 30       	cpi	r24, 0x08	; 8
    1242:	21 f0       	breq	.+8      	; 0x124c <_ZN3I2C10start_waitEh+0x4c>
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	80 31       	cpi	r24, 0x10	; 16
    1248:	09 f0       	breq	.+2      	; 0x124c <_ZN3I2C10start_waitEh+0x4c>
    124a:	3c c0       	rjmp	.+120    	; 0x12c4 <_ZN3I2C10start_waitEh+0xc4>
		TWDR = address + RW;											// send device address
    124c:	83 e2       	ldi	r24, 0x23	; 35
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	2a 81       	ldd	r18, Y+2	; 0x02
    1252:	3b 81       	ldd	r19, Y+3	; 0x03
    1254:	f9 01       	movw	r30, r18
    1256:	30 81       	ld	r19, Z
    1258:	2c 81       	ldd	r18, Y+4	; 0x04
    125a:	23 0f       	add	r18, r19
    125c:	fc 01       	movw	r30, r24
    125e:	20 83       	st	Z, r18
		TWCR = (1<<TWINT) | (1<<TWEN);
    1260:	86 e5       	ldi	r24, 0x56	; 86
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	24 e8       	ldi	r18, 0x84	; 132
    1266:	fc 01       	movw	r30, r24
    1268:	20 83       	st	Z, r18
		while(!(TWCR & (1<<TWINT)));									// wail until transmission completed
    126a:	00 00       	nop
    126c:	86 e5       	ldi	r24, 0x56	; 86
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	fc 01       	movw	r30, r24
    1272:	80 81       	ld	r24, Z
    1274:	80 95       	com	r24
    1276:	88 1f       	adc	r24, r24
    1278:	88 27       	eor	r24, r24
    127a:	88 1f       	adc	r24, r24
    127c:	88 23       	and	r24, r24
    127e:	b1 f7       	brne	.-20     	; 0x126c <_ZN3I2C10start_waitEh+0x6c>
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
    1280:	81 e2       	ldi	r24, 0x21	; 33
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	fc 01       	movw	r30, r24
    1286:	80 81       	ld	r24, Z
    1288:	88 7f       	andi	r24, 0xF8	; 248
    128a:	89 83       	std	Y+1, r24	; 0x01
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	80 32       	cpi	r24, 0x20	; 32
    1290:	19 f0       	breq	.+6      	; 0x1298 <_ZN3I2C10start_waitEh+0x98>
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	88 35       	cpi	r24, 0x58	; 88
    1296:	a9 f4       	brne	.+42     	; 0x12c2 <_ZN3I2C10start_waitEh+0xc2>
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);					//device busy, send stop condition to terminate write operation
    1298:	86 e5       	ldi	r24, 0x56	; 86
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	24 e9       	ldi	r18, 0x94	; 148
    129e:	fc 01       	movw	r30, r24
    12a0:	20 83       	st	Z, r18
			while(TWCR & (1<<TWSTO));									// wait until stop condition is executed and bus released
    12a2:	00 00       	nop
    12a4:	86 e5       	ldi	r24, 0x56	; 86
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	fc 01       	movw	r30, r24
    12aa:	80 81       	ld	r24, Z
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	80 71       	andi	r24, 0x10	; 16
    12b2:	99 27       	eor	r25, r25
    12b4:	21 e0       	ldi	r18, 0x01	; 1
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	09 f4       	brne	.+2      	; 0x12bc <_ZN3I2C10start_waitEh+0xbc>
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	22 23       	and	r18, r18
    12be:	91 f7       	brne	.-28     	; 0x12a4 <_ZN3I2C10start_waitEh+0xa4>
			continue;
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <_ZN3I2C10start_waitEh+0xc4>
		}
		break;															//if( twst != TW_MT_SLA_ACK) return 1;
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <_ZN3I2C10start_waitEh+0xc6>
	}
    12c4:	a6 cf       	rjmp	.-180    	; 0x1212 <_ZN3I2C10start_waitEh+0x12>
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret

000012d4 <_ZN3I2C4stopEv>:

void I2C::stop(void)
{
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	00 d0       	rcall	.+0      	; 0x12da <_ZN3I2C4stopEv+0x6>
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	9a 83       	std	Y+2, r25	; 0x02
    12e0:	89 83       	std	Y+1, r24	; 0x01
	 TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);						//send stop condition
    12e2:	86 e5       	ldi	r24, 0x56	; 86
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	24 e9       	ldi	r18, 0x94	; 148
    12e8:	fc 01       	movw	r30, r24
    12ea:	20 83       	st	Z, r18
	 while(TWCR & (1<<TWSTO));											// wait until stop condition is executed and bus released
    12ec:	00 00       	nop
    12ee:	86 e5       	ldi	r24, 0x56	; 86
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	fc 01       	movw	r30, r24
    12f4:	80 81       	ld	r24, Z
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	80 71       	andi	r24, 0x10	; 16
    12fc:	99 27       	eor	r25, r25
    12fe:	21 e0       	ldi	r18, 0x01	; 1
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	09 f4       	brne	.+2      	; 0x1306 <_ZN3I2C4stopEv+0x32>
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	22 23       	and	r18, r18
    1308:	91 f7       	brne	.-28     	; 0x12ee <_ZN3I2C4stopEv+0x1a>
}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	08 95       	ret

00001314 <_ZN3I2C5writeEh>:


unsigned char I2C::write(unsigned char data)
{
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	00 d0       	rcall	.+0      	; 0x131a <_ZN3I2C5writeEh+0x6>
    131a:	00 d0       	rcall	.+0      	; 0x131c <_ZN3I2C5writeEh+0x8>
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	9b 83       	std	Y+3, r25	; 0x03
    1322:	8a 83       	std	Y+2, r24	; 0x02
    1324:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t   twst;
	TWDR = data;														// send data to the previously addressed device
    1326:	83 e2       	ldi	r24, 0x23	; 35
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	2c 81       	ldd	r18, Y+4	; 0x04
    132c:	fc 01       	movw	r30, r24
    132e:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1330:	86 e5       	ldi	r24, 0x56	; 86
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	24 e8       	ldi	r18, 0x84	; 132
    1336:	fc 01       	movw	r30, r24
    1338:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))){}										// wait until transmission completed
    133a:	00 00       	nop
    133c:	86 e5       	ldi	r24, 0x56	; 86
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	fc 01       	movw	r30, r24
    1342:	80 81       	ld	r24, Z
    1344:	80 95       	com	r24
    1346:	88 1f       	adc	r24, r24
    1348:	88 27       	eor	r24, r24
    134a:	88 1f       	adc	r24, r24
    134c:	88 23       	and	r24, r24
    134e:	b1 f7       	brne	.-20     	; 0x133c <_ZN3I2C5writeEh+0x28>
	twst = TW_STATUS & 0xF8;											// check value of TWI Status Register. Mask prescaler bits
    1350:	81 e2       	ldi	r24, 0x21	; 33
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	fc 01       	movw	r30, r24
    1356:	80 81       	ld	r24, Z
    1358:	88 7f       	andi	r24, 0xF8	; 248
    135a:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	88 32       	cpi	r24, 0x28	; 40
    1360:	11 f0       	breq	.+4      	; 0x1366 <_ZN3I2C5writeEh+0x52>
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <_ZN3I2C5writeEh+0x54>
	return 0;
    1366:	80 e0       	ldi	r24, 0x00	; 0
}
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <_ZN3I2C7readAckEv>:

unsigned char I2C::readAck(void)
{
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	00 d0       	rcall	.+0      	; 0x137c <_ZN3I2C7readAckEv+0x6>
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	9a 83       	std	Y+2, r25	; 0x02
    1382:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1384:	86 e5       	ldi	r24, 0x56	; 86
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	24 ec       	ldi	r18, 0xC4	; 196
    138a:	fc 01       	movw	r30, r24
    138c:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));
    138e:	00 00       	nop
    1390:	86 e5       	ldi	r24, 0x56	; 86
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	fc 01       	movw	r30, r24
    1396:	80 81       	ld	r24, Z
    1398:	80 95       	com	r24
    139a:	88 1f       	adc	r24, r24
    139c:	88 27       	eor	r24, r24
    139e:	88 1f       	adc	r24, r24
    13a0:	88 23       	and	r24, r24
    13a2:	b1 f7       	brne	.-20     	; 0x1390 <_ZN3I2C7readAckEv+0x1a>
	return TWDR;
    13a4:	83 e2       	ldi	r24, 0x23	; 35
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	fc 01       	movw	r30, r24
    13aa:	80 81       	ld	r24, Z
}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	08 95       	ret

000013b6 <_ZN3I2C7readNakEv>:

unsigned char I2C::readNak(void)
{
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <_ZN3I2C7readNakEv+0x6>
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	9a 83       	std	Y+2, r25	; 0x02
    13c2:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<<TWINT) | (1<<TWEN);
    13c4:	86 e5       	ldi	r24, 0x56	; 86
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	24 e8       	ldi	r18, 0x84	; 132
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));	
    13ce:	00 00       	nop
    13d0:	86 e5       	ldi	r24, 0x56	; 86
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	fc 01       	movw	r30, r24
    13d6:	80 81       	ld	r24, Z
    13d8:	80 95       	com	r24
    13da:	88 1f       	adc	r24, r24
    13dc:	88 27       	eor	r24, r24
    13de:	88 1f       	adc	r24, r24
    13e0:	88 23       	and	r24, r24
    13e2:	b1 f7       	brne	.-20     	; 0x13d0 <_ZN3I2C7readNakEv+0x1a>
	return TWDR;
    13e4:	83 e2       	ldi	r24, 0x23	; 35
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	fc 01       	movw	r30, r24
    13ea:	80 81       	ld	r24, Z
}
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <_ZN3I2C10readXBytesEPhhh>:

void I2C::readXBytes(unsigned char data[], unsigned char amount, unsigned char startAddress)	//data[x] : x >= amount
{
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	27 97       	sbiw	r28, 0x07	; 7
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	9b 83       	std	Y+3, r25	; 0x03
    1410:	8a 83       	std	Y+2, r24	; 0x02
    1412:	7d 83       	std	Y+5, r23	; 0x05
    1414:	6c 83       	std	Y+4, r22	; 0x04
    1416:	4e 83       	std	Y+6, r20	; 0x06
    1418:	2f 83       	std	Y+7, r18	; 0x07
//	if ((sizeof (data)/sizeof (data[0])) >= amount){
		write(startAddress);
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	9b 81       	ldd	r25, Y+3	; 0x03
    141e:	6f 81       	ldd	r22, Y+7	; 0x07
    1420:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN3I2C5writeEh>
		rep_start(I2C_READ);
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	9b 81       	ldd	r25, Y+3	; 0x03
    1428:	61 e0       	ldi	r22, 0x01	; 1
    142a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZN3I2C9rep_startEh>
		for (uint8_t i = 0; i < amount - 1; i++){
    142e:	19 82       	std	Y+1, r1	; 0x01
    1430:	11 c0       	rjmp	.+34     	; 0x1454 <_ZN3I2C10readXBytesEPhhh+0x5e>
			data[i] = readAck();
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	2c 81       	ldd	r18, Y+4	; 0x04
    143a:	3d 81       	ldd	r19, Y+5	; 0x05
    143c:	89 01       	movw	r16, r18
    143e:	08 0f       	add	r16, r24
    1440:	19 1f       	adc	r17, r25
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	9b 81       	ldd	r25, Y+3	; 0x03
    1446:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN3I2C7readAckEv>
    144a:	f8 01       	movw	r30, r16
    144c:	80 83       	st	Z, r24
void I2C::readXBytes(unsigned char data[], unsigned char amount, unsigned char startAddress)	//data[x] : x >= amount
{
//	if ((sizeof (data)/sizeof (data[0])) >= amount){
		write(startAddress);
		rep_start(I2C_READ);
		for (uint8_t i = 0; i < amount - 1; i++){
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	28 17       	cp	r18, r24
    1464:	39 07       	cpc	r19, r25
    1466:	2c f3       	brlt	.-54     	; 0x1432 <_ZN3I2C10readXBytesEPhhh+0x3c>
			data[i] = readAck();
		}
		data[amount - 1] = readNak();
    1468:	8e 81       	ldd	r24, Y+6	; 0x06
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	2c 81       	ldd	r18, Y+4	; 0x04
    1472:	3d 81       	ldd	r19, Y+5	; 0x05
    1474:	89 01       	movw	r16, r18
    1476:	08 0f       	add	r16, r24
    1478:	19 1f       	adc	r17, r25
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	9b 81       	ldd	r25, Y+3	; 0x03
    147e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_ZN3I2C7readNakEv>
    1482:	f8 01       	movw	r30, r16
    1484:	80 83       	st	Z, r24
//	}
}
    1486:	27 96       	adiw	r28, 0x07	; 7
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <_ZN3I2C11writeXBytesEPhj>:

void I2C::writeXBytes(unsigned char data[], unsigned int amount)	//data[x] : x >= amount
{
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	27 97       	sbiw	r28, 0x07	; 7
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	9b 83       	std	Y+3, r25	; 0x03
    14b2:	8a 83       	std	Y+2, r24	; 0x02
    14b4:	7d 83       	std	Y+5, r23	; 0x05
    14b6:	6c 83       	std	Y+4, r22	; 0x04
    14b8:	5f 83       	std	Y+7, r21	; 0x07
    14ba:	4e 83       	std	Y+6, r20	; 0x06
	for (uint8_t i = 0; i <= amount; i++){
    14bc:	19 82       	std	Y+1, r1	; 0x01
    14be:	11 c0       	rjmp	.+34     	; 0x14e2 <_ZN3I2C11writeXBytesEPhj+0x46>
		write(data[i]);	
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	2c 81       	ldd	r18, Y+4	; 0x04
    14c8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ca:	82 0f       	add	r24, r18
    14cc:	93 1f       	adc	r25, r19
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 81       	ld	r18, Z
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	9b 81       	ldd	r25, Y+3	; 0x03
    14d6:	62 2f       	mov	r22, r18
    14d8:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN3I2C5writeEh>
//	}
}

void I2C::writeXBytes(unsigned char data[], unsigned int amount)	//data[x] : x >= amount
{
	for (uint8_t i = 0; i <= amount; i++){
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	8f 5f       	subi	r24, 0xFF	; 255
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ea:	9f 81       	ldd	r25, Y+7	; 0x07
    14ec:	82 17       	cp	r24, r18
    14ee:	93 07       	cpc	r25, r19
    14f0:	38 f7       	brcc	.-50     	; 0x14c0 <_ZN3I2C11writeXBytesEPhj+0x24>
		write(data[i]);	
	}
}
    14f2:	27 96       	adiw	r28, 0x07	; 7
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	08 95       	ret

00001504 <_ZN3I2CD1Ev>:

// default destructor
I2C::~I2C()
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	00 d0       	rcall	.+0      	; 0x150a <_ZN3I2CD1Ev+0x6>
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
{
} //~I2C
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <_Z12_lcd_delay_8h>:

    These functions and macro's are written by Jesse.
*/

/* One byte delay loop, one loop costs 3 cycles. */
void _lcd_delay_8(uint8_t t) {
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	1f 92       	push	r1
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("\n"
                  "L_dl0%=: subi %0,1"    "\n\t"
                  "         brcc L_dl0%=" "\n\t"
                  :: "r" (t));
    1528:	89 81       	ldd	r24, Y+1	; 0x01

0000152a <L_dl021>:
    152a:	81 50       	subi	r24, 0x01	; 1
    152c:	f0 f7       	brcc	.-4      	; 0x152a <L_dl021>
}
    152e:	0f 90       	pop	r0
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	08 95       	ret

00001536 <_Z13_lcd_delay_16j>:

/* Two byte delay loop, one loop costs 4 cycles. */
void _lcd_delay_16(uint16_t t) {
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	00 d0       	rcall	.+0      	; 0x153c <_Z13_lcd_delay_16j+0x6>
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	9a 83       	std	Y+2, r25	; 0x02
    1542:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("\n"
                  "L_dl1%=: subi %A0,1"   "\n\t"
                  "         sbci %B0,0"   "\n\t"
                  "         brcc L_dl1%=" "\n\t"
                  :: "r" (t));
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	9a 81       	ldd	r25, Y+2	; 0x02

00001548 <L_dl149>:
    1548:	81 50       	subi	r24, 0x01	; 1
    154a:	90 40       	sbci	r25, 0x00	; 0
    154c:	e8 f7       	brcc	.-6      	; 0x1548 <L_dl149>
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	08 95       	ret

00001558 <_Z16lcd_read_commandv>:
// PA0 is Not Connected and is NOT AFFECTED by this LCD software
#define _LCD_E PA1
#define _LCD_RW PA2
#define _LCD_RS PA3

uint8_t lcd_read_command(void) {
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	1f 92       	push	r1
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    uint8_t command;
    DDRA |= 1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS; // control bus output
    1562:	8a e3       	ldi	r24, 0x3A	; 58
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	2a e3       	ldi	r18, 0x3A	; 58
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	f9 01       	movw	r30, r18
    156c:	20 81       	ld	r18, Z
    156e:	2e 60       	ori	r18, 0x0E	; 14
    1570:	fc 01       	movw	r30, r24
    1572:	20 83       	st	Z, r18
    DDRA &= ~0xF0; // databus input
    1574:	8a e3       	ldi	r24, 0x3A	; 58
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	2a e3       	ldi	r18, 0x3A	; 58
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	f9 01       	movw	r30, r18
    157e:	20 81       	ld	r18, Z
    1580:	2f 70       	andi	r18, 0x0F	; 15
    1582:	fc 01       	movw	r30, r24
    1584:	20 83       	st	Z, r18
    PORTA |= 1<<_LCD_RW | 0xF0; // R/!W= 1 (Read) and Pullup inputs 
    1586:	8b e3       	ldi	r24, 0x3B	; 59
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	2b e3       	ldi	r18, 0x3B	; 59
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	f9 01       	movw	r30, r18
    1590:	20 81       	ld	r18, Z
    1592:	24 6f       	ori	r18, 0xF4	; 244
    1594:	fc 01       	movw	r30, r24
    1596:	20 83       	st	Z, r18
    PORTA &= ~(1<<_LCD_RS); // RS=0
    1598:	8b e3       	ldi	r24, 0x3B	; 59
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	2b e3       	ldi	r18, 0x3B	; 59
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	f9 01       	movw	r30, r18
    15a2:	20 81       	ld	r18, Z
    15a4:	27 7f       	andi	r18, 0xF7	; 247
    15a6:	fc 01       	movw	r30, r24
    15a8:	20 83       	st	Z, r18
    _lcd_delay_us_small(2);
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	0e 94 8e 0a 	call	0x151c	; 0x151c <_Z12_lcd_delay_8h>
    PORTA |= 1<<_LCD_E; // E=1
    15b0:	8b e3       	ldi	r24, 0x3B	; 59
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	2b e3       	ldi	r18, 0x3B	; 59
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	f9 01       	movw	r30, r18
    15ba:	20 81       	ld	r18, Z
    15bc:	22 60       	ori	r18, 0x02	; 2
    15be:	fc 01       	movw	r30, r24
    15c0:	20 83       	st	Z, r18
    _lcd_delay_us_small(1);
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	0e 94 8e 0a 	call	0x151c	; 0x151c <_Z12_lcd_delay_8h>
    command = PINA & 0xF0; // read high nibble
    15c8:	89 e3       	ldi	r24, 0x39	; 57
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	fc 01       	movw	r30, r24
    15ce:	80 81       	ld	r24, Z
    15d0:	80 7f       	andi	r24, 0xF0	; 240
    15d2:	89 83       	std	Y+1, r24	; 0x01
    PORTA &= ~(1<<_LCD_E); // E=0
    15d4:	8b e3       	ldi	r24, 0x3B	; 59
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	2b e3       	ldi	r18, 0x3B	; 59
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	f9 01       	movw	r30, r18
    15de:	20 81       	ld	r18, Z
    15e0:	2d 7f       	andi	r18, 0xFD	; 253
    15e2:	fc 01       	movw	r30, r24
    15e4:	20 83       	st	Z, r18
    _lcd_delay_us_small(2);
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	0e 94 8e 0a 	call	0x151c	; 0x151c <_Z12_lcd_delay_8h>
    PORTA |= 1<<_LCD_E; // E=1
    15ec:	8b e3       	ldi	r24, 0x3B	; 59
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	2b e3       	ldi	r18, 0x3B	; 59
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	f9 01       	movw	r30, r18
    15f6:	20 81       	ld	r18, Z
    15f8:	22 60       	ori	r18, 0x02	; 2
    15fa:	fc 01       	movw	r30, r24
    15fc:	20 83       	st	Z, r18
    _lcd_delay_us_small(1);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	0e 94 8e 0a 	call	0x151c	; 0x151c <_Z12_lcd_delay_8h>
    command |= PINA >> 4; // read low nibble
    1604:	89 e3       	ldi	r24, 0x39	; 57
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	fc 01       	movw	r30, r24
    160a:	80 81       	ld	r24, Z
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	95 95       	asr	r25
    1612:	87 95       	ror	r24
    1614:	95 95       	asr	r25
    1616:	87 95       	ror	r24
    1618:	95 95       	asr	r25
    161a:	87 95       	ror	r24
    161c:	95 95       	asr	r25
    161e:	87 95       	ror	r24
    1620:	29 81       	ldd	r18, Y+1	; 0x01
    1622:	22 2f       	mov	r18, r18
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	82 2b       	or	r24, r18
    1628:	93 2b       	or	r25, r19
    162a:	89 83       	std	Y+1, r24	; 0x01
    PORTA &= ~(1<<_LCD_E); // E=0
    162c:	8b e3       	ldi	r24, 0x3B	; 59
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	2b e3       	ldi	r18, 0x3B	; 59
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	f9 01       	movw	r30, r18
    1636:	20 81       	ld	r18, Z
    1638:	2d 7f       	andi	r18, 0xFD	; 253
    163a:	fc 01       	movw	r30, r24
    163c:	20 83       	st	Z, r18
    return command;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1640:	0f 90       	pop	r0
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	08 95       	ret

00001648 <_ZL4waitv>:
    data |= PINA>>4;
    PORTA &= ~(1<<_LCD_E);
    return data;
}

static void wait(void) {
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    while (lcd_read_command() & 0x80);
    1650:	00 00       	nop
    1652:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_Z16lcd_read_commandv>
    1656:	88 1f       	adc	r24, r24
    1658:	88 27       	eor	r24, r24
    165a:	88 1f       	adc	r24, r24
    165c:	88 23       	and	r24, r24
    165e:	c9 f7       	brne	.-14     	; 0x1652 <_ZL4waitv+0xa>
}
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	08 95       	ret

00001666 <_ZL11pos_pulse_Ev>:
    
static void pos_pulse_E(void) {
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    _lcd_delay_us_small(2);
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	0e 94 8e 0a 	call	0x151c	; 0x151c <_Z12_lcd_delay_8h>
    PORTA |= 1<<_LCD_E; // E=1
    1674:	8b e3       	ldi	r24, 0x3B	; 59
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	2b e3       	ldi	r18, 0x3B	; 59
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	f9 01       	movw	r30, r18
    167e:	20 81       	ld	r18, Z
    1680:	22 60       	ori	r18, 0x02	; 2
    1682:	fc 01       	movw	r30, r24
    1684:	20 83       	st	Z, r18
    _lcd_delay_us_small(1);
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	0e 94 8e 0a 	call	0x151c	; 0x151c <_Z12_lcd_delay_8h>
    PORTA &= ~(1<<_LCD_E); // E=0
    168c:	8b e3       	ldi	r24, 0x3B	; 59
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	2b e3       	ldi	r18, 0x3B	; 59
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	f9 01       	movw	r30, r18
    1696:	20 81       	ld	r18, Z
    1698:	2d 7f       	andi	r18, 0xFD	; 253
    169a:	fc 01       	movw	r30, r24
    169c:	20 83       	st	Z, r18
}
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	08 95       	ret

000016a4 <_Z17lcd_write_commandh>:

void lcd_write_command(uint8_t command) {
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	1f 92       	push	r1
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	89 83       	std	Y+1, r24	; 0x01
    wait();
    16b0:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZL4waitv>
    DDRA |= 1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0; // controlbus and databus output
    16b4:	8a e3       	ldi	r24, 0x3A	; 58
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	2a e3       	ldi	r18, 0x3A	; 58
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	f9 01       	movw	r30, r18
    16be:	20 81       	ld	r18, Z
    16c0:	2e 6f       	ori	r18, 0xFE	; 254
    16c2:	fc 01       	movw	r30, r24
    16c4:	20 83       	st	Z, r18
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0);
    16c6:	8b e3       	ldi	r24, 0x3B	; 59
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	2b e3       	ldi	r18, 0x3B	; 59
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	f9 01       	movw	r30, r18
    16d0:	20 81       	ld	r18, Z
    16d2:	21 70       	andi	r18, 0x01	; 1
    16d4:	fc 01       	movw	r30, r24
    16d6:	20 83       	st	Z, r18
    PORTA |= command & 0xF0; // all control signals low RS=0 R/!W=0
    16d8:	8b e3       	ldi	r24, 0x3B	; 59
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	2b e3       	ldi	r18, 0x3B	; 59
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	f9 01       	movw	r30, r18
    16e2:	20 81       	ld	r18, Z
    16e4:	32 2f       	mov	r19, r18
    16e6:	29 81       	ldd	r18, Y+1	; 0x01
    16e8:	20 7f       	andi	r18, 0xF0	; 240
    16ea:	23 2b       	or	r18, r19
    16ec:	fc 01       	movw	r30, r24
    16ee:	20 83       	st	Z, r18
    pos_pulse_E();// write high nibble
    16f0:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZL11pos_pulse_Ev>
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0);
    16f4:	8b e3       	ldi	r24, 0x3B	; 59
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	2b e3       	ldi	r18, 0x3B	; 59
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	f9 01       	movw	r30, r18
    16fe:	20 81       	ld	r18, Z
    1700:	21 70       	andi	r18, 0x01	; 1
    1702:	fc 01       	movw	r30, r24
    1704:	20 83       	st	Z, r18
    PORTA |= command << 4; // all control signals low RS=0 R/!W=0
    1706:	8b e3       	ldi	r24, 0x3B	; 59
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	2b e3       	ldi	r18, 0x3B	; 59
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	f9 01       	movw	r30, r18
    1710:	20 81       	ld	r18, Z
    1712:	42 2f       	mov	r20, r18
    1714:	29 81       	ldd	r18, Y+1	; 0x01
    1716:	22 2f       	mov	r18, r18
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	22 95       	swap	r18
    171c:	32 95       	swap	r19
    171e:	30 7f       	andi	r19, 0xF0	; 240
    1720:	32 27       	eor	r19, r18
    1722:	20 7f       	andi	r18, 0xF0	; 240
    1724:	32 27       	eor	r19, r18
    1726:	24 2b       	or	r18, r20
    1728:	fc 01       	movw	r30, r24
    172a:	20 83       	st	Z, r18
    pos_pulse_E();// write low nibble
    172c:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZL11pos_pulse_Ev>
}
    1730:	0f 90       	pop	r0
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	08 95       	ret

00001738 <_Z14lcd_write_datah>:

void lcd_write_data(uint8_t data) {
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	1f 92       	push	r1
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	89 83       	std	Y+1, r24	; 0x01
    wait();
    1744:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZL4waitv>
    DDRA |= 1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0;
    1748:	8a e3       	ldi	r24, 0x3A	; 58
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	2a e3       	ldi	r18, 0x3A	; 58
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	f9 01       	movw	r30, r18
    1752:	20 81       	ld	r18, Z
    1754:	2e 6f       	ori	r18, 0xFE	; 254
    1756:	fc 01       	movw	r30, r24
    1758:	20 83       	st	Z, r18
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0);
    175a:	8b e3       	ldi	r24, 0x3B	; 59
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	2b e3       	ldi	r18, 0x3B	; 59
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	f9 01       	movw	r30, r18
    1764:	20 81       	ld	r18, Z
    1766:	21 70       	andi	r18, 0x01	; 1
    1768:	fc 01       	movw	r30, r24
    176a:	20 83       	st	Z, r18
    PORTA |= (data & 0xF0) | 1<<_LCD_RS; // RS=1 other control signals 0 R/!W=0
    176c:	8b e3       	ldi	r24, 0x3B	; 59
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	2b e3       	ldi	r18, 0x3B	; 59
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	f9 01       	movw	r30, r18
    1776:	30 81       	ld	r19, Z
    1778:	29 81       	ldd	r18, Y+1	; 0x01
    177a:	20 7f       	andi	r18, 0xF0	; 240
    177c:	23 2b       	or	r18, r19
    177e:	28 60       	ori	r18, 0x08	; 8
    1780:	fc 01       	movw	r30, r24
    1782:	20 83       	st	Z, r18
    pos_pulse_E();
    1784:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZL11pos_pulse_Ev>
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0);
    1788:	8b e3       	ldi	r24, 0x3B	; 59
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	2b e3       	ldi	r18, 0x3B	; 59
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	f9 01       	movw	r30, r18
    1792:	20 81       	ld	r18, Z
    1794:	21 70       	andi	r18, 0x01	; 1
    1796:	fc 01       	movw	r30, r24
    1798:	20 83       	st	Z, r18
    PORTA |= (data << 4) | 1<<_LCD_RS;
    179a:	8b e3       	ldi	r24, 0x3B	; 59
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	2b e3       	ldi	r18, 0x3B	; 59
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	f9 01       	movw	r30, r18
    17a4:	40 81       	ld	r20, Z
    17a6:	29 81       	ldd	r18, Y+1	; 0x01
    17a8:	22 2f       	mov	r18, r18
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	22 95       	swap	r18
    17ae:	32 95       	swap	r19
    17b0:	30 7f       	andi	r19, 0xF0	; 240
    17b2:	32 27       	eor	r19, r18
    17b4:	20 7f       	andi	r18, 0xF0	; 240
    17b6:	32 27       	eor	r19, r18
    17b8:	24 2b       	or	r18, r20
    17ba:	28 60       	ori	r18, 0x08	; 8
    17bc:	fc 01       	movw	r30, r24
    17be:	20 83       	st	Z, r18
    pos_pulse_E();
    17c0:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZL11pos_pulse_Ev>
}
    17c4:	0f 90       	pop	r0
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <_Z8lcd_initv>:

void lcd_init(void) {
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    DDRA |= 1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0;
    17d4:	8a e3       	ldi	r24, 0x3A	; 58
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	2a e3       	ldi	r18, 0x3A	; 58
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	f9 01       	movw	r30, r18
    17de:	20 81       	ld	r18, Z
    17e0:	2e 6f       	ori	r18, 0xFE	; 254
    17e2:	fc 01       	movw	r30, r24
    17e4:	20 83       	st	Z, r18
    _lcd_delay_us(15000);
    17e6:	8e ef       	ldi	r24, 0xFE	; 254
    17e8:	95 e3       	ldi	r25, 0x35	; 53
    17ea:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_Z13_lcd_delay_16j>
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0); 
    17ee:	8b e3       	ldi	r24, 0x3B	; 59
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	2b e3       	ldi	r18, 0x3B	; 59
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	f9 01       	movw	r30, r18
    17f8:	20 81       	ld	r18, Z
    17fa:	21 70       	andi	r18, 0x01	; 1
    17fc:	fc 01       	movw	r30, r24
    17fe:	20 83       	st	Z, r18
    PORTA |= 0x30; // all control signals low RS=0 R/!W=0
    1800:	8b e3       	ldi	r24, 0x3B	; 59
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	2b e3       	ldi	r18, 0x3B	; 59
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	f9 01       	movw	r30, r18
    180a:	20 81       	ld	r18, Z
    180c:	20 63       	ori	r18, 0x30	; 48
    180e:	fc 01       	movw	r30, r24
    1810:	20 83       	st	Z, r18
    pos_pulse_E(); 
    1812:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZL11pos_pulse_Ev>
    _lcd_delay_us(4100);
    1816:	82 ec       	ldi	r24, 0xC2	; 194
    1818:	9e e0       	ldi	r25, 0x0E	; 14
    181a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_Z13_lcd_delay_16j>
    pos_pulse_E(); 
    181e:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZL11pos_pulse_Ev>
    _lcd_delay_us(100);
    1822:	8c e5       	ldi	r24, 0x5C	; 92
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_Z13_lcd_delay_16j>
    pos_pulse_E(); 
    182a:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZL11pos_pulse_Ev>
    _lcd_delay_us(100);
    182e:	8c e5       	ldi	r24, 0x5C	; 92
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_Z13_lcd_delay_16j>
    PORTA &= ~0x10; 
    1836:	8b e3       	ldi	r24, 0x3B	; 59
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	2b e3       	ldi	r18, 0x3B	; 59
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	f9 01       	movw	r30, r18
    1840:	20 81       	ld	r18, Z
    1842:	2f 7e       	andi	r18, 0xEF	; 239
    1844:	fc 01       	movw	r30, r24
    1846:	20 83       	st	Z, r18
    pos_pulse_E(); 
    1848:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZL11pos_pulse_Ev>
    _lcd_delay_us(100);
    184c:	8c e5       	ldi	r24, 0x5C	; 92
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_Z13_lcd_delay_16j>
    lcd_write_command(0x28);
    1854:	88 e2       	ldi	r24, 0x28	; 40
    1856:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_Z17lcd_write_commandh>
    lcd_write_command(0x06);
    185a:	86 e0       	ldi	r24, 0x06	; 6
    185c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_Z17lcd_write_commandh>
    lcd_cls();
    1860:	0e 94 39 0c 	call	0x1872	; 0x1872 <_Z7lcd_clsv>
    lcd_cursor(true, true);
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	0e 94 4d 0c 	call	0x189a	; 0x189a <_Z10lcd_cursorbb>
}
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <_Z7lcd_clsv>:

void lcd_cls(void) {
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    lcd_write_command(0x01);
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_Z17lcd_write_commandh>
}
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	08 95       	ret

00001886 <_Z8lcd_homev>:

void lcd_home(void) {
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    lcd_write_command(0x02);
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_Z17lcd_write_commandh>
}
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	08 95       	ret

0000189a <_Z10lcd_cursorbb>:

void lcd_cursor(bool cursorOn, bool cursorBlinks) { 
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <_Z10lcd_cursorbb+0x6>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	6a 83       	std	Y+2, r22	; 0x02
    lcd_write_command(0x0C + (cursorOn ? 0x02 : 0) + (cursorBlinks ? 0x01 : 0));
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	88 23       	and	r24, r24
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <_Z10lcd_cursorbb+0x18>
    18ae:	9e e0       	ldi	r25, 0x0E	; 14
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <_Z10lcd_cursorbb+0x1a>
    18b2:	9c e0       	ldi	r25, 0x0C	; 12
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	88 23       	and	r24, r24
    18b8:	11 f0       	breq	.+4      	; 0x18be <_Z10lcd_cursorbb+0x24>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	01 c0       	rjmp	.+2      	; 0x18c0 <_Z10lcd_cursorbb+0x26>
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	89 0f       	add	r24, r25
    18c2:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_Z17lcd_write_commandh>
}
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <_Z8lcd_gotohh>:

void lcd_goto(uint8_t row, uint8_t column) {
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <_Z8lcd_gotohh+0x6>
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	6a 83       	std	Y+2, r22	; 0x02
    if (row < 2 && column < 16) {
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	82 30       	cpi	r24, 0x02	; 2
    18e2:	80 f4       	brcc	.+32     	; 0x1904 <_Z8lcd_gotohh+0x34>
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	80 31       	cpi	r24, 0x10	; 16
    18e8:	68 f4       	brcc	.+26     	; 0x1904 <_Z8lcd_gotohh+0x34>
        lcd_write_command(0x80 + row * 0x40 + column);
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 96       	adiw	r24, 0x02	; 2
    18f2:	98 2f       	mov	r25, r24
    18f4:	92 95       	swap	r25
    18f6:	99 0f       	add	r25, r25
    18f8:	99 0f       	add	r25, r25
    18fa:	90 7c       	andi	r25, 0xC0	; 192
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	89 0f       	add	r24, r25
    1900:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_Z17lcd_write_commandh>
    }
}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	08 95       	ret

0000190e <_Z11lcd_get_rowv>:

uint8_t lcd_get_row(void) {
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    wait();
    1916:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZL4waitv>
    return lcd_read_command() & 1<<6 ? 1 : 0;
    191a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_Z16lcd_read_commandv>
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	80 74       	andi	r24, 0x40	; 64
    1924:	99 27       	eor	r25, r25
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	11 f0       	breq	.+4      	; 0x192e <_Z11lcd_get_rowv+0x20>
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <_Z11lcd_get_rowv+0x22>
    192e:	80 e0       	ldi	r24, 0x00	; 0
}
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <_Z14lcd_get_columnv>:

uint8_t lcd_get_column(void) {
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    wait();
    193e:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZL4waitv>
    return lcd_read_command() & 0x3f;
    1942:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_Z16lcd_read_commandv>
    1946:	8f 73       	andi	r24, 0x3F	; 63
}
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	08 95       	ret

0000194e <_Z8lcd_putcc>:

void lcd_putc(char data) { 
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	1f 92       	push	r1
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	89 83       	std	Y+1, r24	; 0x01
    lcd_write_data(data);
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_Z14lcd_write_datah>
}
    1960:	0f 90       	pop	r0
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	08 95       	ret

00001968 <_Z8lcd_putsPc>:

void lcd_puts(char *s) {
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	00 d0       	rcall	.+0      	; 0x196e <_Z8lcd_putsPc+0x6>
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	89 83       	std	Y+1, r24	; 0x01
    while (*s) {
    1976:	0b c0       	rjmp	.+22     	; 0x198e <_Z8lcd_putsPc+0x26>
        lcd_putc(*s++);
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	9a 81       	ldd	r25, Y+2	; 0x02
    197c:	9c 01       	movw	r18, r24
    197e:	2f 5f       	subi	r18, 0xFF	; 255
    1980:	3f 4f       	sbci	r19, 0xFF	; 255
    1982:	3a 83       	std	Y+2, r19	; 0x02
    1984:	29 83       	std	Y+1, r18	; 0x01
    1986:	fc 01       	movw	r30, r24
    1988:	80 81       	ld	r24, Z
    198a:	0e 94 a7 0c 	call	0x194e	; 0x194e <_Z8lcd_putcc>
void lcd_putc(char data) { 
    lcd_write_data(data);
}

void lcd_puts(char *s) {
    while (*s) {
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	9a 81       	ldd	r25, Y+2	; 0x02
    1992:	fc 01       	movw	r30, r24
    1994:	80 81       	ld	r24, Z
    1996:	88 23       	and	r24, r24
    1998:	79 f7       	brne	.-34     	; 0x1978 <_Z8lcd_putsPc+0x10>
        lcd_putc(*s++);
    }
}
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	08 95       	ret

000019a4 <__cmpsf2>:
    19a4:	2f d0       	rcall	.+94     	; 0x1a04 <__fp_cmp>
    19a6:	08 f4       	brcc	.+2      	; 0x19aa <__cmpsf2+0x6>
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	08 95       	ret

000019ac <__fixunssfsi>:
    19ac:	57 d0       	rcall	.+174    	; 0x1a5c <__fp_splitA>
    19ae:	88 f0       	brcs	.+34     	; 0x19d2 <__fixunssfsi+0x26>
    19b0:	9f 57       	subi	r25, 0x7F	; 127
    19b2:	90 f0       	brcs	.+36     	; 0x19d8 <__fixunssfsi+0x2c>
    19b4:	b9 2f       	mov	r27, r25
    19b6:	99 27       	eor	r25, r25
    19b8:	b7 51       	subi	r27, 0x17	; 23
    19ba:	a0 f0       	brcs	.+40     	; 0x19e4 <__fixunssfsi+0x38>
    19bc:	d1 f0       	breq	.+52     	; 0x19f2 <__fixunssfsi+0x46>
    19be:	66 0f       	add	r22, r22
    19c0:	77 1f       	adc	r23, r23
    19c2:	88 1f       	adc	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	1a f0       	brmi	.+6      	; 0x19ce <__fixunssfsi+0x22>
    19c8:	ba 95       	dec	r27
    19ca:	c9 f7       	brne	.-14     	; 0x19be <__fixunssfsi+0x12>
    19cc:	12 c0       	rjmp	.+36     	; 0x19f2 <__fixunssfsi+0x46>
    19ce:	b1 30       	cpi	r27, 0x01	; 1
    19d0:	81 f0       	breq	.+32     	; 0x19f2 <__fixunssfsi+0x46>
    19d2:	5e d0       	rcall	.+188    	; 0x1a90 <__fp_zero>
    19d4:	b1 e0       	ldi	r27, 0x01	; 1
    19d6:	08 95       	ret
    19d8:	5b c0       	rjmp	.+182    	; 0x1a90 <__fp_zero>
    19da:	67 2f       	mov	r22, r23
    19dc:	78 2f       	mov	r23, r24
    19de:	88 27       	eor	r24, r24
    19e0:	b8 5f       	subi	r27, 0xF8	; 248
    19e2:	39 f0       	breq	.+14     	; 0x19f2 <__fixunssfsi+0x46>
    19e4:	b9 3f       	cpi	r27, 0xF9	; 249
    19e6:	cc f3       	brlt	.-14     	; 0x19da <__fixunssfsi+0x2e>
    19e8:	86 95       	lsr	r24
    19ea:	77 95       	ror	r23
    19ec:	67 95       	ror	r22
    19ee:	b3 95       	inc	r27
    19f0:	d9 f7       	brne	.-10     	; 0x19e8 <__fixunssfsi+0x3c>
    19f2:	3e f4       	brtc	.+14     	; 0x1a02 <__fixunssfsi+0x56>
    19f4:	90 95       	com	r25
    19f6:	80 95       	com	r24
    19f8:	70 95       	com	r23
    19fa:	61 95       	neg	r22
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1a00:	9f 4f       	sbci	r25, 0xFF	; 255
    1a02:	08 95       	ret

00001a04 <__fp_cmp>:
    1a04:	99 0f       	add	r25, r25
    1a06:	00 08       	sbc	r0, r0
    1a08:	55 0f       	add	r21, r21
    1a0a:	aa 0b       	sbc	r26, r26
    1a0c:	e0 e8       	ldi	r30, 0x80	; 128
    1a0e:	fe ef       	ldi	r31, 0xFE	; 254
    1a10:	16 16       	cp	r1, r22
    1a12:	17 06       	cpc	r1, r23
    1a14:	e8 07       	cpc	r30, r24
    1a16:	f9 07       	cpc	r31, r25
    1a18:	c0 f0       	brcs	.+48     	; 0x1a4a <__fp_cmp+0x46>
    1a1a:	12 16       	cp	r1, r18
    1a1c:	13 06       	cpc	r1, r19
    1a1e:	e4 07       	cpc	r30, r20
    1a20:	f5 07       	cpc	r31, r21
    1a22:	98 f0       	brcs	.+38     	; 0x1a4a <__fp_cmp+0x46>
    1a24:	62 1b       	sub	r22, r18
    1a26:	73 0b       	sbc	r23, r19
    1a28:	84 0b       	sbc	r24, r20
    1a2a:	95 0b       	sbc	r25, r21
    1a2c:	39 f4       	brne	.+14     	; 0x1a3c <__fp_cmp+0x38>
    1a2e:	0a 26       	eor	r0, r26
    1a30:	61 f0       	breq	.+24     	; 0x1a4a <__fp_cmp+0x46>
    1a32:	23 2b       	or	r18, r19
    1a34:	24 2b       	or	r18, r20
    1a36:	25 2b       	or	r18, r21
    1a38:	21 f4       	brne	.+8      	; 0x1a42 <__fp_cmp+0x3e>
    1a3a:	08 95       	ret
    1a3c:	0a 26       	eor	r0, r26
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <__fp_cmp+0x3e>
    1a40:	a1 40       	sbci	r26, 0x01	; 1
    1a42:	a6 95       	lsr	r26
    1a44:	8f ef       	ldi	r24, 0xFF	; 255
    1a46:	81 1d       	adc	r24, r1
    1a48:	81 1d       	adc	r24, r1
    1a4a:	08 95       	ret

00001a4c <__fp_split3>:
    1a4c:	57 fd       	sbrc	r21, 7
    1a4e:	90 58       	subi	r25, 0x80	; 128
    1a50:	44 0f       	add	r20, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	59 f0       	breq	.+22     	; 0x1a6c <__fp_splitA+0x10>
    1a56:	5f 3f       	cpi	r21, 0xFF	; 255
    1a58:	71 f0       	breq	.+28     	; 0x1a76 <__fp_splitA+0x1a>
    1a5a:	47 95       	ror	r20

00001a5c <__fp_splitA>:
    1a5c:	88 0f       	add	r24, r24
    1a5e:	97 fb       	bst	r25, 7
    1a60:	99 1f       	adc	r25, r25
    1a62:	61 f0       	breq	.+24     	; 0x1a7c <__fp_splitA+0x20>
    1a64:	9f 3f       	cpi	r25, 0xFF	; 255
    1a66:	79 f0       	breq	.+30     	; 0x1a86 <__fp_splitA+0x2a>
    1a68:	87 95       	ror	r24
    1a6a:	08 95       	ret
    1a6c:	12 16       	cp	r1, r18
    1a6e:	13 06       	cpc	r1, r19
    1a70:	14 06       	cpc	r1, r20
    1a72:	55 1f       	adc	r21, r21
    1a74:	f2 cf       	rjmp	.-28     	; 0x1a5a <__fp_split3+0xe>
    1a76:	46 95       	lsr	r20
    1a78:	f1 df       	rcall	.-30     	; 0x1a5c <__fp_splitA>
    1a7a:	08 c0       	rjmp	.+16     	; 0x1a8c <__fp_splitA+0x30>
    1a7c:	16 16       	cp	r1, r22
    1a7e:	17 06       	cpc	r1, r23
    1a80:	18 06       	cpc	r1, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	f1 cf       	rjmp	.-30     	; 0x1a68 <__fp_splitA+0xc>
    1a86:	86 95       	lsr	r24
    1a88:	71 05       	cpc	r23, r1
    1a8a:	61 05       	cpc	r22, r1
    1a8c:	08 94       	sec
    1a8e:	08 95       	ret

00001a90 <__fp_zero>:
    1a90:	e8 94       	clt

00001a92 <__fp_szero>:
    1a92:	bb 27       	eor	r27, r27
    1a94:	66 27       	eor	r22, r22
    1a96:	77 27       	eor	r23, r23
    1a98:	cb 01       	movw	r24, r22
    1a9a:	97 f9       	bld	r25, 7
    1a9c:	08 95       	ret

00001a9e <__gesf2>:
    1a9e:	b2 df       	rcall	.-156    	; 0x1a04 <__fp_cmp>
    1aa0:	08 f4       	brcc	.+2      	; 0x1aa4 <__gesf2+0x6>
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	08 95       	ret

00001aa6 <__mulsf3>:
    1aa6:	0b d0       	rcall	.+22     	; 0x1abe <__mulsf3x>
    1aa8:	78 c0       	rjmp	.+240    	; 0x1b9a <__fp_round>
    1aaa:	69 d0       	rcall	.+210    	; 0x1b7e <__fp_pscA>
    1aac:	28 f0       	brcs	.+10     	; 0x1ab8 <__mulsf3+0x12>
    1aae:	6e d0       	rcall	.+220    	; 0x1b8c <__fp_pscB>
    1ab0:	18 f0       	brcs	.+6      	; 0x1ab8 <__mulsf3+0x12>
    1ab2:	95 23       	and	r25, r21
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <__mulsf3+0x12>
    1ab6:	5a c0       	rjmp	.+180    	; 0x1b6c <__fp_inf>
    1ab8:	5f c0       	rjmp	.+190    	; 0x1b78 <__fp_nan>
    1aba:	11 24       	eor	r1, r1
    1abc:	ea cf       	rjmp	.-44     	; 0x1a92 <__fp_szero>

00001abe <__mulsf3x>:
    1abe:	c6 df       	rcall	.-116    	; 0x1a4c <__fp_split3>
    1ac0:	a0 f3       	brcs	.-24     	; 0x1aaa <__mulsf3+0x4>

00001ac2 <__mulsf3_pse>:
    1ac2:	95 9f       	mul	r25, r21
    1ac4:	d1 f3       	breq	.-12     	; 0x1aba <__mulsf3+0x14>
    1ac6:	95 0f       	add	r25, r21
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
    1aca:	55 1f       	adc	r21, r21
    1acc:	62 9f       	mul	r22, r18
    1ace:	f0 01       	movw	r30, r0
    1ad0:	72 9f       	mul	r23, r18
    1ad2:	bb 27       	eor	r27, r27
    1ad4:	f0 0d       	add	r31, r0
    1ad6:	b1 1d       	adc	r27, r1
    1ad8:	63 9f       	mul	r22, r19
    1ada:	aa 27       	eor	r26, r26
    1adc:	f0 0d       	add	r31, r0
    1ade:	b1 1d       	adc	r27, r1
    1ae0:	aa 1f       	adc	r26, r26
    1ae2:	64 9f       	mul	r22, r20
    1ae4:	66 27       	eor	r22, r22
    1ae6:	b0 0d       	add	r27, r0
    1ae8:	a1 1d       	adc	r26, r1
    1aea:	66 1f       	adc	r22, r22
    1aec:	82 9f       	mul	r24, r18
    1aee:	22 27       	eor	r18, r18
    1af0:	b0 0d       	add	r27, r0
    1af2:	a1 1d       	adc	r26, r1
    1af4:	62 1f       	adc	r22, r18
    1af6:	73 9f       	mul	r23, r19
    1af8:	b0 0d       	add	r27, r0
    1afa:	a1 1d       	adc	r26, r1
    1afc:	62 1f       	adc	r22, r18
    1afe:	83 9f       	mul	r24, r19
    1b00:	a0 0d       	add	r26, r0
    1b02:	61 1d       	adc	r22, r1
    1b04:	22 1f       	adc	r18, r18
    1b06:	74 9f       	mul	r23, r20
    1b08:	33 27       	eor	r19, r19
    1b0a:	a0 0d       	add	r26, r0
    1b0c:	61 1d       	adc	r22, r1
    1b0e:	23 1f       	adc	r18, r19
    1b10:	84 9f       	mul	r24, r20
    1b12:	60 0d       	add	r22, r0
    1b14:	21 1d       	adc	r18, r1
    1b16:	82 2f       	mov	r24, r18
    1b18:	76 2f       	mov	r23, r22
    1b1a:	6a 2f       	mov	r22, r26
    1b1c:	11 24       	eor	r1, r1
    1b1e:	9f 57       	subi	r25, 0x7F	; 127
    1b20:	50 40       	sbci	r21, 0x00	; 0
    1b22:	8a f0       	brmi	.+34     	; 0x1b46 <__mulsf3_pse+0x84>
    1b24:	e1 f0       	breq	.+56     	; 0x1b5e <__mulsf3_pse+0x9c>
    1b26:	88 23       	and	r24, r24
    1b28:	4a f0       	brmi	.+18     	; 0x1b3c <__mulsf3_pse+0x7a>
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	bb 1f       	adc	r27, r27
    1b30:	66 1f       	adc	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	88 1f       	adc	r24, r24
    1b36:	91 50       	subi	r25, 0x01	; 1
    1b38:	50 40       	sbci	r21, 0x00	; 0
    1b3a:	a9 f7       	brne	.-22     	; 0x1b26 <__mulsf3_pse+0x64>
    1b3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b3e:	51 05       	cpc	r21, r1
    1b40:	70 f0       	brcs	.+28     	; 0x1b5e <__mulsf3_pse+0x9c>
    1b42:	14 c0       	rjmp	.+40     	; 0x1b6c <__fp_inf>
    1b44:	a6 cf       	rjmp	.-180    	; 0x1a92 <__fp_szero>
    1b46:	5f 3f       	cpi	r21, 0xFF	; 255
    1b48:	ec f3       	brlt	.-6      	; 0x1b44 <__mulsf3_pse+0x82>
    1b4a:	98 3e       	cpi	r25, 0xE8	; 232
    1b4c:	dc f3       	brlt	.-10     	; 0x1b44 <__mulsf3_pse+0x82>
    1b4e:	86 95       	lsr	r24
    1b50:	77 95       	ror	r23
    1b52:	67 95       	ror	r22
    1b54:	b7 95       	ror	r27
    1b56:	f7 95       	ror	r31
    1b58:	e7 95       	ror	r30
    1b5a:	9f 5f       	subi	r25, 0xFF	; 255
    1b5c:	c1 f7       	brne	.-16     	; 0x1b4e <__mulsf3_pse+0x8c>
    1b5e:	fe 2b       	or	r31, r30
    1b60:	88 0f       	add	r24, r24
    1b62:	91 1d       	adc	r25, r1
    1b64:	96 95       	lsr	r25
    1b66:	87 95       	ror	r24
    1b68:	97 f9       	bld	r25, 7
    1b6a:	08 95       	ret

00001b6c <__fp_inf>:
    1b6c:	97 f9       	bld	r25, 7
    1b6e:	9f 67       	ori	r25, 0x7F	; 127
    1b70:	80 e8       	ldi	r24, 0x80	; 128
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	08 95       	ret

00001b78 <__fp_nan>:
    1b78:	9f ef       	ldi	r25, 0xFF	; 255
    1b7a:	80 ec       	ldi	r24, 0xC0	; 192
    1b7c:	08 95       	ret

00001b7e <__fp_pscA>:
    1b7e:	00 24       	eor	r0, r0
    1b80:	0a 94       	dec	r0
    1b82:	16 16       	cp	r1, r22
    1b84:	17 06       	cpc	r1, r23
    1b86:	18 06       	cpc	r1, r24
    1b88:	09 06       	cpc	r0, r25
    1b8a:	08 95       	ret

00001b8c <__fp_pscB>:
    1b8c:	00 24       	eor	r0, r0
    1b8e:	0a 94       	dec	r0
    1b90:	12 16       	cp	r1, r18
    1b92:	13 06       	cpc	r1, r19
    1b94:	14 06       	cpc	r1, r20
    1b96:	05 06       	cpc	r0, r21
    1b98:	08 95       	ret

00001b9a <__fp_round>:
    1b9a:	09 2e       	mov	r0, r25
    1b9c:	03 94       	inc	r0
    1b9e:	00 0c       	add	r0, r0
    1ba0:	11 f4       	brne	.+4      	; 0x1ba6 <__fp_round+0xc>
    1ba2:	88 23       	and	r24, r24
    1ba4:	52 f0       	brmi	.+20     	; 0x1bba <__fp_round+0x20>
    1ba6:	bb 0f       	add	r27, r27
    1ba8:	40 f4       	brcc	.+16     	; 0x1bba <__fp_round+0x20>
    1baa:	bf 2b       	or	r27, r31
    1bac:	11 f4       	brne	.+4      	; 0x1bb2 <__fp_round+0x18>
    1bae:	60 ff       	sbrs	r22, 0
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <__fp_round+0x20>
    1bb2:	6f 5f       	subi	r22, 0xFF	; 255
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	08 95       	ret

00001bbc <__tablejump2__>:
    1bbc:	ee 0f       	add	r30, r30
    1bbe:	ff 1f       	adc	r31, r31

00001bc0 <__tablejump__>:
    1bc0:	05 90       	lpm	r0, Z+
    1bc2:	f4 91       	lpm	r31, Z
    1bc4:	e0 2d       	mov	r30, r0
    1bc6:	09 94       	ijmp

00001bc8 <snprintf>:
    1bc8:	ae e0       	ldi	r26, 0x0E	; 14
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	ea ee       	ldi	r30, 0xEA	; 234
    1bce:	fd e0       	ldi	r31, 0x0D	; 13
    1bd0:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__prologue_saves__+0x1c>
    1bd4:	0d 89       	ldd	r16, Y+21	; 0x15
    1bd6:	1e 89       	ldd	r17, Y+22	; 0x16
    1bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bda:	98 8d       	ldd	r25, Y+24	; 0x18
    1bdc:	26 e0       	ldi	r18, 0x06	; 6
    1bde:	2c 83       	std	Y+4, r18	; 0x04
    1be0:	1a 83       	std	Y+2, r17	; 0x02
    1be2:	09 83       	std	Y+1, r16	; 0x01
    1be4:	97 ff       	sbrs	r25, 7
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <snprintf+0x24>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e8       	ldi	r25, 0x80	; 128
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
    1bf2:	ae 01       	movw	r20, r28
    1bf4:	45 5e       	subi	r20, 0xE5	; 229
    1bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <vfprintf>
    1c04:	4d 81       	ldd	r20, Y+5	; 0x05
    1c06:	5e 81       	ldd	r21, Y+6	; 0x06
    1c08:	57 fd       	sbrc	r21, 7
    1c0a:	0a c0       	rjmp	.+20     	; 0x1c20 <snprintf+0x58>
    1c0c:	2f 81       	ldd	r18, Y+7	; 0x07
    1c0e:	38 85       	ldd	r19, Y+8	; 0x08
    1c10:	42 17       	cp	r20, r18
    1c12:	53 07       	cpc	r21, r19
    1c14:	0c f4       	brge	.+2      	; 0x1c18 <snprintf+0x50>
    1c16:	9a 01       	movw	r18, r20
    1c18:	f8 01       	movw	r30, r16
    1c1a:	e2 0f       	add	r30, r18
    1c1c:	f3 1f       	adc	r31, r19
    1c1e:	10 82       	st	Z, r1
    1c20:	2e 96       	adiw	r28, 0x0e	; 14
    1c22:	e4 e0       	ldi	r30, 0x04	; 4
    1c24:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__epilogue_restores__+0x1c>

00001c28 <vfprintf>:
    1c28:	ac e0       	ldi	r26, 0x0C	; 12
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	ea e1       	ldi	r30, 0x1A	; 26
    1c2e:	fe e0       	ldi	r31, 0x0E	; 14
    1c30:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__>
    1c34:	7c 01       	movw	r14, r24
    1c36:	6b 01       	movw	r12, r22
    1c38:	8a 01       	movw	r16, r20
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	17 82       	std	Z+7, r1	; 0x07
    1c3e:	16 82       	std	Z+6, r1	; 0x06
    1c40:	83 81       	ldd	r24, Z+3	; 0x03
    1c42:	81 ff       	sbrs	r24, 1
    1c44:	bd c1       	rjmp	.+890    	; 0x1fc0 <vfprintf+0x398>
    1c46:	ce 01       	movw	r24, r28
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	4c 01       	movw	r8, r24
    1c4c:	f7 01       	movw	r30, r14
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	f6 01       	movw	r30, r12
    1c52:	93 fd       	sbrc	r25, 3
    1c54:	85 91       	lpm	r24, Z+
    1c56:	93 ff       	sbrs	r25, 3
    1c58:	81 91       	ld	r24, Z+
    1c5a:	6f 01       	movw	r12, r30
    1c5c:	88 23       	and	r24, r24
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <vfprintf+0x3a>
    1c60:	ab c1       	rjmp	.+854    	; 0x1fb8 <vfprintf+0x390>
    1c62:	85 32       	cpi	r24, 0x25	; 37
    1c64:	39 f4       	brne	.+14     	; 0x1c74 <vfprintf+0x4c>
    1c66:	93 fd       	sbrc	r25, 3
    1c68:	85 91       	lpm	r24, Z+
    1c6a:	93 ff       	sbrs	r25, 3
    1c6c:	81 91       	ld	r24, Z+
    1c6e:	6f 01       	movw	r12, r30
    1c70:	85 32       	cpi	r24, 0x25	; 37
    1c72:	29 f4       	brne	.+10     	; 0x1c7e <vfprintf+0x56>
    1c74:	b7 01       	movw	r22, r14
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1c7c:	e7 cf       	rjmp	.-50     	; 0x1c4c <vfprintf+0x24>
    1c7e:	51 2c       	mov	r5, r1
    1c80:	31 2c       	mov	r3, r1
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	20 32       	cpi	r18, 0x20	; 32
    1c86:	a0 f4       	brcc	.+40     	; 0x1cb0 <vfprintf+0x88>
    1c88:	8b 32       	cpi	r24, 0x2B	; 43
    1c8a:	69 f0       	breq	.+26     	; 0x1ca6 <vfprintf+0x7e>
    1c8c:	30 f4       	brcc	.+12     	; 0x1c9a <vfprintf+0x72>
    1c8e:	80 32       	cpi	r24, 0x20	; 32
    1c90:	59 f0       	breq	.+22     	; 0x1ca8 <vfprintf+0x80>
    1c92:	83 32       	cpi	r24, 0x23	; 35
    1c94:	69 f4       	brne	.+26     	; 0x1cb0 <vfprintf+0x88>
    1c96:	20 61       	ori	r18, 0x10	; 16
    1c98:	2c c0       	rjmp	.+88     	; 0x1cf2 <vfprintf+0xca>
    1c9a:	8d 32       	cpi	r24, 0x2D	; 45
    1c9c:	39 f0       	breq	.+14     	; 0x1cac <vfprintf+0x84>
    1c9e:	80 33       	cpi	r24, 0x30	; 48
    1ca0:	39 f4       	brne	.+14     	; 0x1cb0 <vfprintf+0x88>
    1ca2:	21 60       	ori	r18, 0x01	; 1
    1ca4:	26 c0       	rjmp	.+76     	; 0x1cf2 <vfprintf+0xca>
    1ca6:	22 60       	ori	r18, 0x02	; 2
    1ca8:	24 60       	ori	r18, 0x04	; 4
    1caa:	23 c0       	rjmp	.+70     	; 0x1cf2 <vfprintf+0xca>
    1cac:	28 60       	ori	r18, 0x08	; 8
    1cae:	21 c0       	rjmp	.+66     	; 0x1cf2 <vfprintf+0xca>
    1cb0:	27 fd       	sbrc	r18, 7
    1cb2:	27 c0       	rjmp	.+78     	; 0x1d02 <vfprintf+0xda>
    1cb4:	30 ed       	ldi	r19, 0xD0	; 208
    1cb6:	38 0f       	add	r19, r24
    1cb8:	3a 30       	cpi	r19, 0x0A	; 10
    1cba:	78 f4       	brcc	.+30     	; 0x1cda <vfprintf+0xb2>
    1cbc:	26 ff       	sbrs	r18, 6
    1cbe:	06 c0       	rjmp	.+12     	; 0x1ccc <vfprintf+0xa4>
    1cc0:	fa e0       	ldi	r31, 0x0A	; 10
    1cc2:	5f 9e       	mul	r5, r31
    1cc4:	30 0d       	add	r19, r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	53 2e       	mov	r5, r19
    1cca:	13 c0       	rjmp	.+38     	; 0x1cf2 <vfprintf+0xca>
    1ccc:	8a e0       	ldi	r24, 0x0A	; 10
    1cce:	38 9e       	mul	r3, r24
    1cd0:	30 0d       	add	r19, r0
    1cd2:	11 24       	eor	r1, r1
    1cd4:	33 2e       	mov	r3, r19
    1cd6:	20 62       	ori	r18, 0x20	; 32
    1cd8:	0c c0       	rjmp	.+24     	; 0x1cf2 <vfprintf+0xca>
    1cda:	8e 32       	cpi	r24, 0x2E	; 46
    1cdc:	21 f4       	brne	.+8      	; 0x1ce6 <vfprintf+0xbe>
    1cde:	26 fd       	sbrc	r18, 6
    1ce0:	6b c1       	rjmp	.+726    	; 0x1fb8 <vfprintf+0x390>
    1ce2:	20 64       	ori	r18, 0x40	; 64
    1ce4:	06 c0       	rjmp	.+12     	; 0x1cf2 <vfprintf+0xca>
    1ce6:	8c 36       	cpi	r24, 0x6C	; 108
    1ce8:	11 f4       	brne	.+4      	; 0x1cee <vfprintf+0xc6>
    1cea:	20 68       	ori	r18, 0x80	; 128
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <vfprintf+0xca>
    1cee:	88 36       	cpi	r24, 0x68	; 104
    1cf0:	41 f4       	brne	.+16     	; 0x1d02 <vfprintf+0xda>
    1cf2:	f6 01       	movw	r30, r12
    1cf4:	93 fd       	sbrc	r25, 3
    1cf6:	85 91       	lpm	r24, Z+
    1cf8:	93 ff       	sbrs	r25, 3
    1cfa:	81 91       	ld	r24, Z+
    1cfc:	6f 01       	movw	r12, r30
    1cfe:	81 11       	cpse	r24, r1
    1d00:	c1 cf       	rjmp	.-126    	; 0x1c84 <vfprintf+0x5c>
    1d02:	98 2f       	mov	r25, r24
    1d04:	9f 7d       	andi	r25, 0xDF	; 223
    1d06:	95 54       	subi	r25, 0x45	; 69
    1d08:	93 30       	cpi	r25, 0x03	; 3
    1d0a:	28 f4       	brcc	.+10     	; 0x1d16 <vfprintf+0xee>
    1d0c:	0c 5f       	subi	r16, 0xFC	; 252
    1d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d10:	ff e3       	ldi	r31, 0x3F	; 63
    1d12:	f9 83       	std	Y+1, r31	; 0x01
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <vfprintf+0x108>
    1d16:	83 36       	cpi	r24, 0x63	; 99
    1d18:	31 f0       	breq	.+12     	; 0x1d26 <vfprintf+0xfe>
    1d1a:	83 37       	cpi	r24, 0x73	; 115
    1d1c:	71 f0       	breq	.+28     	; 0x1d3a <vfprintf+0x112>
    1d1e:	83 35       	cpi	r24, 0x53	; 83
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <vfprintf+0xfc>
    1d22:	5b c0       	rjmp	.+182    	; 0x1dda <vfprintf+0x1b2>
    1d24:	22 c0       	rjmp	.+68     	; 0x1d6a <vfprintf+0x142>
    1d26:	f8 01       	movw	r30, r16
    1d28:	80 81       	ld	r24, Z
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	0e 5f       	subi	r16, 0xFE	; 254
    1d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d30:	44 24       	eor	r4, r4
    1d32:	43 94       	inc	r4
    1d34:	51 2c       	mov	r5, r1
    1d36:	54 01       	movw	r10, r8
    1d38:	15 c0       	rjmp	.+42     	; 0x1d64 <vfprintf+0x13c>
    1d3a:	38 01       	movw	r6, r16
    1d3c:	f2 e0       	ldi	r31, 0x02	; 2
    1d3e:	6f 0e       	add	r6, r31
    1d40:	71 1c       	adc	r7, r1
    1d42:	f8 01       	movw	r30, r16
    1d44:	a0 80       	ld	r10, Z
    1d46:	b1 80       	ldd	r11, Z+1	; 0x01
    1d48:	26 ff       	sbrs	r18, 6
    1d4a:	03 c0       	rjmp	.+6      	; 0x1d52 <vfprintf+0x12a>
    1d4c:	65 2d       	mov	r22, r5
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <vfprintf+0x12e>
    1d52:	6f ef       	ldi	r22, 0xFF	; 255
    1d54:	7f ef       	ldi	r23, 0xFF	; 255
    1d56:	c5 01       	movw	r24, r10
    1d58:	2c 87       	std	Y+12, r18	; 0x0c
    1d5a:	0e 94 18 10 	call	0x2030	; 0x2030 <strnlen>
    1d5e:	2c 01       	movw	r4, r24
    1d60:	83 01       	movw	r16, r6
    1d62:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d64:	2f 77       	andi	r18, 0x7F	; 127
    1d66:	22 2e       	mov	r2, r18
    1d68:	17 c0       	rjmp	.+46     	; 0x1d98 <vfprintf+0x170>
    1d6a:	38 01       	movw	r6, r16
    1d6c:	f2 e0       	ldi	r31, 0x02	; 2
    1d6e:	6f 0e       	add	r6, r31
    1d70:	71 1c       	adc	r7, r1
    1d72:	f8 01       	movw	r30, r16
    1d74:	a0 80       	ld	r10, Z
    1d76:	b1 80       	ldd	r11, Z+1	; 0x01
    1d78:	26 ff       	sbrs	r18, 6
    1d7a:	03 c0       	rjmp	.+6      	; 0x1d82 <vfprintf+0x15a>
    1d7c:	65 2d       	mov	r22, r5
    1d7e:	70 e0       	ldi	r23, 0x00	; 0
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <vfprintf+0x15e>
    1d82:	6f ef       	ldi	r22, 0xFF	; 255
    1d84:	7f ef       	ldi	r23, 0xFF	; 255
    1d86:	c5 01       	movw	r24, r10
    1d88:	2c 87       	std	Y+12, r18	; 0x0c
    1d8a:	0e 94 0d 10 	call	0x201a	; 0x201a <strnlen_P>
    1d8e:	2c 01       	movw	r4, r24
    1d90:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d92:	20 68       	ori	r18, 0x80	; 128
    1d94:	22 2e       	mov	r2, r18
    1d96:	83 01       	movw	r16, r6
    1d98:	23 fc       	sbrc	r2, 3
    1d9a:	1b c0       	rjmp	.+54     	; 0x1dd2 <vfprintf+0x1aa>
    1d9c:	83 2d       	mov	r24, r3
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	48 16       	cp	r4, r24
    1da2:	59 06       	cpc	r5, r25
    1da4:	b0 f4       	brcc	.+44     	; 0x1dd2 <vfprintf+0x1aa>
    1da6:	b7 01       	movw	r22, r14
    1da8:	80 e2       	ldi	r24, 0x20	; 32
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1db0:	3a 94       	dec	r3
    1db2:	f4 cf       	rjmp	.-24     	; 0x1d9c <vfprintf+0x174>
    1db4:	f5 01       	movw	r30, r10
    1db6:	27 fc       	sbrc	r2, 7
    1db8:	85 91       	lpm	r24, Z+
    1dba:	27 fe       	sbrs	r2, 7
    1dbc:	81 91       	ld	r24, Z+
    1dbe:	5f 01       	movw	r10, r30
    1dc0:	b7 01       	movw	r22, r14
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1dc8:	31 10       	cpse	r3, r1
    1dca:	3a 94       	dec	r3
    1dcc:	f1 e0       	ldi	r31, 0x01	; 1
    1dce:	4f 1a       	sub	r4, r31
    1dd0:	51 08       	sbc	r5, r1
    1dd2:	41 14       	cp	r4, r1
    1dd4:	51 04       	cpc	r5, r1
    1dd6:	71 f7       	brne	.-36     	; 0x1db4 <vfprintf+0x18c>
    1dd8:	e5 c0       	rjmp	.+458    	; 0x1fa4 <vfprintf+0x37c>
    1dda:	84 36       	cpi	r24, 0x64	; 100
    1ddc:	11 f0       	breq	.+4      	; 0x1de2 <vfprintf+0x1ba>
    1dde:	89 36       	cpi	r24, 0x69	; 105
    1de0:	39 f5       	brne	.+78     	; 0x1e30 <vfprintf+0x208>
    1de2:	f8 01       	movw	r30, r16
    1de4:	27 ff       	sbrs	r18, 7
    1de6:	07 c0       	rjmp	.+14     	; 0x1df6 <vfprintf+0x1ce>
    1de8:	60 81       	ld	r22, Z
    1dea:	71 81       	ldd	r23, Z+1	; 0x01
    1dec:	82 81       	ldd	r24, Z+2	; 0x02
    1dee:	93 81       	ldd	r25, Z+3	; 0x03
    1df0:	0c 5f       	subi	r16, 0xFC	; 252
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	08 c0       	rjmp	.+16     	; 0x1e06 <vfprintf+0x1de>
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	88 27       	eor	r24, r24
    1dfc:	77 fd       	sbrc	r23, 7
    1dfe:	80 95       	com	r24
    1e00:	98 2f       	mov	r25, r24
    1e02:	0e 5f       	subi	r16, 0xFE	; 254
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	2f 76       	andi	r18, 0x6F	; 111
    1e08:	b2 2e       	mov	r11, r18
    1e0a:	97 ff       	sbrs	r25, 7
    1e0c:	09 c0       	rjmp	.+18     	; 0x1e20 <vfprintf+0x1f8>
    1e0e:	90 95       	com	r25
    1e10:	80 95       	com	r24
    1e12:	70 95       	com	r23
    1e14:	61 95       	neg	r22
    1e16:	7f 4f       	sbci	r23, 0xFF	; 255
    1e18:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1c:	20 68       	ori	r18, 0x80	; 128
    1e1e:	b2 2e       	mov	r11, r18
    1e20:	2a e0       	ldi	r18, 0x0A	; 10
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	a4 01       	movw	r20, r8
    1e26:	0e 94 55 10 	call	0x20aa	; 0x20aa <__ultoa_invert>
    1e2a:	a8 2e       	mov	r10, r24
    1e2c:	a8 18       	sub	r10, r8
    1e2e:	44 c0       	rjmp	.+136    	; 0x1eb8 <vfprintf+0x290>
    1e30:	85 37       	cpi	r24, 0x75	; 117
    1e32:	29 f4       	brne	.+10     	; 0x1e3e <vfprintf+0x216>
    1e34:	2f 7e       	andi	r18, 0xEF	; 239
    1e36:	b2 2e       	mov	r11, r18
    1e38:	2a e0       	ldi	r18, 0x0A	; 10
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	25 c0       	rjmp	.+74     	; 0x1e88 <vfprintf+0x260>
    1e3e:	f2 2f       	mov	r31, r18
    1e40:	f9 7f       	andi	r31, 0xF9	; 249
    1e42:	bf 2e       	mov	r11, r31
    1e44:	8f 36       	cpi	r24, 0x6F	; 111
    1e46:	c1 f0       	breq	.+48     	; 0x1e78 <vfprintf+0x250>
    1e48:	18 f4       	brcc	.+6      	; 0x1e50 <vfprintf+0x228>
    1e4a:	88 35       	cpi	r24, 0x58	; 88
    1e4c:	79 f0       	breq	.+30     	; 0x1e6c <vfprintf+0x244>
    1e4e:	b4 c0       	rjmp	.+360    	; 0x1fb8 <vfprintf+0x390>
    1e50:	80 37       	cpi	r24, 0x70	; 112
    1e52:	19 f0       	breq	.+6      	; 0x1e5a <vfprintf+0x232>
    1e54:	88 37       	cpi	r24, 0x78	; 120
    1e56:	21 f0       	breq	.+8      	; 0x1e60 <vfprintf+0x238>
    1e58:	af c0       	rjmp	.+350    	; 0x1fb8 <vfprintf+0x390>
    1e5a:	2f 2f       	mov	r18, r31
    1e5c:	20 61       	ori	r18, 0x10	; 16
    1e5e:	b2 2e       	mov	r11, r18
    1e60:	b4 fe       	sbrs	r11, 4
    1e62:	0d c0       	rjmp	.+26     	; 0x1e7e <vfprintf+0x256>
    1e64:	8b 2d       	mov	r24, r11
    1e66:	84 60       	ori	r24, 0x04	; 4
    1e68:	b8 2e       	mov	r11, r24
    1e6a:	09 c0       	rjmp	.+18     	; 0x1e7e <vfprintf+0x256>
    1e6c:	24 ff       	sbrs	r18, 4
    1e6e:	0a c0       	rjmp	.+20     	; 0x1e84 <vfprintf+0x25c>
    1e70:	9f 2f       	mov	r25, r31
    1e72:	96 60       	ori	r25, 0x06	; 6
    1e74:	b9 2e       	mov	r11, r25
    1e76:	06 c0       	rjmp	.+12     	; 0x1e84 <vfprintf+0x25c>
    1e78:	28 e0       	ldi	r18, 0x08	; 8
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	05 c0       	rjmp	.+10     	; 0x1e88 <vfprintf+0x260>
    1e7e:	20 e1       	ldi	r18, 0x10	; 16
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <vfprintf+0x260>
    1e84:	20 e1       	ldi	r18, 0x10	; 16
    1e86:	32 e0       	ldi	r19, 0x02	; 2
    1e88:	f8 01       	movw	r30, r16
    1e8a:	b7 fe       	sbrs	r11, 7
    1e8c:	07 c0       	rjmp	.+14     	; 0x1e9c <vfprintf+0x274>
    1e8e:	60 81       	ld	r22, Z
    1e90:	71 81       	ldd	r23, Z+1	; 0x01
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	93 81       	ldd	r25, Z+3	; 0x03
    1e96:	0c 5f       	subi	r16, 0xFC	; 252
    1e98:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9a:	06 c0       	rjmp	.+12     	; 0x1ea8 <vfprintf+0x280>
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 5f       	subi	r16, 0xFE	; 254
    1ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea8:	a4 01       	movw	r20, r8
    1eaa:	0e 94 55 10 	call	0x20aa	; 0x20aa <__ultoa_invert>
    1eae:	a8 2e       	mov	r10, r24
    1eb0:	a8 18       	sub	r10, r8
    1eb2:	fb 2d       	mov	r31, r11
    1eb4:	ff 77       	andi	r31, 0x7F	; 127
    1eb6:	bf 2e       	mov	r11, r31
    1eb8:	b6 fe       	sbrs	r11, 6
    1eba:	0b c0       	rjmp	.+22     	; 0x1ed2 <vfprintf+0x2aa>
    1ebc:	2b 2d       	mov	r18, r11
    1ebe:	2e 7f       	andi	r18, 0xFE	; 254
    1ec0:	a5 14       	cp	r10, r5
    1ec2:	50 f4       	brcc	.+20     	; 0x1ed8 <vfprintf+0x2b0>
    1ec4:	b4 fe       	sbrs	r11, 4
    1ec6:	0a c0       	rjmp	.+20     	; 0x1edc <vfprintf+0x2b4>
    1ec8:	b2 fc       	sbrc	r11, 2
    1eca:	08 c0       	rjmp	.+16     	; 0x1edc <vfprintf+0x2b4>
    1ecc:	2b 2d       	mov	r18, r11
    1ece:	2e 7e       	andi	r18, 0xEE	; 238
    1ed0:	05 c0       	rjmp	.+10     	; 0x1edc <vfprintf+0x2b4>
    1ed2:	7a 2c       	mov	r7, r10
    1ed4:	2b 2d       	mov	r18, r11
    1ed6:	03 c0       	rjmp	.+6      	; 0x1ede <vfprintf+0x2b6>
    1ed8:	7a 2c       	mov	r7, r10
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <vfprintf+0x2b6>
    1edc:	75 2c       	mov	r7, r5
    1ede:	24 ff       	sbrs	r18, 4
    1ee0:	0d c0       	rjmp	.+26     	; 0x1efc <vfprintf+0x2d4>
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	ea 0d       	add	r30, r10
    1ee6:	f1 1d       	adc	r31, r1
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 33       	cpi	r24, 0x30	; 48
    1eec:	11 f4       	brne	.+4      	; 0x1ef2 <vfprintf+0x2ca>
    1eee:	29 7e       	andi	r18, 0xE9	; 233
    1ef0:	09 c0       	rjmp	.+18     	; 0x1f04 <vfprintf+0x2dc>
    1ef2:	22 ff       	sbrs	r18, 2
    1ef4:	06 c0       	rjmp	.+12     	; 0x1f02 <vfprintf+0x2da>
    1ef6:	73 94       	inc	r7
    1ef8:	73 94       	inc	r7
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <vfprintf+0x2dc>
    1efc:	82 2f       	mov	r24, r18
    1efe:	86 78       	andi	r24, 0x86	; 134
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <vfprintf+0x2dc>
    1f02:	73 94       	inc	r7
    1f04:	23 fd       	sbrc	r18, 3
    1f06:	13 c0       	rjmp	.+38     	; 0x1f2e <vfprintf+0x306>
    1f08:	20 ff       	sbrs	r18, 0
    1f0a:	06 c0       	rjmp	.+12     	; 0x1f18 <vfprintf+0x2f0>
    1f0c:	5a 2c       	mov	r5, r10
    1f0e:	73 14       	cp	r7, r3
    1f10:	18 f4       	brcc	.+6      	; 0x1f18 <vfprintf+0x2f0>
    1f12:	53 0c       	add	r5, r3
    1f14:	57 18       	sub	r5, r7
    1f16:	73 2c       	mov	r7, r3
    1f18:	73 14       	cp	r7, r3
    1f1a:	68 f4       	brcc	.+26     	; 0x1f36 <vfprintf+0x30e>
    1f1c:	b7 01       	movw	r22, r14
    1f1e:	80 e2       	ldi	r24, 0x20	; 32
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	2c 87       	std	Y+12, r18	; 0x0c
    1f24:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1f28:	73 94       	inc	r7
    1f2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f2c:	f5 cf       	rjmp	.-22     	; 0x1f18 <vfprintf+0x2f0>
    1f2e:	73 14       	cp	r7, r3
    1f30:	10 f4       	brcc	.+4      	; 0x1f36 <vfprintf+0x30e>
    1f32:	37 18       	sub	r3, r7
    1f34:	01 c0       	rjmp	.+2      	; 0x1f38 <vfprintf+0x310>
    1f36:	31 2c       	mov	r3, r1
    1f38:	24 ff       	sbrs	r18, 4
    1f3a:	12 c0       	rjmp	.+36     	; 0x1f60 <vfprintf+0x338>
    1f3c:	b7 01       	movw	r22, r14
    1f3e:	80 e3       	ldi	r24, 0x30	; 48
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	2c 87       	std	Y+12, r18	; 0x0c
    1f44:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1f48:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f4a:	22 ff       	sbrs	r18, 2
    1f4c:	17 c0       	rjmp	.+46     	; 0x1f7c <vfprintf+0x354>
    1f4e:	21 ff       	sbrs	r18, 1
    1f50:	03 c0       	rjmp	.+6      	; 0x1f58 <vfprintf+0x330>
    1f52:	88 e5       	ldi	r24, 0x58	; 88
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <vfprintf+0x334>
    1f58:	88 e7       	ldi	r24, 0x78	; 120
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	b7 01       	movw	r22, r14
    1f5e:	0c c0       	rjmp	.+24     	; 0x1f78 <vfprintf+0x350>
    1f60:	82 2f       	mov	r24, r18
    1f62:	86 78       	andi	r24, 0x86	; 134
    1f64:	59 f0       	breq	.+22     	; 0x1f7c <vfprintf+0x354>
    1f66:	21 fd       	sbrc	r18, 1
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <vfprintf+0x346>
    1f6a:	80 e2       	ldi	r24, 0x20	; 32
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <vfprintf+0x348>
    1f6e:	8b e2       	ldi	r24, 0x2B	; 43
    1f70:	27 fd       	sbrc	r18, 7
    1f72:	8d e2       	ldi	r24, 0x2D	; 45
    1f74:	b7 01       	movw	r22, r14
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1f7c:	a5 14       	cp	r10, r5
    1f7e:	38 f4       	brcc	.+14     	; 0x1f8e <vfprintf+0x366>
    1f80:	b7 01       	movw	r22, r14
    1f82:	80 e3       	ldi	r24, 0x30	; 48
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1f8a:	5a 94       	dec	r5
    1f8c:	f7 cf       	rjmp	.-18     	; 0x1f7c <vfprintf+0x354>
    1f8e:	aa 94       	dec	r10
    1f90:	f4 01       	movw	r30, r8
    1f92:	ea 0d       	add	r30, r10
    1f94:	f1 1d       	adc	r31, r1
    1f96:	80 81       	ld	r24, Z
    1f98:	b7 01       	movw	r22, r14
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1fa0:	a1 10       	cpse	r10, r1
    1fa2:	f5 cf       	rjmp	.-22     	; 0x1f8e <vfprintf+0x366>
    1fa4:	33 20       	and	r3, r3
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <vfprintf+0x382>
    1fa8:	51 ce       	rjmp	.-862    	; 0x1c4c <vfprintf+0x24>
    1faa:	b7 01       	movw	r22, r14
    1fac:	80 e2       	ldi	r24, 0x20	; 32
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1fb4:	3a 94       	dec	r3
    1fb6:	f6 cf       	rjmp	.-20     	; 0x1fa4 <vfprintf+0x37c>
    1fb8:	f7 01       	movw	r30, r14
    1fba:	86 81       	ldd	r24, Z+6	; 0x06
    1fbc:	97 81       	ldd	r25, Z+7	; 0x07
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <vfprintf+0x39c>
    1fc0:	8f ef       	ldi	r24, 0xFF	; 255
    1fc2:	9f ef       	ldi	r25, 0xFF	; 255
    1fc4:	2c 96       	adiw	r28, 0x0c	; 12
    1fc6:	e2 e1       	ldi	r30, 0x12	; 18
    1fc8:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__>

00001fcc <__eerd_block_m32>:
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22

00001fd0 <__eerd_blraw_m32>:
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	e1 99       	sbic	0x1c, 1	; 28
    1fd4:	fe cf       	rjmp	.-4      	; 0x1fd2 <__eerd_blraw_m32+0x2>
    1fd6:	06 c0       	rjmp	.+12     	; 0x1fe4 <__eerd_blraw_m32+0x14>
    1fd8:	ff bb       	out	0x1f, r31	; 31
    1fda:	ee bb       	out	0x1e, r30	; 30
    1fdc:	e0 9a       	sbi	0x1c, 0	; 28
    1fde:	31 96       	adiw	r30, 0x01	; 1
    1fe0:	0d b2       	in	r0, 0x1d	; 29
    1fe2:	0d 92       	st	X+, r0
    1fe4:	41 50       	subi	r20, 0x01	; 1
    1fe6:	50 40       	sbci	r21, 0x00	; 0
    1fe8:	b8 f7       	brcc	.-18     	; 0x1fd8 <__eerd_blraw_m32+0x8>
    1fea:	08 95       	ret

00001fec <__eewr_block_m32>:
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	03 c0       	rjmp	.+6      	; 0x1ff8 <__eewr_block_m32+0xc>
    1ff2:	2d 91       	ld	r18, X+
    1ff4:	0e 94 01 10 	call	0x2002	; 0x2002 <__eewr_r18_m32>
    1ff8:	41 50       	subi	r20, 0x01	; 1
    1ffa:	50 40       	sbci	r21, 0x00	; 0
    1ffc:	d0 f7       	brcc	.-12     	; 0x1ff2 <__eewr_block_m32+0x6>
    1ffe:	08 95       	ret

00002000 <__eewr_byte_m32>:
    2000:	26 2f       	mov	r18, r22

00002002 <__eewr_r18_m32>:
    2002:	e1 99       	sbic	0x1c, 1	; 28
    2004:	fe cf       	rjmp	.-4      	; 0x2002 <__eewr_r18_m32>
    2006:	9f bb       	out	0x1f, r25	; 31
    2008:	8e bb       	out	0x1e, r24	; 30
    200a:	2d bb       	out	0x1d, r18	; 29
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	e2 9a       	sbi	0x1c, 2	; 28
    2012:	e1 9a       	sbi	0x1c, 1	; 28
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	08 95       	ret

0000201a <strnlen_P>:
    201a:	fc 01       	movw	r30, r24
    201c:	05 90       	lpm	r0, Z+
    201e:	61 50       	subi	r22, 0x01	; 1
    2020:	70 40       	sbci	r23, 0x00	; 0
    2022:	01 10       	cpse	r0, r1
    2024:	d8 f7       	brcc	.-10     	; 0x201c <strnlen_P+0x2>
    2026:	80 95       	com	r24
    2028:	90 95       	com	r25
    202a:	8e 0f       	add	r24, r30
    202c:	9f 1f       	adc	r25, r31
    202e:	08 95       	ret

00002030 <strnlen>:
    2030:	fc 01       	movw	r30, r24
    2032:	61 50       	subi	r22, 0x01	; 1
    2034:	70 40       	sbci	r23, 0x00	; 0
    2036:	01 90       	ld	r0, Z+
    2038:	01 10       	cpse	r0, r1
    203a:	d8 f7       	brcc	.-10     	; 0x2032 <strnlen+0x2>
    203c:	80 95       	com	r24
    203e:	90 95       	com	r25
    2040:	8e 0f       	add	r24, r30
    2042:	9f 1f       	adc	r25, r31
    2044:	08 95       	ret

00002046 <fputc>:
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	18 2f       	mov	r17, r24
    2050:	09 2f       	mov	r16, r25
    2052:	eb 01       	movw	r28, r22
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	81 fd       	sbrc	r24, 1
    2058:	03 c0       	rjmp	.+6      	; 0x2060 <fputc+0x1a>
    205a:	8f ef       	ldi	r24, 0xFF	; 255
    205c:	9f ef       	ldi	r25, 0xFF	; 255
    205e:	20 c0       	rjmp	.+64     	; 0x20a0 <fputc+0x5a>
    2060:	82 ff       	sbrs	r24, 2
    2062:	10 c0       	rjmp	.+32     	; 0x2084 <fputc+0x3e>
    2064:	4e 81       	ldd	r20, Y+6	; 0x06
    2066:	5f 81       	ldd	r21, Y+7	; 0x07
    2068:	2c 81       	ldd	r18, Y+4	; 0x04
    206a:	3d 81       	ldd	r19, Y+5	; 0x05
    206c:	42 17       	cp	r20, r18
    206e:	53 07       	cpc	r21, r19
    2070:	7c f4       	brge	.+30     	; 0x2090 <fputc+0x4a>
    2072:	e8 81       	ld	r30, Y
    2074:	f9 81       	ldd	r31, Y+1	; 0x01
    2076:	9f 01       	movw	r18, r30
    2078:	2f 5f       	subi	r18, 0xFF	; 255
    207a:	3f 4f       	sbci	r19, 0xFF	; 255
    207c:	39 83       	std	Y+1, r19	; 0x01
    207e:	28 83       	st	Y, r18
    2080:	10 83       	st	Z, r17
    2082:	06 c0       	rjmp	.+12     	; 0x2090 <fputc+0x4a>
    2084:	e8 85       	ldd	r30, Y+8	; 0x08
    2086:	f9 85       	ldd	r31, Y+9	; 0x09
    2088:	81 2f       	mov	r24, r17
    208a:	09 95       	icall
    208c:	89 2b       	or	r24, r25
    208e:	29 f7       	brne	.-54     	; 0x205a <fputc+0x14>
    2090:	2e 81       	ldd	r18, Y+6	; 0x06
    2092:	3f 81       	ldd	r19, Y+7	; 0x07
    2094:	2f 5f       	subi	r18, 0xFF	; 255
    2096:	3f 4f       	sbci	r19, 0xFF	; 255
    2098:	3f 83       	std	Y+7, r19	; 0x07
    209a:	2e 83       	std	Y+6, r18	; 0x06
    209c:	81 2f       	mov	r24, r17
    209e:	90 2f       	mov	r25, r16
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	08 95       	ret

000020aa <__ultoa_invert>:
    20aa:	fa 01       	movw	r30, r20
    20ac:	aa 27       	eor	r26, r26
    20ae:	28 30       	cpi	r18, 0x08	; 8
    20b0:	51 f1       	breq	.+84     	; 0x2106 <__ultoa_invert+0x5c>
    20b2:	20 31       	cpi	r18, 0x10	; 16
    20b4:	81 f1       	breq	.+96     	; 0x2116 <__ultoa_invert+0x6c>
    20b6:	e8 94       	clt
    20b8:	6f 93       	push	r22
    20ba:	6e 7f       	andi	r22, 0xFE	; 254
    20bc:	6e 5f       	subi	r22, 0xFE	; 254
    20be:	7f 4f       	sbci	r23, 0xFF	; 255
    20c0:	8f 4f       	sbci	r24, 0xFF	; 255
    20c2:	9f 4f       	sbci	r25, 0xFF	; 255
    20c4:	af 4f       	sbci	r26, 0xFF	; 255
    20c6:	b1 e0       	ldi	r27, 0x01	; 1
    20c8:	3e d0       	rcall	.+124    	; 0x2146 <__ultoa_invert+0x9c>
    20ca:	b4 e0       	ldi	r27, 0x04	; 4
    20cc:	3c d0       	rcall	.+120    	; 0x2146 <__ultoa_invert+0x9c>
    20ce:	67 0f       	add	r22, r23
    20d0:	78 1f       	adc	r23, r24
    20d2:	89 1f       	adc	r24, r25
    20d4:	9a 1f       	adc	r25, r26
    20d6:	a1 1d       	adc	r26, r1
    20d8:	68 0f       	add	r22, r24
    20da:	79 1f       	adc	r23, r25
    20dc:	8a 1f       	adc	r24, r26
    20de:	91 1d       	adc	r25, r1
    20e0:	a1 1d       	adc	r26, r1
    20e2:	6a 0f       	add	r22, r26
    20e4:	71 1d       	adc	r23, r1
    20e6:	81 1d       	adc	r24, r1
    20e8:	91 1d       	adc	r25, r1
    20ea:	a1 1d       	adc	r26, r1
    20ec:	20 d0       	rcall	.+64     	; 0x212e <__ultoa_invert+0x84>
    20ee:	09 f4       	brne	.+2      	; 0x20f2 <__ultoa_invert+0x48>
    20f0:	68 94       	set
    20f2:	3f 91       	pop	r19
    20f4:	2a e0       	ldi	r18, 0x0A	; 10
    20f6:	26 9f       	mul	r18, r22
    20f8:	11 24       	eor	r1, r1
    20fa:	30 19       	sub	r19, r0
    20fc:	30 5d       	subi	r19, 0xD0	; 208
    20fe:	31 93       	st	Z+, r19
    2100:	de f6       	brtc	.-74     	; 0x20b8 <__ultoa_invert+0xe>
    2102:	cf 01       	movw	r24, r30
    2104:	08 95       	ret
    2106:	46 2f       	mov	r20, r22
    2108:	47 70       	andi	r20, 0x07	; 7
    210a:	40 5d       	subi	r20, 0xD0	; 208
    210c:	41 93       	st	Z+, r20
    210e:	b3 e0       	ldi	r27, 0x03	; 3
    2110:	0f d0       	rcall	.+30     	; 0x2130 <__ultoa_invert+0x86>
    2112:	c9 f7       	brne	.-14     	; 0x2106 <__ultoa_invert+0x5c>
    2114:	f6 cf       	rjmp	.-20     	; 0x2102 <__ultoa_invert+0x58>
    2116:	46 2f       	mov	r20, r22
    2118:	4f 70       	andi	r20, 0x0F	; 15
    211a:	40 5d       	subi	r20, 0xD0	; 208
    211c:	4a 33       	cpi	r20, 0x3A	; 58
    211e:	18 f0       	brcs	.+6      	; 0x2126 <__ultoa_invert+0x7c>
    2120:	49 5d       	subi	r20, 0xD9	; 217
    2122:	31 fd       	sbrc	r19, 1
    2124:	40 52       	subi	r20, 0x20	; 32
    2126:	41 93       	st	Z+, r20
    2128:	02 d0       	rcall	.+4      	; 0x212e <__ultoa_invert+0x84>
    212a:	a9 f7       	brne	.-22     	; 0x2116 <__ultoa_invert+0x6c>
    212c:	ea cf       	rjmp	.-44     	; 0x2102 <__ultoa_invert+0x58>
    212e:	b4 e0       	ldi	r27, 0x04	; 4
    2130:	a6 95       	lsr	r26
    2132:	97 95       	ror	r25
    2134:	87 95       	ror	r24
    2136:	77 95       	ror	r23
    2138:	67 95       	ror	r22
    213a:	ba 95       	dec	r27
    213c:	c9 f7       	brne	.-14     	; 0x2130 <__ultoa_invert+0x86>
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	61 05       	cpc	r22, r1
    2142:	71 05       	cpc	r23, r1
    2144:	08 95       	ret
    2146:	9b 01       	movw	r18, r22
    2148:	ac 01       	movw	r20, r24
    214a:	0a 2e       	mov	r0, r26
    214c:	06 94       	lsr	r0
    214e:	57 95       	ror	r21
    2150:	47 95       	ror	r20
    2152:	37 95       	ror	r19
    2154:	27 95       	ror	r18
    2156:	ba 95       	dec	r27
    2158:	c9 f7       	brne	.-14     	; 0x214c <__ultoa_invert+0xa2>
    215a:	62 0f       	add	r22, r18
    215c:	73 1f       	adc	r23, r19
    215e:	84 1f       	adc	r24, r20
    2160:	95 1f       	adc	r25, r21
    2162:	a0 1d       	adc	r26, r0
    2164:	08 95       	ret

00002166 <__prologue_saves__>:
    2166:	2f 92       	push	r2
    2168:	3f 92       	push	r3
    216a:	4f 92       	push	r4
    216c:	5f 92       	push	r5
    216e:	6f 92       	push	r6
    2170:	7f 92       	push	r7
    2172:	8f 92       	push	r8
    2174:	9f 92       	push	r9
    2176:	af 92       	push	r10
    2178:	bf 92       	push	r11
    217a:	cf 92       	push	r12
    217c:	df 92       	push	r13
    217e:	ef 92       	push	r14
    2180:	ff 92       	push	r15
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	ca 1b       	sub	r28, r26
    2190:	db 0b       	sbc	r29, r27
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	09 94       	ijmp

0000219e <__epilogue_restores__>:
    219e:	2a 88       	ldd	r2, Y+18	; 0x12
    21a0:	39 88       	ldd	r3, Y+17	; 0x11
    21a2:	48 88       	ldd	r4, Y+16	; 0x10
    21a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    21a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    21a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    21aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    21ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    21ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    21b0:	b9 84       	ldd	r11, Y+9	; 0x09
    21b2:	c8 84       	ldd	r12, Y+8	; 0x08
    21b4:	df 80       	ldd	r13, Y+7	; 0x07
    21b6:	ee 80       	ldd	r14, Y+6	; 0x06
    21b8:	fd 80       	ldd	r15, Y+5	; 0x05
    21ba:	0c 81       	ldd	r16, Y+4	; 0x04
    21bc:	1b 81       	ldd	r17, Y+3	; 0x03
    21be:	aa 81       	ldd	r26, Y+2	; 0x02
    21c0:	b9 81       	ldd	r27, Y+1	; 0x01
    21c2:	ce 0f       	add	r28, r30
    21c4:	d1 1d       	adc	r29, r1
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	ed 01       	movw	r28, r26
    21d2:	08 95       	ret

000021d4 <__do_global_dtors>:
    21d4:	10 e0       	ldi	r17, 0x00	; 0
    21d6:	c6 e5       	ldi	r28, 0x56	; 86
    21d8:	d0 e0       	ldi	r29, 0x00	; 0
    21da:	04 c0       	rjmp	.+8      	; 0x21e4 <__do_global_dtors+0x10>
    21dc:	fe 01       	movw	r30, r28
    21de:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__tablejump__>
    21e2:	22 96       	adiw	r28, 0x02	; 2
    21e4:	c8 35       	cpi	r28, 0x58	; 88
    21e6:	d1 07       	cpc	r29, r17
    21e8:	c9 f7       	brne	.-14     	; 0x21dc <__do_global_dtors+0x8>
    21ea:	f8 94       	cli

000021ec <__stop_program>:
    21ec:	ff cf       	rjmp	.-2      	; 0x21ec <__stop_program>
