
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000244a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  0000244a  000024de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  0080009a  0080009a  00002518  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001426  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000621  00000000  00000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000095e  00000000  00000000  0000418b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006d4  00000000  00000000  00004aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000070f  00000000  00000000  000051c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e2d  00000000  00000000  000058cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f0  00000000  00000000  000066fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
       4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      2c:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__vector_11>
      30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	a7 09       	sbc	r26, r7

00000056 <__ctors_end>:
      56:	b4 09       	sbc	r27, r4

00000058 <__dtors_end>:
      58:	11 24       	eor	r1, r1
      5a:	1f be       	out	0x3f, r1	; 63
      5c:	cf e5       	ldi	r28, 0x5F	; 95
      5e:	d8 e0       	ldi	r29, 0x08	; 8
      60:	de bf       	out	0x3e, r29	; 62
      62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
      64:	10 e0       	ldi	r17, 0x00	; 0
      66:	a0 e6       	ldi	r26, 0x60	; 96
      68:	b0 e0       	ldi	r27, 0x00	; 0
      6a:	ea e4       	ldi	r30, 0x4A	; 74
      6c:	f4 e2       	ldi	r31, 0x24	; 36
      6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
      70:	05 90       	lpm	r0, Z+
      72:	0d 92       	st	X+, r0
      74:	aa 39       	cpi	r26, 0x9A	; 154
      76:	b1 07       	cpc	r27, r17
      78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
      7a:	20 e0       	ldi	r18, 0x00	; 0
      7c:	aa e9       	ldi	r26, 0x9A	; 154
      7e:	b0 e0       	ldi	r27, 0x00	; 0
      80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
      82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
      84:	a4 3c       	cpi	r26, 0xC4	; 196
      86:	b2 07       	cpc	r27, r18
      88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
      8a:	10 e0       	ldi	r17, 0x00	; 0
      8c:	c6 e5       	ldi	r28, 0x56	; 86
      8e:	d0 e0       	ldi	r29, 0x00	; 0
      90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
      92:	22 97       	sbiw	r28, 0x02	; 2
      94:	fe 01       	movw	r30, r28
      96:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__tablejump__>
      9a:	c4 35       	cpi	r28, 0x54	; 84
      9c:	d1 07       	cpc	r29, r17
      9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
      a0:	0e 94 0f 08 	call	0x101e	; 0x101e <main>
      a4:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__do_global_dtors>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_Z8bcdToDech>:
							 { 23,23,0,59,59,0,59,59 },
							 { 31,31,0,12,12,0,99,99 }
							 };
							 
unsigned char bcdToDec(unsigned char val)
{
      ac:	cf 93       	push	r28
      ae:	df 93       	push	r29
      b0:	1f 92       	push	r1
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	89 83       	std	Y+1, r24	; 0x01
	return ((val/16*10) + (val%16) );
      b8:	89 81       	ldd	r24, Y+1	; 0x01
      ba:	82 95       	swap	r24
      bc:	8f 70       	andi	r24, 0x0F	; 15
      be:	88 0f       	add	r24, r24
      c0:	98 2f       	mov	r25, r24
      c2:	99 0f       	add	r25, r25
      c4:	99 0f       	add	r25, r25
      c6:	98 0f       	add	r25, r24
      c8:	89 81       	ldd	r24, Y+1	; 0x01
      ca:	8f 70       	andi	r24, 0x0F	; 15
      cc:	89 0f       	add	r24, r25
}
      ce:	0f 90       	pop	r0
      d0:	df 91       	pop	r29
      d2:	cf 91       	pop	r28
      d4:	08 95       	ret

000000d6 <_Z8decToBcdh>:

unsigned char decToBcd(unsigned char val)
{
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	1f 92       	push	r1
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	89 83       	std	Y+1, r24	; 0x01
	return ((val/10*16) + (val%10) );
      e2:	99 81       	ldd	r25, Y+1	; 0x01
      e4:	8d ec       	ldi	r24, 0xCD	; 205
      e6:	98 9f       	mul	r25, r24
      e8:	81 2d       	mov	r24, r1
      ea:	11 24       	eor	r1, r1
      ec:	86 95       	lsr	r24
      ee:	86 95       	lsr	r24
      f0:	86 95       	lsr	r24
      f2:	28 2f       	mov	r18, r24
      f4:	22 95       	swap	r18
      f6:	20 7f       	andi	r18, 0xF0	; 240
      f8:	99 81       	ldd	r25, Y+1	; 0x01
      fa:	8d ec       	ldi	r24, 0xCD	; 205
      fc:	98 9f       	mul	r25, r24
      fe:	81 2d       	mov	r24, r1
     100:	11 24       	eor	r1, r1
     102:	86 95       	lsr	r24
     104:	86 95       	lsr	r24
     106:	86 95       	lsr	r24
     108:	88 0f       	add	r24, r24
     10a:	38 2f       	mov	r19, r24
     10c:	33 0f       	add	r19, r19
     10e:	33 0f       	add	r19, r19
     110:	83 0f       	add	r24, r19
     112:	39 2f       	mov	r19, r25
     114:	38 1b       	sub	r19, r24
     116:	83 2f       	mov	r24, r19
     118:	82 0f       	add	r24, r18
}
     11a:	0f 90       	pop	r0
     11c:	df 91       	pop	r29
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <_Z7init_T0v>:

void init_T0(void)
{
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS02) && (1<<CS00);
     12a:	83 e5       	ldi	r24, 0x53	; 83
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	21 e0       	ldi	r18, 0x01	; 1
     130:	fc 01       	movw	r30, r24
     132:	20 83       	st	Z, r18
	TCNT0 = 0;
     134:	82 e5       	ldi	r24, 0x52	; 82
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	fc 01       	movw	r30, r24
     13a:	10 82       	st	Z, r1
	TIMSK = (1<<TOIE0);
     13c:	89 e5       	ldi	r24, 0x59	; 89
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	21 e0       	ldi	r18, 0x01	; 1
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
}
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <_Z8init_lcdv>:

void init_lcd(void)
{
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
	lcd_init();
     154:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <_Z8lcd_initv>
	lcd_cursor(false, false);								//  cursor off
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_Z10lcd_cursorbb>
	lcd_home();
     160:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_Z8lcd_homev>
}
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <_Z4initv>:

void init(void)
{
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	00 d0       	rcall	.+0      	; 0x174 <_Z4initv+0xa>
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0x00;
     178:	81 e3       	ldi	r24, 0x31	; 49
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	fc 01       	movw	r30, r24
     17e:	10 82       	st	Z, r1
	DDRB = 0xFF;
     180:	87 e3       	ldi	r24, 0x37	; 55
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	2f ef       	ldi	r18, 0xFF	; 255
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
	init_lcd();
     18a:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z8init_lcdv>
	TWI.init();												// Function to initialize TWI
     18e:	82 ec       	ldi	r24, 0xC2	; 194
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_ZN3I2C4initEv>
	unsigned char ret = TWI.start(I2C_WRITE);				// set device address and write mode
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	82 ec       	ldi	r24, 0xC2	; 194
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <_ZN3I2C5startEh>
     1a0:	89 83       	std	Y+1, r24	; 0x01
	while(ret)
     1a2:	19 c0       	rjmp	.+50     	; 0x1d6 <_Z4initv+0x6c>
	{
		TWI.stop();
     1a4:	82 ec       	ldi	r24, 0xC2	; 194
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN3I2C4stopEv>
		ret = TWI.start(I2C_WRITE);
     1ac:	60 e0       	ldi	r22, 0x00	; 0
     1ae:	82 ec       	ldi	r24, 0xC2	; 194
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <_ZN3I2C5startEh>
     1b6:	89 83       	std	Y+1, r24	; 0x01
		snprintf(buffer, sizeof buffer, "Failed");
     1b8:	87 e0       	ldi	r24, 0x07	; 7
     1ba:	e0 e9       	ldi	r30, 0x90	; 144
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	aa e9       	ldi	r26, 0x9A	; 154
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	01 90       	ld	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	8a 95       	dec	r24
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <_Z4initv+0x58>
		lcd_puts(buffer);
     1ca:	8a e9       	ldi	r24, 0x9A	; 154
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_Z8lcd_putsPc>
		lcd_home();
     1d2:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_Z8lcd_homev>
	DDRD = 0x00;
	DDRB = 0xFF;
	init_lcd();
	TWI.init();												// Function to initialize TWI
	unsigned char ret = TWI.start(I2C_WRITE);				// set device address and write mode
	while(ret)
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	88 23       	and	r24, r24
     1da:	21 f7       	brne	.-56     	; 0x1a4 <_Z4initv+0x3a>
		ret = TWI.start(I2C_WRITE);
		snprintf(buffer, sizeof buffer, "Failed");
		lcd_puts(buffer);
		lcd_home();
	}
	TWI.start_wait(I2C_WRITE);						// set device address and write mode
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	82 ec       	ldi	r24, 0xC2	; 194
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_ZN3I2C10start_waitEh>
	TWI.readXBytes(data,7,0x00);
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	47 e0       	ldi	r20, 0x07	; 7
     1ea:	62 eb       	ldi	r22, 0xB2	; 178
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	82 ec       	ldi	r24, 0xC2	; 194
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <_ZN3I2C10readXBytesEPhhh>
	TWI.stop();
     1f6:	82 ec       	ldi	r24, 0xC2	; 194
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN3I2C4stopEv>
	for (uint8_t i = 0; i <= 6 ; i++)
     1fe:	1a 82       	std	Y+2, r1	; 0x02
     200:	15 c0       	rjmp	.+42     	; 0x22c <_Z4initv+0xc2>
	{
		realTime[i] = bcdToDec(data[i]);
     202:	8a 81       	ldd	r24, Y+2	; 0x02
     204:	08 2f       	mov	r16, r24
     206:	10 e0       	ldi	r17, 0x00	; 0
     208:	8a 81       	ldd	r24, Y+2	; 0x02
     20a:	88 2f       	mov	r24, r24
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	8e 54       	subi	r24, 0x4E	; 78
     210:	9f 4f       	sbci	r25, 0xFF	; 255
     212:	fc 01       	movw	r30, r24
     214:	80 81       	ld	r24, Z
     216:	0e 94 56 00 	call	0xac	; 0xac <_Z8bcdToDech>
     21a:	28 2f       	mov	r18, r24
     21c:	c8 01       	movw	r24, r16
     21e:	85 55       	subi	r24, 0x55	; 85
     220:	9f 4f       	sbci	r25, 0xFF	; 255
     222:	fc 01       	movw	r30, r24
     224:	20 83       	st	Z, r18
		lcd_home();
	}
	TWI.start_wait(I2C_WRITE);						// set device address and write mode
	TWI.readXBytes(data,7,0x00);
	TWI.stop();
	for (uint8_t i = 0; i <= 6 ; i++)
     226:	8a 81       	ldd	r24, Y+2	; 0x02
     228:	8f 5f       	subi	r24, 0xFF	; 255
     22a:	8a 83       	std	Y+2, r24	; 0x02
     22c:	8a 81       	ldd	r24, Y+2	; 0x02
     22e:	87 30       	cpi	r24, 0x07	; 7
     230:	40 f3       	brcs	.-48     	; 0x202 <_Z4initv+0x98>
	{
		realTime[i] = bcdToDec(data[i]);
	}
	init_T0();
     232:	0e 94 91 00 	call	0x122	; 0x122 <_Z7init_T0v>
}
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	08 95       	ret

00000244 <_Z11t1_Stop_TOIv>:

void t1_Stop_TOI(void)
{
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= ~(1<<TOIE0);
     24c:	89 e5       	ldi	r24, 0x59	; 89
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	29 e5       	ldi	r18, 0x59	; 89
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	f9 01       	movw	r30, r18
     256:	20 81       	ld	r18, Z
     258:	2e 7f       	andi	r18, 0xFE	; 254
     25a:	fc 01       	movw	r30, r24
     25c:	20 83       	st	Z, r18
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <_Z12t1_Start_TOIv>:

void t1_Start_TOI(void)
{
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);
     26c:	89 e5       	ldi	r24, 0x59	; 89
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	29 e5       	ldi	r18, 0x59	; 89
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	f9 01       	movw	r30, r18
     276:	20 81       	ld	r18, Z
     278:	21 60       	ori	r18, 0x01	; 1
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18
}
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <_Z11Alarm_startv>:

void Alarm_start(void)
{
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x01;
     28c:	88 e3       	ldi	r24, 0x38	; 56
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	21 e0       	ldi	r18, 0x01	; 1
     292:	fc 01       	movw	r30, r24
     294:	20 83       	st	Z, r18
}
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <_Z10Alarm_stopv>:

void Alarm_stop(void)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x00;
     2a4:	88 e3       	ldi	r24, 0x38	; 56
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	fc 01       	movw	r30, r24
     2aa:	10 82       	st	Z, r1
}
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <_Z11writeScreenPh>:
//
//unsigned char timeIn[7] = {	decToBcd(30), decToBcd(41), decToBcd(17), decToBcd(5),	 decToBcd(6), decToBcd(2), decToBcd(15)};
//								Seconds,	  Minutes,	   Hours,	    Day of the week, Date,		  month,	   Year.

void writeScreen(unsigned char time[])
{
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <_Z11writeScreenPh+0x6>
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <_Z11writeScreenPh+0x8>
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	9c 83       	std	Y+4, r25	; 0x04
     2c0:	8b 83       	std	Y+3, r24	; 0x03
	lcd_home();
     2c2:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_Z8lcd_homev>
	for(int8_t i = 2;i>=0;i--)
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	89 83       	std	Y+1, r24	; 0x01
     2ca:	46 c0       	rjmp	.+140    	; 0x358 <_Z11writeScreenPh+0xa6>
	{
		if (time[i] < 10)
     2cc:	89 81       	ldd	r24, Y+1	; 0x01
     2ce:	99 27       	eor	r25, r25
     2d0:	87 fd       	sbrc	r24, 7
     2d2:	90 95       	com	r25
     2d4:	2b 81       	ldd	r18, Y+3	; 0x03
     2d6:	3c 81       	ldd	r19, Y+4	; 0x04
     2d8:	82 0f       	add	r24, r18
     2da:	93 1f       	adc	r25, r19
     2dc:	fc 01       	movw	r30, r24
     2de:	80 81       	ld	r24, Z
     2e0:	8a 30       	cpi	r24, 0x0A	; 10
     2e2:	18 f4       	brcc	.+6      	; 0x2ea <_Z11writeScreenPh+0x38>
		{
			lcd_putc('0');	
     2e4:	80 e3       	ldi	r24, 0x30	; 48
     2e6:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z8lcd_putcc>
		}
		snprintf(buffer,sizeof buffer,"%d",time[i]);
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	99 27       	eor	r25, r25
     2ee:	87 fd       	sbrc	r24, 7
     2f0:	90 95       	com	r25
     2f2:	2b 81       	ldd	r18, Y+3	; 0x03
     2f4:	3c 81       	ldd	r19, Y+4	; 0x04
     2f6:	82 0f       	add	r24, r18
     2f8:	93 1f       	adc	r25, r19
     2fa:	fc 01       	movw	r30, r24
     2fc:	80 81       	ld	r24, Z
     2fe:	88 2f       	mov	r24, r24
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	29 2f       	mov	r18, r25
     304:	2f 93       	push	r18
     306:	8f 93       	push	r24
     308:	87 e9       	ldi	r24, 0x97	; 151
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	89 2f       	mov	r24, r25
     30e:	8f 93       	push	r24
     310:	87 e9       	ldi	r24, 0x97	; 151
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	8f 93       	push	r24
     316:	1f 92       	push	r1
     318:	81 e1       	ldi	r24, 0x11	; 17
     31a:	8f 93       	push	r24
     31c:	8a e9       	ldi	r24, 0x9A	; 154
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	89 2f       	mov	r24, r25
     322:	8f 93       	push	r24
     324:	8a e9       	ldi	r24, 0x9A	; 154
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	8f 93       	push	r24
     32a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <snprintf>
     32e:	8d b7       	in	r24, 0x3d	; 61
     330:	9e b7       	in	r25, 0x3e	; 62
     332:	08 96       	adiw	r24, 0x08	; 8
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
		lcd_puts(buffer);
     33e:	8a e9       	ldi	r24, 0x9A	; 154
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_Z8lcd_putsPc>
		if(i>0)
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	18 16       	cp	r1, r24
     34a:	1c f4       	brge	.+6      	; 0x352 <_Z11writeScreenPh+0xa0>
		{
			lcd_putc(':');	
     34c:	8a e3       	ldi	r24, 0x3A	; 58
     34e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z8lcd_putcc>
//								Seconds,	  Minutes,	   Hours,	    Day of the week, Date,		  month,	   Year.

void writeScreen(unsigned char time[])
{
	lcd_home();
	for(int8_t i = 2;i>=0;i--)
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	81 50       	subi	r24, 0x01	; 1
     356:	89 83       	std	Y+1, r24	; 0x01
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	88 23       	and	r24, r24
     35c:	0c f0       	brlt	.+2      	; 0x360 <_Z11writeScreenPh+0xae>
     35e:	b6 cf       	rjmp	.-148    	; 0x2cc <_Z11writeScreenPh+0x1a>
		if(i>0)
		{
			lcd_putc(':');	
		}
	}
	lcd_goto(1,0);
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_Z8lcd_gotohh>
	for(int8_t i = 4;i<=6;i++)
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	8a 83       	std	Y+2, r24	; 0x02
     36c:	46 c0       	rjmp	.+140    	; 0x3fa <_Z11writeScreenPh+0x148>
	{
		if (time[i] < 10)
     36e:	8a 81       	ldd	r24, Y+2	; 0x02
     370:	99 27       	eor	r25, r25
     372:	87 fd       	sbrc	r24, 7
     374:	90 95       	com	r25
     376:	2b 81       	ldd	r18, Y+3	; 0x03
     378:	3c 81       	ldd	r19, Y+4	; 0x04
     37a:	82 0f       	add	r24, r18
     37c:	93 1f       	adc	r25, r19
     37e:	fc 01       	movw	r30, r24
     380:	80 81       	ld	r24, Z
     382:	8a 30       	cpi	r24, 0x0A	; 10
     384:	18 f4       	brcc	.+6      	; 0x38c <_Z11writeScreenPh+0xda>
		{
			lcd_putc('0');
     386:	80 e3       	ldi	r24, 0x30	; 48
     388:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z8lcd_putcc>
		}
		snprintf(buffer,sizeof buffer,"%d",time[i]);
     38c:	8a 81       	ldd	r24, Y+2	; 0x02
     38e:	99 27       	eor	r25, r25
     390:	87 fd       	sbrc	r24, 7
     392:	90 95       	com	r25
     394:	2b 81       	ldd	r18, Y+3	; 0x03
     396:	3c 81       	ldd	r19, Y+4	; 0x04
     398:	82 0f       	add	r24, r18
     39a:	93 1f       	adc	r25, r19
     39c:	fc 01       	movw	r30, r24
     39e:	80 81       	ld	r24, Z
     3a0:	88 2f       	mov	r24, r24
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	29 2f       	mov	r18, r25
     3a6:	2f 93       	push	r18
     3a8:	8f 93       	push	r24
     3aa:	87 e9       	ldi	r24, 0x97	; 151
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	89 2f       	mov	r24, r25
     3b0:	8f 93       	push	r24
     3b2:	87 e9       	ldi	r24, 0x97	; 151
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	8f 93       	push	r24
     3b8:	1f 92       	push	r1
     3ba:	81 e1       	ldi	r24, 0x11	; 17
     3bc:	8f 93       	push	r24
     3be:	8a e9       	ldi	r24, 0x9A	; 154
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	89 2f       	mov	r24, r25
     3c4:	8f 93       	push	r24
     3c6:	8a e9       	ldi	r24, 0x9A	; 154
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	8f 93       	push	r24
     3cc:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <snprintf>
     3d0:	8d b7       	in	r24, 0x3d	; 61
     3d2:	9e b7       	in	r25, 0x3e	; 62
     3d4:	08 96       	adiw	r24, 0x08	; 8
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
		lcd_puts(buffer);
     3e0:	8a e9       	ldi	r24, 0x9A	; 154
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_Z8lcd_putsPc>
		if(i<6)
     3e8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ea:	86 30       	cpi	r24, 0x06	; 6
     3ec:	1c f4       	brge	.+6      	; 0x3f4 <_Z11writeScreenPh+0x142>
		{
			lcd_putc(':');
     3ee:	8a e3       	ldi	r24, 0x3A	; 58
     3f0:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z8lcd_putcc>
		{
			lcd_putc(':');	
		}
	}
	lcd_goto(1,0);
	for(int8_t i = 4;i<=6;i++)
     3f4:	8a 81       	ldd	r24, Y+2	; 0x02
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	8a 83       	std	Y+2, r24	; 0x02
     3fa:	8a 81       	ldd	r24, Y+2	; 0x02
     3fc:	87 30       	cpi	r24, 0x07	; 7
     3fe:	0c f4       	brge	.+2      	; 0x402 <_Z11writeScreenPh+0x150>
     400:	b6 cf       	rjmp	.-148    	; 0x36e <_Z11writeScreenPh+0xbc>
		if(i<6)
		{
			lcd_putc(':');
		}
	}
	lcd_goto(0,15);
     402:	6f e0       	ldi	r22, 0x0F	; 15
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_Z8lcd_gotohh>
	if (alarmSet == true){
     40a:	80 91 c1 00 	lds	r24, 0x00C1
     40e:	88 23       	and	r24, r24
     410:	21 f0       	breq	.+8      	; 0x41a <_Z11writeScreenPh+0x168>
		lcd_putc('A');
     412:	81 e4       	ldi	r24, 0x41	; 65
     414:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z8lcd_putcc>
     418:	03 c0       	rjmp	.+6      	; 0x420 <_Z11writeScreenPh+0x16e>
	}
	else
	{
		lcd_putc(' ');
     41a:	80 e2       	ldi	r24, 0x20	; 32
     41c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z8lcd_putcc>
	}	
}
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <_Z10changeTimebPh>:

void changeTime(bool alarm,unsigned char time[])
{
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	cc 54       	subi	r28, 0x4C	; 76
     43e:	d1 09       	sbc	r29, r1
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	f8 94       	cli
     444:	de bf       	out	0x3e, r29	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	cd bf       	out	0x3d, r28	; 61
     44a:	9e 01       	movw	r18, r28
     44c:	26 5b       	subi	r18, 0xB6	; 182
     44e:	3f 4f       	sbci	r19, 0xFF	; 255
     450:	f9 01       	movw	r30, r18
     452:	80 83       	st	Z, r24
     454:	ce 01       	movw	r24, r28
     456:	85 5b       	subi	r24, 0xB5	; 181
     458:	9f 4f       	sbci	r25, 0xFF	; 255
     45a:	fc 01       	movw	r30, r24
     45c:	71 83       	std	Z+1, r23	; 0x01
     45e:	60 83       	st	Z, r22
	uint8_t x = 0, y = 0;
     460:	19 82       	std	Y+1, r1	; 0x01
     462:	1a 82       	std	Y+2, r1	; 0x02
	writeScreen(time);
     464:	ce 01       	movw	r24, r28
     466:	85 5b       	subi	r24, 0xB5	; 181
     468:	9f 4f       	sbci	r25, 0xFF	; 255
     46a:	fc 01       	movw	r30, r24
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z11writeScreenPh>
	t1_Stop_TOI();
     474:	0e 94 22 01 	call	0x244	; 0x244 <_Z11t1_Stop_TOIv>
	lcd_cursor(true,true);
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_Z10lcd_cursorbb>
	lcd_home();
     480:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_Z8lcd_homev>
	if (alarm == false)
     484:	ce 01       	movw	r24, r28
     486:	86 5b       	subi	r24, 0xB6	; 182
     488:	9f 4f       	sbci	r25, 0xFF	; 255
     48a:	fc 01       	movw	r30, r24
     48c:	90 81       	ld	r25, Z
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	89 27       	eor	r24, r25
     492:	88 23       	and	r24, r24
     494:	09 f4       	brne	.+2      	; 0x498 <_Z10changeTimebPh+0x6a>
     496:	82 c0       	rjmp	.+260    	; 0x59c <_Z10changeTimebPh+0x16e>
	{
		while ((PIND & (1<<PD0)) == (1<<PD0)) {}
     498:	00 00       	nop
     49a:	80 e3       	ldi	r24, 0x30	; 48
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	fc 01       	movw	r30, r24
     4a0:	80 81       	ld	r24, Z
     4a2:	88 2f       	mov	r24, r24
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	81 70       	andi	r24, 0x01	; 1
     4a8:	99 27       	eor	r25, r25
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	00 97       	sbiw	r24, 0x00	; 0
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <_Z10changeTimebPh+0x84>
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	22 23       	and	r18, r18
     4b4:	91 f7       	brne	.-28     	; 0x49a <_Z10changeTimebPh+0x6c>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	a8 ec       	ldi	r26, 0xC8	; 200
     4bc:	b1 e4       	ldi	r27, 0x41	; 65
     4be:	8c 83       	std	Y+4, r24	; 0x04
     4c0:	9d 83       	std	Y+5, r25	; 0x05
     4c2:	ae 83       	std	Y+6, r26	; 0x06
     4c4:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	4a e7       	ldi	r20, 0x7A	; 122
     4cc:	54 e4       	ldi	r21, 0x44	; 68
     4ce:	6c 81       	ldd	r22, Y+4	; 0x04
     4d0:	7d 81       	ldd	r23, Y+5	; 0x05
     4d2:	8e 81       	ldd	r24, Y+6	; 0x06
     4d4:	9f 81       	ldd	r25, Y+7	; 0x07
     4d6:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
     4da:	dc 01       	movw	r26, r24
     4dc:	cb 01       	movw	r24, r22
     4de:	88 87       	std	Y+8, r24	; 0x08
     4e0:	99 87       	std	Y+9, r25	; 0x09
     4e2:	aa 87       	std	Y+10, r26	; 0x0a
     4e4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	40 e8       	ldi	r20, 0x80	; 128
     4ec:	5f e3       	ldi	r21, 0x3F	; 63
     4ee:	68 85       	ldd	r22, Y+8	; 0x08
     4f0:	79 85       	ldd	r23, Y+9	; 0x09
     4f2:	8a 85       	ldd	r24, Y+10	; 0x0a
     4f4:	9b 85       	ldd	r25, Y+11	; 0x0b
     4f6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__cmpsf2>
     4fa:	88 23       	and	r24, r24
     4fc:	2c f4       	brge	.+10     	; 0x508 <_Z10changeTimebPh+0xda>
		__ticks = 1;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	9d 87       	std	Y+13, r25	; 0x0d
     504:	8c 87       	std	Y+12, r24	; 0x0c
     506:	3f c0       	rjmp	.+126    	; 0x586 <_Z10changeTimebPh+0x158>
	else if (__tmp > 65535)
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	3f ef       	ldi	r19, 0xFF	; 255
     50c:	4f e7       	ldi	r20, 0x7F	; 127
     50e:	57 e4       	ldi	r21, 0x47	; 71
     510:	68 85       	ldd	r22, Y+8	; 0x08
     512:	79 85       	ldd	r23, Y+9	; 0x09
     514:	8a 85       	ldd	r24, Y+10	; 0x0a
     516:	9b 85       	ldd	r25, Y+11	; 0x0b
     518:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__gesf2>
     51c:	18 16       	cp	r1, r24
     51e:	4c f5       	brge	.+82     	; 0x572 <_Z10changeTimebPh+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	40 e2       	ldi	r20, 0x20	; 32
     526:	51 e4       	ldi	r21, 0x41	; 65
     528:	6c 81       	ldd	r22, Y+4	; 0x04
     52a:	7d 81       	ldd	r23, Y+5	; 0x05
     52c:	8e 81       	ldd	r24, Y+6	; 0x06
     52e:	9f 81       	ldd	r25, Y+7	; 0x07
     530:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
     534:	dc 01       	movw	r26, r24
     536:	cb 01       	movw	r24, r22
     538:	bc 01       	movw	r22, r24
     53a:	cd 01       	movw	r24, r26
     53c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	9d 87       	std	Y+13, r25	; 0x0d
     546:	8c 87       	std	Y+12, r24	; 0x0c
     548:	0f c0       	rjmp	.+30     	; 0x568 <_Z10changeTimebPh+0x13a>
     54a:	84 e6       	ldi	r24, 0x64	; 100
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	9f 87       	std	Y+15, r25	; 0x0f
     550:	8e 87       	std	Y+14, r24	; 0x0e
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     552:	8e 85       	ldd	r24, Y+14	; 0x0e
     554:	9f 85       	ldd	r25, Y+15	; 0x0f
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	f1 f7       	brne	.-4      	; 0x556 <_Z10changeTimebPh+0x128>
     55a:	9f 87       	std	Y+15, r25	; 0x0f
     55c:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     55e:	8c 85       	ldd	r24, Y+12	; 0x0c
     560:	9d 85       	ldd	r25, Y+13	; 0x0d
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	9d 87       	std	Y+13, r25	; 0x0d
     566:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     568:	8c 85       	ldd	r24, Y+12	; 0x0c
     56a:	9d 85       	ldd	r25, Y+13	; 0x0d
     56c:	00 97       	sbiw	r24, 0x00	; 0
     56e:	69 f7       	brne	.-38     	; 0x54a <_Z10changeTimebPh+0x11c>
	else
	{
		while ((PIND & (1<<PD4)) == (1<<PD4)) {}
		_delay_ms(25);
	}
	while ((PIND & (1<<PD0)) != (1<<PD0))						//button 1
     570:	86 c4       	rjmp	.+2316   	; 0xe7e <__stack+0x61f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     572:	68 85       	ldd	r22, Y+8	; 0x08
     574:	79 85       	ldd	r23, Y+9	; 0x09
     576:	8a 85       	ldd	r24, Y+10	; 0x0a
     578:	9b 85       	ldd	r25, Y+11	; 0x0b
     57a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	9d 87       	std	Y+13, r25	; 0x0d
     584:	8c 87       	std	Y+12, r24	; 0x0c
     586:	8c 85       	ldd	r24, Y+12	; 0x0c
     588:	9d 85       	ldd	r25, Y+13	; 0x0d
     58a:	99 8b       	std	Y+17, r25	; 0x11
     58c:	88 8b       	std	Y+16, r24	; 0x10
     58e:	88 89       	ldd	r24, Y+16	; 0x10
     590:	99 89       	ldd	r25, Y+17	; 0x11
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <_Z10changeTimebPh+0x164>
     596:	99 8b       	std	Y+17, r25	; 0x11
     598:	88 8b       	std	Y+16, r24	; 0x10
     59a:	71 c4       	rjmp	.+2274   	; 0xe7e <__stack+0x61f>
		while ((PIND & (1<<PD0)) == (1<<PD0)) {}
		_delay_ms(25);
	}
	else
	{
		while ((PIND & (1<<PD4)) == (1<<PD4)) {}
     59c:	00 00       	nop
     59e:	80 e3       	ldi	r24, 0x30	; 48
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	fc 01       	movw	r30, r24
     5a4:	80 81       	ld	r24, Z
     5a6:	88 2f       	mov	r24, r24
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	80 71       	andi	r24, 0x10	; 16
     5ac:	99 27       	eor	r25, r25
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	00 97       	sbiw	r24, 0x00	; 0
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <_Z10changeTimebPh+0x188>
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	22 23       	and	r18, r18
     5b8:	91 f7       	brne	.-28     	; 0x59e <_Z10changeTimebPh+0x170>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	a8 ec       	ldi	r26, 0xC8	; 200
     5c0:	b1 e4       	ldi	r27, 0x41	; 65
     5c2:	8a 8b       	std	Y+18, r24	; 0x12
     5c4:	9b 8b       	std	Y+19, r25	; 0x13
     5c6:	ac 8b       	std	Y+20, r26	; 0x14
     5c8:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	4a e7       	ldi	r20, 0x7A	; 122
     5d0:	54 e4       	ldi	r21, 0x44	; 68
     5d2:	6a 89       	ldd	r22, Y+18	; 0x12
     5d4:	7b 89       	ldd	r23, Y+19	; 0x13
     5d6:	8c 89       	ldd	r24, Y+20	; 0x14
     5d8:	9d 89       	ldd	r25, Y+21	; 0x15
     5da:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
     5de:	dc 01       	movw	r26, r24
     5e0:	cb 01       	movw	r24, r22
     5e2:	8e 8b       	std	Y+22, r24	; 0x16
     5e4:	9f 8b       	std	Y+23, r25	; 0x17
     5e6:	a8 8f       	std	Y+24, r26	; 0x18
     5e8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	40 e8       	ldi	r20, 0x80	; 128
     5f0:	5f e3       	ldi	r21, 0x3F	; 63
     5f2:	6e 89       	ldd	r22, Y+22	; 0x16
     5f4:	7f 89       	ldd	r23, Y+23	; 0x17
     5f6:	88 8d       	ldd	r24, Y+24	; 0x18
     5f8:	99 8d       	ldd	r25, Y+25	; 0x19
     5fa:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__cmpsf2>
     5fe:	88 23       	and	r24, r24
     600:	2c f4       	brge	.+10     	; 0x60c <_Z10changeTimebPh+0x1de>
		__ticks = 1;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	9b 8f       	std	Y+27, r25	; 0x1b
     608:	8a 8f       	std	Y+26, r24	; 0x1a
     60a:	3f c0       	rjmp	.+126    	; 0x68a <_Z10changeTimebPh+0x25c>
	else if (__tmp > 65535)
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	3f ef       	ldi	r19, 0xFF	; 255
     610:	4f e7       	ldi	r20, 0x7F	; 127
     612:	57 e4       	ldi	r21, 0x47	; 71
     614:	6e 89       	ldd	r22, Y+22	; 0x16
     616:	7f 89       	ldd	r23, Y+23	; 0x17
     618:	88 8d       	ldd	r24, Y+24	; 0x18
     61a:	99 8d       	ldd	r25, Y+25	; 0x19
     61c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__gesf2>
     620:	18 16       	cp	r1, r24
     622:	4c f5       	brge	.+82     	; 0x676 <_Z10changeTimebPh+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	40 e2       	ldi	r20, 0x20	; 32
     62a:	51 e4       	ldi	r21, 0x41	; 65
     62c:	6a 89       	ldd	r22, Y+18	; 0x12
     62e:	7b 89       	ldd	r23, Y+19	; 0x13
     630:	8c 89       	ldd	r24, Y+20	; 0x14
     632:	9d 89       	ldd	r25, Y+21	; 0x15
     634:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
     638:	dc 01       	movw	r26, r24
     63a:	cb 01       	movw	r24, r22
     63c:	bc 01       	movw	r22, r24
     63e:	cd 01       	movw	r24, r26
     640:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	9b 8f       	std	Y+27, r25	; 0x1b
     64a:	8a 8f       	std	Y+26, r24	; 0x1a
     64c:	0f c0       	rjmp	.+30     	; 0x66c <_Z10changeTimebPh+0x23e>
     64e:	84 e6       	ldi	r24, 0x64	; 100
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	9d 8f       	std	Y+29, r25	; 0x1d
     654:	8c 8f       	std	Y+28, r24	; 0x1c
     656:	8c 8d       	ldd	r24, Y+28	; 0x1c
     658:	9d 8d       	ldd	r25, Y+29	; 0x1d
     65a:	01 97       	sbiw	r24, 0x01	; 1
     65c:	f1 f7       	brne	.-4      	; 0x65a <_Z10changeTimebPh+0x22c>
     65e:	9d 8f       	std	Y+29, r25	; 0x1d
     660:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     662:	8a 8d       	ldd	r24, Y+26	; 0x1a
     664:	9b 8d       	ldd	r25, Y+27	; 0x1b
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	9b 8f       	std	Y+27, r25	; 0x1b
     66a:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     66c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     66e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     670:	00 97       	sbiw	r24, 0x00	; 0
     672:	69 f7       	brne	.-38     	; 0x64e <_Z10changeTimebPh+0x220>
		_delay_ms(25);
	}
	while ((PIND & (1<<PD0)) != (1<<PD0))						//button 1
     674:	04 c4       	rjmp	.+2056   	; 0xe7e <__stack+0x61f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     676:	6e 89       	ldd	r22, Y+22	; 0x16
     678:	7f 89       	ldd	r23, Y+23	; 0x17
     67a:	88 8d       	ldd	r24, Y+24	; 0x18
     67c:	99 8d       	ldd	r25, Y+25	; 0x19
     67e:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
     682:	dc 01       	movw	r26, r24
     684:	cb 01       	movw	r24, r22
     686:	9b 8f       	std	Y+27, r25	; 0x1b
     688:	8a 8f       	std	Y+26, r24	; 0x1a
     68a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     68c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     68e:	9f 8f       	std	Y+31, r25	; 0x1f
     690:	8e 8f       	std	Y+30, r24	; 0x1e
     692:	8e 8d       	ldd	r24, Y+30	; 0x1e
     694:	9f 8d       	ldd	r25, Y+31	; 0x1f
     696:	01 97       	sbiw	r24, 0x01	; 1
     698:	f1 f7       	brne	.-4      	; 0x696 <_Z10changeTimebPh+0x268>
     69a:	9f 8f       	std	Y+31, r25	; 0x1f
     69c:	8e 8f       	std	Y+30, r24	; 0x1e
     69e:	ef c3       	rjmp	.+2014   	; 0xe7e <__stack+0x61f>
	{
		if ((PIND & (1<<PD1)) == (1<<PD1))						//button 2
     6a0:	80 e3       	ldi	r24, 0x30	; 48
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	fc 01       	movw	r30, r24
     6a6:	80 81       	ld	r24, Z
     6a8:	88 2f       	mov	r24, r24
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	82 70       	andi	r24, 0x02	; 2
     6ae:	99 27       	eor	r25, r25
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	00 97       	sbiw	r24, 0x00	; 0
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <_Z10changeTimebPh+0x28a>
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	22 23       	and	r18, r18
     6ba:	09 f4       	brne	.+2      	; 0x6be <_Z10changeTimebPh+0x290>
     6bc:	9d c0       	rjmp	.+314    	; 0x7f8 <_Z10changeTimebPh+0x3ca>
		{
			if (x == 7)
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	87 30       	cpi	r24, 0x07	; 7
     6c2:	41 f4       	brne	.+16     	; 0x6d4 <_Z10changeTimebPh+0x2a6>
			{
				x = 0;
     6c4:	19 82       	std	Y+1, r1	; 0x01
				y = 1 - y;
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ca:	f9 2f       	mov	r31, r25
     6cc:	f8 1b       	sub	r31, r24
     6ce:	8f 2f       	mov	r24, r31
     6d0:	8a 83       	std	Y+2, r24	; 0x02
     6d2:	0c c0       	rjmp	.+24     	; 0x6ec <_Z10changeTimebPh+0x2be>
			}
			else
			{
				if (x == 1 || x == 4)
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	19 f0       	breq	.+6      	; 0x6e0 <_Z10changeTimebPh+0x2b2>
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	84 30       	cpi	r24, 0x04	; 4
     6de:	19 f4       	brne	.+6      	; 0x6e6 <_Z10changeTimebPh+0x2b8>
				{
					x++;	
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	8f 5f       	subi	r24, 0xFF	; 255
     6e4:	89 83       	std	Y+1, r24	; 0x01
				}
				x++;
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	8f 5f       	subi	r24, 0xFF	; 255
     6ea:	89 83       	std	Y+1, r24	; 0x01
			}
			lcd_goto(y,x);
     6ec:	69 81       	ldd	r22, Y+1	; 0x01
     6ee:	8a 81       	ldd	r24, Y+2	; 0x02
     6f0:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_Z8lcd_gotohh>
			while((PIND & (1<<PD1)) == 2) {}
     6f4:	00 00       	nop
     6f6:	80 e3       	ldi	r24, 0x30	; 48
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	fc 01       	movw	r30, r24
     6fc:	80 81       	ld	r24, Z
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	82 70       	andi	r24, 0x02	; 2
     704:	99 27       	eor	r25, r25
     706:	21 e0       	ldi	r18, 0x01	; 1
     708:	00 97       	sbiw	r24, 0x00	; 0
     70a:	09 f4       	brne	.+2      	; 0x70e <_Z10changeTimebPh+0x2e0>
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	22 23       	and	r18, r18
     710:	91 f7       	brne	.-28     	; 0x6f6 <_Z10changeTimebPh+0x2c8>
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	a8 ec       	ldi	r26, 0xC8	; 200
     718:	b1 e4       	ldi	r27, 0x41	; 65
     71a:	88 a3       	std	Y+32, r24	; 0x20
     71c:	99 a3       	std	Y+33, r25	; 0x21
     71e:	aa a3       	std	Y+34, r26	; 0x22
     720:	bb a3       	std	Y+35, r27	; 0x23

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	4a e7       	ldi	r20, 0x7A	; 122
     728:	54 e4       	ldi	r21, 0x44	; 68
     72a:	68 a1       	ldd	r22, Y+32	; 0x20
     72c:	79 a1       	ldd	r23, Y+33	; 0x21
     72e:	8a a1       	ldd	r24, Y+34	; 0x22
     730:	9b a1       	ldd	r25, Y+35	; 0x23
     732:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
     736:	dc 01       	movw	r26, r24
     738:	cb 01       	movw	r24, r22
     73a:	8c a3       	std	Y+36, r24	; 0x24
     73c:	9d a3       	std	Y+37, r25	; 0x25
     73e:	ae a3       	std	Y+38, r26	; 0x26
     740:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	40 e8       	ldi	r20, 0x80	; 128
     748:	5f e3       	ldi	r21, 0x3F	; 63
     74a:	6c a1       	ldd	r22, Y+36	; 0x24
     74c:	7d a1       	ldd	r23, Y+37	; 0x25
     74e:	8e a1       	ldd	r24, Y+38	; 0x26
     750:	9f a1       	ldd	r25, Y+39	; 0x27
     752:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__cmpsf2>
     756:	88 23       	and	r24, r24
     758:	2c f4       	brge	.+10     	; 0x764 <_Z10changeTimebPh+0x336>
		__ticks = 1;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	99 a7       	std	Y+41, r25	; 0x29
     760:	88 a7       	std	Y+40, r24	; 0x28
     762:	3f c0       	rjmp	.+126    	; 0x7e2 <_Z10changeTimebPh+0x3b4>
	else if (__tmp > 65535)
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	3f ef       	ldi	r19, 0xFF	; 255
     768:	4f e7       	ldi	r20, 0x7F	; 127
     76a:	57 e4       	ldi	r21, 0x47	; 71
     76c:	6c a1       	ldd	r22, Y+36	; 0x24
     76e:	7d a1       	ldd	r23, Y+37	; 0x25
     770:	8e a1       	ldd	r24, Y+38	; 0x26
     772:	9f a1       	ldd	r25, Y+39	; 0x27
     774:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__gesf2>
     778:	18 16       	cp	r1, r24
     77a:	4c f5       	brge	.+82     	; 0x7ce <_Z10changeTimebPh+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	40 e2       	ldi	r20, 0x20	; 32
     782:	51 e4       	ldi	r21, 0x41	; 65
     784:	68 a1       	ldd	r22, Y+32	; 0x20
     786:	79 a1       	ldd	r23, Y+33	; 0x21
     788:	8a a1       	ldd	r24, Y+34	; 0x22
     78a:	9b a1       	ldd	r25, Y+35	; 0x23
     78c:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
     790:	dc 01       	movw	r26, r24
     792:	cb 01       	movw	r24, r22
     794:	bc 01       	movw	r22, r24
     796:	cd 01       	movw	r24, r26
     798:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
     79c:	dc 01       	movw	r26, r24
     79e:	cb 01       	movw	r24, r22
     7a0:	99 a7       	std	Y+41, r25	; 0x29
     7a2:	88 a7       	std	Y+40, r24	; 0x28
     7a4:	0f c0       	rjmp	.+30     	; 0x7c4 <_Z10changeTimebPh+0x396>
     7a6:	84 e6       	ldi	r24, 0x64	; 100
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	9b a7       	std	Y+43, r25	; 0x2b
     7ac:	8a a7       	std	Y+42, r24	; 0x2a
     7ae:	8a a5       	ldd	r24, Y+42	; 0x2a
     7b0:	9b a5       	ldd	r25, Y+43	; 0x2b
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <_Z10changeTimebPh+0x384>
     7b6:	9b a7       	std	Y+43, r25	; 0x2b
     7b8:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ba:	88 a5       	ldd	r24, Y+40	; 0x28
     7bc:	99 a5       	ldd	r25, Y+41	; 0x29
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	99 a7       	std	Y+41, r25	; 0x29
     7c2:	88 a7       	std	Y+40, r24	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7c4:	88 a5       	ldd	r24, Y+40	; 0x28
     7c6:	99 a5       	ldd	r25, Y+41	; 0x29
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	69 f7       	brne	.-38     	; 0x7a6 <_Z10changeTimebPh+0x378>
     7cc:	58 c3       	rjmp	.+1712   	; 0xe7e <__stack+0x61f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ce:	6c a1       	ldd	r22, Y+36	; 0x24
     7d0:	7d a1       	ldd	r23, Y+37	; 0x25
     7d2:	8e a1       	ldd	r24, Y+38	; 0x26
     7d4:	9f a1       	ldd	r25, Y+39	; 0x27
     7d6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	99 a7       	std	Y+41, r25	; 0x29
     7e0:	88 a7       	std	Y+40, r24	; 0x28
     7e2:	88 a5       	ldd	r24, Y+40	; 0x28
     7e4:	99 a5       	ldd	r25, Y+41	; 0x29
     7e6:	9d a7       	std	Y+45, r25	; 0x2d
     7e8:	8c a7       	std	Y+44, r24	; 0x2c
     7ea:	8c a5       	ldd	r24, Y+44	; 0x2c
     7ec:	9d a5       	ldd	r25, Y+45	; 0x2d
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <_Z10changeTimebPh+0x3c0>
     7f2:	9d a7       	std	Y+45, r25	; 0x2d
     7f4:	8c a7       	std	Y+44, r24	; 0x2c
     7f6:	43 c3       	rjmp	.+1670   	; 0xe7e <__stack+0x61f>
			_delay_ms(25);
		}
		else if ((PIND & (1<<PD2)) == (1<<PD2))				//button 3	UP
     7f8:	80 e3       	ldi	r24, 0x30	; 48
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	fc 01       	movw	r30, r24
     7fe:	80 81       	ld	r24, Z
     800:	88 2f       	mov	r24, r24
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	84 70       	andi	r24, 0x04	; 4
     806:	99 27       	eor	r25, r25
     808:	21 e0       	ldi	r18, 0x01	; 1
     80a:	00 97       	sbiw	r24, 0x00	; 0
     80c:	09 f4       	brne	.+2      	; 0x810 <_Z10changeTimebPh+0x3e2>
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	22 23       	and	r18, r18
     812:	09 f4       	brne	.+2      	; 0x816 <_Z10changeTimebPh+0x3e8>
     814:	71 c1       	rjmp	.+738    	; 0xaf8 <__stack+0x299>
		{
			if (x == 0 || x == 3 || x == 6)
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	88 23       	and	r24, r24
     81a:	31 f0       	breq	.+12     	; 0x828 <_Z10changeTimebPh+0x3fa>
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	83 30       	cpi	r24, 0x03	; 3
     820:	19 f0       	breq	.+6      	; 0x828 <_Z10changeTimebPh+0x3fa>
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	86 30       	cpi	r24, 0x06	; 6
     826:	79 f5       	brne	.+94     	; 0x886 <__stack+0x27>
			{
				time[index[lcd_get_row()][lcd_get_column()]] += 10;
     828:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_Z11lcd_get_rowv>
     82c:	08 2f       	mov	r16, r24
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z14lcd_get_columnv>
     834:	88 2f       	mov	r24, r24
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	98 01       	movw	r18, r16
     83a:	22 95       	swap	r18
     83c:	32 95       	swap	r19
     83e:	30 7f       	andi	r19, 0xF0	; 240
     840:	32 27       	eor	r19, r18
     842:	20 7f       	andi	r18, 0xF0	; 240
     844:	32 27       	eor	r19, r18
     846:	82 0f       	add	r24, r18
     848:	93 1f       	adc	r25, r19
     84a:	80 5a       	subi	r24, 0xA0	; 160
     84c:	9f 4f       	sbci	r25, 0xFF	; 255
     84e:	fc 01       	movw	r30, r24
     850:	40 81       	ld	r20, Z
     852:	84 2f       	mov	r24, r20
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	9e 01       	movw	r18, r28
     858:	25 5b       	subi	r18, 0xB5	; 181
     85a:	3f 4f       	sbci	r19, 0xFF	; 255
     85c:	f9 01       	movw	r30, r18
     85e:	20 81       	ld	r18, Z
     860:	31 81       	ldd	r19, Z+1	; 0x01
     862:	82 0f       	add	r24, r18
     864:	93 1f       	adc	r25, r19
     866:	24 2f       	mov	r18, r20
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	ae 01       	movw	r20, r28
     86c:	45 5b       	subi	r20, 0xB5	; 181
     86e:	5f 4f       	sbci	r21, 0xFF	; 255
     870:	fa 01       	movw	r30, r20
     872:	40 81       	ld	r20, Z
     874:	51 81       	ldd	r21, Z+1	; 0x01
     876:	24 0f       	add	r18, r20
     878:	35 1f       	adc	r19, r21
     87a:	f9 01       	movw	r30, r18
     87c:	20 81       	ld	r18, Z
     87e:	26 5f       	subi	r18, 0xF6	; 246
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
     884:	24 c0       	rjmp	.+72     	; 0x8ce <__stack+0x6f>
			}
			else
			{
				time[index[lcd_get_row()][lcd_get_column()]] ++;
     886:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_Z11lcd_get_rowv>
     88a:	08 2f       	mov	r16, r24
     88c:	10 e0       	ldi	r17, 0x00	; 0
     88e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z14lcd_get_columnv>
     892:	88 2f       	mov	r24, r24
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	98 01       	movw	r18, r16
     898:	22 95       	swap	r18
     89a:	32 95       	swap	r19
     89c:	30 7f       	andi	r19, 0xF0	; 240
     89e:	32 27       	eor	r19, r18
     8a0:	20 7f       	andi	r18, 0xF0	; 240
     8a2:	32 27       	eor	r19, r18
     8a4:	82 0f       	add	r24, r18
     8a6:	93 1f       	adc	r25, r19
     8a8:	80 5a       	subi	r24, 0xA0	; 160
     8aa:	9f 4f       	sbci	r25, 0xFF	; 255
     8ac:	fc 01       	movw	r30, r24
     8ae:	80 81       	ld	r24, Z
     8b0:	88 2f       	mov	r24, r24
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	9e 01       	movw	r18, r28
     8b6:	25 5b       	subi	r18, 0xB5	; 181
     8b8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ba:	f9 01       	movw	r30, r18
     8bc:	20 81       	ld	r18, Z
     8be:	31 81       	ldd	r19, Z+1	; 0x01
     8c0:	82 0f       	add	r24, r18
     8c2:	93 1f       	adc	r25, r19
     8c4:	fc 01       	movw	r30, r24
     8c6:	20 81       	ld	r18, Z
     8c8:	2f 5f       	subi	r18, 0xFF	; 255
     8ca:	fc 01       	movw	r30, r24
     8cc:	20 83       	st	Z, r18
			}
			if (time[index[lcd_get_row()][lcd_get_column()]] >= MaxVal[lcd_get_row()][lcd_get_column()])
     8ce:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_Z11lcd_get_rowv>
     8d2:	08 2f       	mov	r16, r24
     8d4:	10 e0       	ldi	r17, 0x00	; 0
     8d6:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z14lcd_get_columnv>
     8da:	88 2f       	mov	r24, r24
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	98 01       	movw	r18, r16
     8e0:	22 95       	swap	r18
     8e2:	32 95       	swap	r19
     8e4:	30 7f       	andi	r19, 0xF0	; 240
     8e6:	32 27       	eor	r19, r18
     8e8:	20 7f       	andi	r18, 0xF0	; 240
     8ea:	32 27       	eor	r19, r18
     8ec:	82 0f       	add	r24, r18
     8ee:	93 1f       	adc	r25, r19
     8f0:	80 5a       	subi	r24, 0xA0	; 160
     8f2:	9f 4f       	sbci	r25, 0xFF	; 255
     8f4:	fc 01       	movw	r30, r24
     8f6:	80 81       	ld	r24, Z
     8f8:	88 2f       	mov	r24, r24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	9e 01       	movw	r18, r28
     8fe:	25 5b       	subi	r18, 0xB5	; 181
     900:	3f 4f       	sbci	r19, 0xFF	; 255
     902:	f9 01       	movw	r30, r18
     904:	20 81       	ld	r18, Z
     906:	31 81       	ldd	r19, Z+1	; 0x01
     908:	82 0f       	add	r24, r18
     90a:	93 1f       	adc	r25, r19
     90c:	fc 01       	movw	r30, r24
     90e:	f0 80       	ld	r15, Z
     910:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_Z11lcd_get_rowv>
     914:	08 2f       	mov	r16, r24
     916:	10 e0       	ldi	r17, 0x00	; 0
     918:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z14lcd_get_columnv>
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	98 01       	movw	r18, r16
     922:	22 0f       	add	r18, r18
     924:	33 1f       	adc	r19, r19
     926:	22 0f       	add	r18, r18
     928:	33 1f       	adc	r19, r19
     92a:	22 0f       	add	r18, r18
     92c:	33 1f       	adc	r19, r19
     92e:	82 0f       	add	r24, r18
     930:	93 1f       	adc	r25, r19
     932:	80 58       	subi	r24, 0x80	; 128
     934:	9f 4f       	sbci	r25, 0xFF	; 255
     936:	fc 01       	movw	r30, r24
     938:	90 81       	ld	r25, Z
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	f9 16       	cp	r15, r25
     93e:	08 f4       	brcc	.+2      	; 0x942 <__stack+0xe3>
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	88 23       	and	r24, r24
     944:	09 f4       	brne	.+2      	; 0x948 <__stack+0xe9>
     946:	4a c0       	rjmp	.+148    	; 0x9dc <__stack+0x17d>
			{
				time[index[lcd_get_row()][lcd_get_column()]] -= MaxVal[lcd_get_row()][lcd_get_column()];
     948:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_Z11lcd_get_rowv>
     94c:	08 2f       	mov	r16, r24
     94e:	10 e0       	ldi	r17, 0x00	; 0
     950:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z14lcd_get_columnv>
     954:	88 2f       	mov	r24, r24
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	98 01       	movw	r18, r16
     95a:	22 0f       	add	r18, r18
     95c:	33 1f       	adc	r19, r19
     95e:	22 0f       	add	r18, r18
     960:	33 1f       	adc	r19, r19
     962:	22 0f       	add	r18, r18
     964:	33 1f       	adc	r19, r19
     966:	82 0f       	add	r24, r18
     968:	93 1f       	adc	r25, r19
     96a:	80 58       	subi	r24, 0x80	; 128
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	fc 01       	movw	r30, r24
     970:	f0 80       	ld	r15, Z
     972:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_Z11lcd_get_rowv>
     976:	08 2f       	mov	r16, r24
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z14lcd_get_columnv>
     97e:	88 2f       	mov	r24, r24
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	98 01       	movw	r18, r16
     984:	22 95       	swap	r18
     986:	32 95       	swap	r19
     988:	30 7f       	andi	r19, 0xF0	; 240
     98a:	32 27       	eor	r19, r18
     98c:	20 7f       	andi	r18, 0xF0	; 240
     98e:	32 27       	eor	r19, r18
     990:	82 0f       	add	r24, r18
     992:	93 1f       	adc	r25, r19
     994:	80 5a       	subi	r24, 0xA0	; 160
     996:	9f 4f       	sbci	r25, 0xFF	; 255
     998:	fc 01       	movw	r30, r24
     99a:	40 81       	ld	r20, Z
     99c:	84 2f       	mov	r24, r20
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	9e 01       	movw	r18, r28
     9a2:	25 5b       	subi	r18, 0xB5	; 181
     9a4:	3f 4f       	sbci	r19, 0xFF	; 255
     9a6:	f9 01       	movw	r30, r18
     9a8:	20 81       	ld	r18, Z
     9aa:	31 81       	ldd	r19, Z+1	; 0x01
     9ac:	82 0f       	add	r24, r18
     9ae:	93 1f       	adc	r25, r19
     9b0:	24 2f       	mov	r18, r20
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	ae 01       	movw	r20, r28
     9b6:	45 5b       	subi	r20, 0xB5	; 181
     9b8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ba:	fa 01       	movw	r30, r20
     9bc:	40 81       	ld	r20, Z
     9be:	51 81       	ldd	r21, Z+1	; 0x01
     9c0:	24 0f       	add	r18, r20
     9c2:	35 1f       	adc	r19, r21
     9c4:	f9 01       	movw	r30, r18
     9c6:	20 81       	ld	r18, Z
     9c8:	42 2f       	mov	r20, r18
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	2f 2d       	mov	r18, r15
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	ba 01       	movw	r22, r20
     9d2:	62 1b       	sub	r22, r18
     9d4:	73 0b       	sbc	r23, r19
     9d6:	9b 01       	movw	r18, r22
     9d8:	fc 01       	movw	r30, r24
     9da:	20 83       	st	Z, r18
			}
			writeScreen(time);
     9dc:	ce 01       	movw	r24, r28
     9de:	85 5b       	subi	r24, 0xB5	; 181
     9e0:	9f 4f       	sbci	r25, 0xFF	; 255
     9e2:	fc 01       	movw	r30, r24
     9e4:	80 81       	ld	r24, Z
     9e6:	91 81       	ldd	r25, Z+1	; 0x01
     9e8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z11writeScreenPh>
			lcd_goto(y,x);
     9ec:	69 81       	ldd	r22, Y+1	; 0x01
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_Z8lcd_gotohh>
			while ((PIND & (1<<PD2)) == 4) {}
     9f4:	00 00       	nop
     9f6:	80 e3       	ldi	r24, 0x30	; 48
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	fc 01       	movw	r30, r24
     9fc:	80 81       	ld	r24, Z
     9fe:	88 2f       	mov	r24, r24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	84 70       	andi	r24, 0x04	; 4
     a04:	99 27       	eor	r25, r25
     a06:	21 e0       	ldi	r18, 0x01	; 1
     a08:	00 97       	sbiw	r24, 0x00	; 0
     a0a:	09 f4       	brne	.+2      	; 0xa0e <__stack+0x1af>
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	22 23       	and	r18, r18
     a10:	91 f7       	brne	.-28     	; 0x9f6 <__stack+0x197>
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	a8 ec       	ldi	r26, 0xC8	; 200
     a18:	b1 e4       	ldi	r27, 0x41	; 65
     a1a:	8e a7       	std	Y+46, r24	; 0x2e
     a1c:	9f a7       	std	Y+47, r25	; 0x2f
     a1e:	a8 ab       	std	Y+48, r26	; 0x30
     a20:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	4a e7       	ldi	r20, 0x7A	; 122
     a28:	54 e4       	ldi	r21, 0x44	; 68
     a2a:	6e a5       	ldd	r22, Y+46	; 0x2e
     a2c:	7f a5       	ldd	r23, Y+47	; 0x2f
     a2e:	88 a9       	ldd	r24, Y+48	; 0x30
     a30:	99 a9       	ldd	r25, Y+49	; 0x31
     a32:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
     a36:	dc 01       	movw	r26, r24
     a38:	cb 01       	movw	r24, r22
     a3a:	8a ab       	std	Y+50, r24	; 0x32
     a3c:	9b ab       	std	Y+51, r25	; 0x33
     a3e:	ac ab       	std	Y+52, r26	; 0x34
     a40:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 e8       	ldi	r20, 0x80	; 128
     a48:	5f e3       	ldi	r21, 0x3F	; 63
     a4a:	6a a9       	ldd	r22, Y+50	; 0x32
     a4c:	7b a9       	ldd	r23, Y+51	; 0x33
     a4e:	8c a9       	ldd	r24, Y+52	; 0x34
     a50:	9d a9       	ldd	r25, Y+53	; 0x35
     a52:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__cmpsf2>
     a56:	88 23       	and	r24, r24
     a58:	2c f4       	brge	.+10     	; 0xa64 <__stack+0x205>
		__ticks = 1;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	9f ab       	std	Y+55, r25	; 0x37
     a60:	8e ab       	std	Y+54, r24	; 0x36
     a62:	3f c0       	rjmp	.+126    	; 0xae2 <__stack+0x283>
	else if (__tmp > 65535)
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	3f ef       	ldi	r19, 0xFF	; 255
     a68:	4f e7       	ldi	r20, 0x7F	; 127
     a6a:	57 e4       	ldi	r21, 0x47	; 71
     a6c:	6a a9       	ldd	r22, Y+50	; 0x32
     a6e:	7b a9       	ldd	r23, Y+51	; 0x33
     a70:	8c a9       	ldd	r24, Y+52	; 0x34
     a72:	9d a9       	ldd	r25, Y+53	; 0x35
     a74:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__gesf2>
     a78:	18 16       	cp	r1, r24
     a7a:	4c f5       	brge	.+82     	; 0xace <__stack+0x26f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	40 e2       	ldi	r20, 0x20	; 32
     a82:	51 e4       	ldi	r21, 0x41	; 65
     a84:	6e a5       	ldd	r22, Y+46	; 0x2e
     a86:	7f a5       	ldd	r23, Y+47	; 0x2f
     a88:	88 a9       	ldd	r24, Y+48	; 0x30
     a8a:	99 a9       	ldd	r25, Y+49	; 0x31
     a8c:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
     a90:	dc 01       	movw	r26, r24
     a92:	cb 01       	movw	r24, r22
     a94:	bc 01       	movw	r22, r24
     a96:	cd 01       	movw	r24, r26
     a98:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	9f ab       	std	Y+55, r25	; 0x37
     aa2:	8e ab       	std	Y+54, r24	; 0x36
     aa4:	0f c0       	rjmp	.+30     	; 0xac4 <__stack+0x265>
     aa6:	84 e6       	ldi	r24, 0x64	; 100
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	99 af       	std	Y+57, r25	; 0x39
     aac:	88 af       	std	Y+56, r24	; 0x38
     aae:	88 ad       	ldd	r24, Y+56	; 0x38
     ab0:	99 ad       	ldd	r25, Y+57	; 0x39
     ab2:	01 97       	sbiw	r24, 0x01	; 1
     ab4:	f1 f7       	brne	.-4      	; 0xab2 <__stack+0x253>
     ab6:	99 af       	std	Y+57, r25	; 0x39
     ab8:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aba:	8e a9       	ldd	r24, Y+54	; 0x36
     abc:	9f a9       	ldd	r25, Y+55	; 0x37
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	9f ab       	std	Y+55, r25	; 0x37
     ac2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac4:	8e a9       	ldd	r24, Y+54	; 0x36
     ac6:	9f a9       	ldd	r25, Y+55	; 0x37
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	69 f7       	brne	.-38     	; 0xaa6 <__stack+0x247>
     acc:	d8 c1       	rjmp	.+944    	; 0xe7e <__stack+0x61f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ace:	6a a9       	ldd	r22, Y+50	; 0x32
     ad0:	7b a9       	ldd	r23, Y+51	; 0x33
     ad2:	8c a9       	ldd	r24, Y+52	; 0x34
     ad4:	9d a9       	ldd	r25, Y+53	; 0x35
     ad6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
     ada:	dc 01       	movw	r26, r24
     adc:	cb 01       	movw	r24, r22
     ade:	9f ab       	std	Y+55, r25	; 0x37
     ae0:	8e ab       	std	Y+54, r24	; 0x36
     ae2:	8e a9       	ldd	r24, Y+54	; 0x36
     ae4:	9f a9       	ldd	r25, Y+55	; 0x37
     ae6:	9b af       	std	Y+59, r25	; 0x3b
     ae8:	8a af       	std	Y+58, r24	; 0x3a
     aea:	8a ad       	ldd	r24, Y+58	; 0x3a
     aec:	9b ad       	ldd	r25, Y+59	; 0x3b
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	f1 f7       	brne	.-4      	; 0xaee <__stack+0x28f>
     af2:	9b af       	std	Y+59, r25	; 0x3b
     af4:	8a af       	std	Y+58, r24	; 0x3a
     af6:	c3 c1       	rjmp	.+902    	; 0xe7e <__stack+0x61f>
			_delay_ms(25);
		}
		else if ((PIND & (1<<PD3)) == (1<<PD3))				//button 4	Down
     af8:	80 e3       	ldi	r24, 0x30	; 48
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	fc 01       	movw	r30, r24
     afe:	80 81       	ld	r24, Z
     b00:	88 2f       	mov	r24, r24
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	88 70       	andi	r24, 0x08	; 8
     b06:	99 27       	eor	r25, r25
     b08:	21 e0       	ldi	r18, 0x01	; 1
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	09 f4       	brne	.+2      	; 0xb10 <__stack+0x2b1>
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	22 23       	and	r18, r18
     b12:	09 f4       	brne	.+2      	; 0xb16 <__stack+0x2b7>
     b14:	b4 c1       	rjmp	.+872    	; 0xe7e <__stack+0x61f>
		{
			if (x == 0 || x == 3 || x == 6){
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	88 23       	and	r24, r24
     b1a:	31 f0       	breq	.+12     	; 0xb28 <__stack+0x2c9>
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	83 30       	cpi	r24, 0x03	; 3
     b20:	19 f0       	breq	.+6      	; 0xb28 <__stack+0x2c9>
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	86 30       	cpi	r24, 0x06	; 6
     b26:	79 f5       	brne	.+94     	; 0xb86 <__stack+0x327>
				time[index[lcd_get_row()][lcd_get_column()]] -= 10;
     b28:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_Z11lcd_get_rowv>
     b2c:	08 2f       	mov	r16, r24
     b2e:	10 e0       	ldi	r17, 0x00	; 0
     b30:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z14lcd_get_columnv>
     b34:	88 2f       	mov	r24, r24
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	98 01       	movw	r18, r16
     b3a:	22 95       	swap	r18
     b3c:	32 95       	swap	r19
     b3e:	30 7f       	andi	r19, 0xF0	; 240
     b40:	32 27       	eor	r19, r18
     b42:	20 7f       	andi	r18, 0xF0	; 240
     b44:	32 27       	eor	r19, r18
     b46:	82 0f       	add	r24, r18
     b48:	93 1f       	adc	r25, r19
     b4a:	80 5a       	subi	r24, 0xA0	; 160
     b4c:	9f 4f       	sbci	r25, 0xFF	; 255
     b4e:	fc 01       	movw	r30, r24
     b50:	40 81       	ld	r20, Z
     b52:	84 2f       	mov	r24, r20
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	9e 01       	movw	r18, r28
     b58:	25 5b       	subi	r18, 0xB5	; 181
     b5a:	3f 4f       	sbci	r19, 0xFF	; 255
     b5c:	f9 01       	movw	r30, r18
     b5e:	20 81       	ld	r18, Z
     b60:	31 81       	ldd	r19, Z+1	; 0x01
     b62:	82 0f       	add	r24, r18
     b64:	93 1f       	adc	r25, r19
     b66:	24 2f       	mov	r18, r20
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	ae 01       	movw	r20, r28
     b6c:	45 5b       	subi	r20, 0xB5	; 181
     b6e:	5f 4f       	sbci	r21, 0xFF	; 255
     b70:	fa 01       	movw	r30, r20
     b72:	40 81       	ld	r20, Z
     b74:	51 81       	ldd	r21, Z+1	; 0x01
     b76:	24 0f       	add	r18, r20
     b78:	35 1f       	adc	r19, r21
     b7a:	f9 01       	movw	r30, r18
     b7c:	20 81       	ld	r18, Z
     b7e:	2a 50       	subi	r18, 0x0A	; 10
     b80:	fc 01       	movw	r30, r24
     b82:	20 83       	st	Z, r18
     b84:	24 c0       	rjmp	.+72     	; 0xbce <__stack+0x36f>
			}
			else
			{
				time[index[lcd_get_row()][lcd_get_column()]] --;
     b86:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_Z11lcd_get_rowv>
     b8a:	08 2f       	mov	r16, r24
     b8c:	10 e0       	ldi	r17, 0x00	; 0
     b8e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z14lcd_get_columnv>
     b92:	88 2f       	mov	r24, r24
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	98 01       	movw	r18, r16
     b98:	22 95       	swap	r18
     b9a:	32 95       	swap	r19
     b9c:	30 7f       	andi	r19, 0xF0	; 240
     b9e:	32 27       	eor	r19, r18
     ba0:	20 7f       	andi	r18, 0xF0	; 240
     ba2:	32 27       	eor	r19, r18
     ba4:	82 0f       	add	r24, r18
     ba6:	93 1f       	adc	r25, r19
     ba8:	80 5a       	subi	r24, 0xA0	; 160
     baa:	9f 4f       	sbci	r25, 0xFF	; 255
     bac:	fc 01       	movw	r30, r24
     bae:	80 81       	ld	r24, Z
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	9e 01       	movw	r18, r28
     bb6:	25 5b       	subi	r18, 0xB5	; 181
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	f9 01       	movw	r30, r18
     bbc:	20 81       	ld	r18, Z
     bbe:	31 81       	ldd	r19, Z+1	; 0x01
     bc0:	82 0f       	add	r24, r18
     bc2:	93 1f       	adc	r25, r19
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 81       	ld	r18, Z
     bc8:	21 50       	subi	r18, 0x01	; 1
     bca:	fc 01       	movw	r30, r24
     bcc:	20 83       	st	Z, r18
			}
			if (time[index[lcd_get_row()][lcd_get_column()]] >= MaxVal[lcd_get_row()][lcd_get_column()])
     bce:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_Z11lcd_get_rowv>
     bd2:	08 2f       	mov	r16, r24
     bd4:	10 e0       	ldi	r17, 0x00	; 0
     bd6:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z14lcd_get_columnv>
     bda:	88 2f       	mov	r24, r24
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	98 01       	movw	r18, r16
     be0:	22 95       	swap	r18
     be2:	32 95       	swap	r19
     be4:	30 7f       	andi	r19, 0xF0	; 240
     be6:	32 27       	eor	r19, r18
     be8:	20 7f       	andi	r18, 0xF0	; 240
     bea:	32 27       	eor	r19, r18
     bec:	82 0f       	add	r24, r18
     bee:	93 1f       	adc	r25, r19
     bf0:	80 5a       	subi	r24, 0xA0	; 160
     bf2:	9f 4f       	sbci	r25, 0xFF	; 255
     bf4:	fc 01       	movw	r30, r24
     bf6:	80 81       	ld	r24, Z
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9e 01       	movw	r18, r28
     bfe:	25 5b       	subi	r18, 0xB5	; 181
     c00:	3f 4f       	sbci	r19, 0xFF	; 255
     c02:	f9 01       	movw	r30, r18
     c04:	20 81       	ld	r18, Z
     c06:	31 81       	ldd	r19, Z+1	; 0x01
     c08:	82 0f       	add	r24, r18
     c0a:	93 1f       	adc	r25, r19
     c0c:	fc 01       	movw	r30, r24
     c0e:	f0 80       	ld	r15, Z
     c10:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_Z11lcd_get_rowv>
     c14:	08 2f       	mov	r16, r24
     c16:	10 e0       	ldi	r17, 0x00	; 0
     c18:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z14lcd_get_columnv>
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	98 01       	movw	r18, r16
     c22:	22 0f       	add	r18, r18
     c24:	33 1f       	adc	r19, r19
     c26:	22 0f       	add	r18, r18
     c28:	33 1f       	adc	r19, r19
     c2a:	22 0f       	add	r18, r18
     c2c:	33 1f       	adc	r19, r19
     c2e:	82 0f       	add	r24, r18
     c30:	93 1f       	adc	r25, r19
     c32:	80 58       	subi	r24, 0x80	; 128
     c34:	9f 4f       	sbci	r25, 0xFF	; 255
     c36:	fc 01       	movw	r30, r24
     c38:	90 81       	ld	r25, Z
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	f9 16       	cp	r15, r25
     c3e:	08 f4       	brcc	.+2      	; 0xc42 <__stack+0x3e3>
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	88 23       	and	r24, r24
     c44:	09 f4       	brne	.+2      	; 0xc48 <__stack+0x3e9>
     c46:	48 c0       	rjmp	.+144    	; 0xcd8 <__stack+0x479>
			{
				time[index[lcd_get_row()][lcd_get_column()]] += MaxVal[lcd_get_row()][lcd_get_column()];
     c48:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_Z11lcd_get_rowv>
     c4c:	08 2f       	mov	r16, r24
     c4e:	10 e0       	ldi	r17, 0x00	; 0
     c50:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z14lcd_get_columnv>
     c54:	88 2f       	mov	r24, r24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	98 01       	movw	r18, r16
     c5a:	22 0f       	add	r18, r18
     c5c:	33 1f       	adc	r19, r19
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	22 0f       	add	r18, r18
     c64:	33 1f       	adc	r19, r19
     c66:	82 0f       	add	r24, r18
     c68:	93 1f       	adc	r25, r19
     c6a:	80 58       	subi	r24, 0x80	; 128
     c6c:	9f 4f       	sbci	r25, 0xFF	; 255
     c6e:	fc 01       	movw	r30, r24
     c70:	f0 80       	ld	r15, Z
     c72:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_Z11lcd_get_rowv>
     c76:	08 2f       	mov	r16, r24
     c78:	10 e0       	ldi	r17, 0x00	; 0
     c7a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z14lcd_get_columnv>
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	98 01       	movw	r18, r16
     c84:	22 95       	swap	r18
     c86:	32 95       	swap	r19
     c88:	30 7f       	andi	r19, 0xF0	; 240
     c8a:	32 27       	eor	r19, r18
     c8c:	20 7f       	andi	r18, 0xF0	; 240
     c8e:	32 27       	eor	r19, r18
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	80 5a       	subi	r24, 0xA0	; 160
     c96:	9f 4f       	sbci	r25, 0xFF	; 255
     c98:	fc 01       	movw	r30, r24
     c9a:	40 81       	ld	r20, Z
     c9c:	84 2f       	mov	r24, r20
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	9e 01       	movw	r18, r28
     ca2:	25 5b       	subi	r18, 0xB5	; 181
     ca4:	3f 4f       	sbci	r19, 0xFF	; 255
     ca6:	f9 01       	movw	r30, r18
     ca8:	20 81       	ld	r18, Z
     caa:	31 81       	ldd	r19, Z+1	; 0x01
     cac:	82 0f       	add	r24, r18
     cae:	93 1f       	adc	r25, r19
     cb0:	24 2f       	mov	r18, r20
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	ae 01       	movw	r20, r28
     cb6:	45 5b       	subi	r20, 0xB5	; 181
     cb8:	5f 4f       	sbci	r21, 0xFF	; 255
     cba:	fa 01       	movw	r30, r20
     cbc:	40 81       	ld	r20, Z
     cbe:	51 81       	ldd	r21, Z+1	; 0x01
     cc0:	24 0f       	add	r18, r20
     cc2:	35 1f       	adc	r19, r21
     cc4:	f9 01       	movw	r30, r18
     cc6:	20 81       	ld	r18, Z
     cc8:	42 2f       	mov	r20, r18
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	2f 2d       	mov	r18, r15
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	24 0f       	add	r18, r20
     cd2:	35 1f       	adc	r19, r21
     cd4:	fc 01       	movw	r30, r24
     cd6:	20 83       	st	Z, r18
			}
			writeScreen(time);
     cd8:	ce 01       	movw	r24, r28
     cda:	85 5b       	subi	r24, 0xB5	; 181
     cdc:	9f 4f       	sbci	r25, 0xFF	; 255
     cde:	fc 01       	movw	r30, r24
     ce0:	80 81       	ld	r24, Z
     ce2:	91 81       	ldd	r25, Z+1	; 0x01
     ce4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z11writeScreenPh>
			lcd_goto(y,x);
     ce8:	69 81       	ldd	r22, Y+1	; 0x01
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_Z8lcd_gotohh>
			while ((PIND & (1<<PD3)) == (1<<PD3)) {}
     cf0:	00 00       	nop
     cf2:	80 e3       	ldi	r24, 0x30	; 48
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	fc 01       	movw	r30, r24
     cf8:	80 81       	ld	r24, Z
     cfa:	88 2f       	mov	r24, r24
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	88 70       	andi	r24, 0x08	; 8
     d00:	99 27       	eor	r25, r25
     d02:	21 e0       	ldi	r18, 0x01	; 1
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	09 f4       	brne	.+2      	; 0xd0a <__stack+0x4ab>
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	22 23       	and	r18, r18
     d0c:	91 f7       	brne	.-28     	; 0xcf2 <__stack+0x493>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	a8 ec       	ldi	r26, 0xC8	; 200
     d14:	b1 e4       	ldi	r27, 0x41	; 65
     d16:	8c af       	std	Y+60, r24	; 0x3c
     d18:	9d af       	std	Y+61, r25	; 0x3d
     d1a:	ae af       	std	Y+62, r26	; 0x3e
     d1c:	bf af       	std	Y+63, r27	; 0x3f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d1e:	8e 01       	movw	r16, r28
     d20:	00 5c       	subi	r16, 0xC0	; 192
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	4a e7       	ldi	r20, 0x7A	; 122
     d2a:	54 e4       	ldi	r21, 0x44	; 68
     d2c:	6c ad       	ldd	r22, Y+60	; 0x3c
     d2e:	7d ad       	ldd	r23, Y+61	; 0x3d
     d30:	8e ad       	ldd	r24, Y+62	; 0x3e
     d32:	9f ad       	ldd	r25, Y+63	; 0x3f
     d34:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	f8 01       	movw	r30, r16
     d3e:	80 83       	st	Z, r24
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	a2 83       	std	Z+2, r26	; 0x02
     d44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d46:	ce 01       	movw	r24, r28
     d48:	80 5c       	subi	r24, 0xC0	; 192
     d4a:	9f 4f       	sbci	r25, 0xFF	; 255
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e8       	ldi	r20, 0x80	; 128
     d52:	5f e3       	ldi	r21, 0x3F	; 63
     d54:	fc 01       	movw	r30, r24
     d56:	60 81       	ld	r22, Z
     d58:	71 81       	ldd	r23, Z+1	; 0x01
     d5a:	82 81       	ldd	r24, Z+2	; 0x02
     d5c:	93 81       	ldd	r25, Z+3	; 0x03
     d5e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__cmpsf2>
     d62:	88 23       	and	r24, r24
     d64:	4c f4       	brge	.+18     	; 0xd78 <__stack+0x519>
		__ticks = 1;
     d66:	ce 01       	movw	r24, r28
     d68:	8c 5b       	subi	r24, 0xBC	; 188
     d6a:	9f 4f       	sbci	r25, 0xFF	; 255
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	fc 01       	movw	r30, r24
     d72:	31 83       	std	Z+1, r19	; 0x01
     d74:	20 83       	st	Z, r18
     d76:	69 c0       	rjmp	.+210    	; 0xe4a <__stack+0x5eb>
	else if (__tmp > 65535)
     d78:	ce 01       	movw	r24, r28
     d7a:	80 5c       	subi	r24, 0xC0	; 192
     d7c:	9f 4f       	sbci	r25, 0xFF	; 255
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	3f ef       	ldi	r19, 0xFF	; 255
     d82:	4f e7       	ldi	r20, 0x7F	; 127
     d84:	57 e4       	ldi	r21, 0x47	; 71
     d86:	fc 01       	movw	r30, r24
     d88:	60 81       	ld	r22, Z
     d8a:	71 81       	ldd	r23, Z+1	; 0x01
     d8c:	82 81       	ldd	r24, Z+2	; 0x02
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__gesf2>
     d94:	18 16       	cp	r1, r24
     d96:	0c f0       	brlt	.+2      	; 0xd9a <__stack+0x53b>
     d98:	46 c0       	rjmp	.+140    	; 0xe26 <__stack+0x5c7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	51 e4       	ldi	r21, 0x41	; 65
     da2:	6c ad       	ldd	r22, Y+60	; 0x3c
     da4:	7d ad       	ldd	r23, Y+61	; 0x3d
     da6:	8e ad       	ldd	r24, Y+62	; 0x3e
     da8:	9f ad       	ldd	r25, Y+63	; 0x3f
     daa:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	8e 01       	movw	r16, r28
     db4:	0c 5b       	subi	r16, 0xBC	; 188
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	bc 01       	movw	r22, r24
     dba:	cd 01       	movw	r24, r26
     dbc:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	f8 01       	movw	r30, r16
     dc6:	91 83       	std	Z+1, r25	; 0x01
     dc8:	80 83       	st	Z, r24
     dca:	24 c0       	rjmp	.+72     	; 0xe14 <__stack+0x5b5>
     dcc:	ce 01       	movw	r24, r28
     dce:	8a 5b       	subi	r24, 0xBA	; 186
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	24 e6       	ldi	r18, 0x64	; 100
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	fc 01       	movw	r30, r24
     dd8:	31 83       	std	Z+1, r19	; 0x01
     dda:	20 83       	st	Z, r18
     ddc:	ce 01       	movw	r24, r28
     dde:	8a 5b       	subi	r24, 0xBA	; 186
     de0:	9f 4f       	sbci	r25, 0xFF	; 255
     de2:	fc 01       	movw	r30, r24
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <__stack+0x589>
     dec:	9e 01       	movw	r18, r28
     dee:	2a 5b       	subi	r18, 0xBA	; 186
     df0:	3f 4f       	sbci	r19, 0xFF	; 255
     df2:	f9 01       	movw	r30, r18
     df4:	91 83       	std	Z+1, r25	; 0x01
     df6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df8:	ce 01       	movw	r24, r28
     dfa:	8c 5b       	subi	r24, 0xBC	; 188
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	9e 01       	movw	r18, r28
     e00:	2c 5b       	subi	r18, 0xBC	; 188
     e02:	3f 4f       	sbci	r19, 0xFF	; 255
     e04:	f9 01       	movw	r30, r18
     e06:	20 81       	ld	r18, Z
     e08:	31 81       	ldd	r19, Z+1	; 0x01
     e0a:	21 50       	subi	r18, 0x01	; 1
     e0c:	31 09       	sbc	r19, r1
     e0e:	fc 01       	movw	r30, r24
     e10:	31 83       	std	Z+1, r19	; 0x01
     e12:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e14:	ce 01       	movw	r24, r28
     e16:	8c 5b       	subi	r24, 0xBC	; 188
     e18:	9f 4f       	sbci	r25, 0xFF	; 255
     e1a:	fc 01       	movw	r30, r24
     e1c:	80 81       	ld	r24, Z
     e1e:	91 81       	ldd	r25, Z+1	; 0x01
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	a1 f6       	brne	.-88     	; 0xdcc <__stack+0x56d>
     e24:	2c c0       	rjmp	.+88     	; 0xe7e <__stack+0x61f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e26:	8e 01       	movw	r16, r28
     e28:	0c 5b       	subi	r16, 0xBC	; 188
     e2a:	1f 4f       	sbci	r17, 0xFF	; 255
     e2c:	ce 01       	movw	r24, r28
     e2e:	80 5c       	subi	r24, 0xC0	; 192
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	fc 01       	movw	r30, r24
     e34:	60 81       	ld	r22, Z
     e36:	71 81       	ldd	r23, Z+1	; 0x01
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	93 81       	ldd	r25, Z+3	; 0x03
     e3c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	f8 01       	movw	r30, r16
     e46:	91 83       	std	Z+1, r25	; 0x01
     e48:	80 83       	st	Z, r24
     e4a:	ce 01       	movw	r24, r28
     e4c:	88 5b       	subi	r24, 0xB8	; 184
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	9e 01       	movw	r18, r28
     e52:	2c 5b       	subi	r18, 0xBC	; 188
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	f9 01       	movw	r30, r18
     e58:	20 81       	ld	r18, Z
     e5a:	31 81       	ldd	r19, Z+1	; 0x01
     e5c:	fc 01       	movw	r30, r24
     e5e:	31 83       	std	Z+1, r19	; 0x01
     e60:	20 83       	st	Z, r18
     e62:	ce 01       	movw	r24, r28
     e64:	88 5b       	subi	r24, 0xB8	; 184
     e66:	9f 4f       	sbci	r25, 0xFF	; 255
     e68:	fc 01       	movw	r30, r24
     e6a:	80 81       	ld	r24, Z
     e6c:	91 81       	ldd	r25, Z+1	; 0x01
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <__stack+0x60f>
     e72:	9e 01       	movw	r18, r28
     e74:	28 5b       	subi	r18, 0xB8	; 184
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
     e78:	f9 01       	movw	r30, r18
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
	else
	{
		while ((PIND & (1<<PD4)) == (1<<PD4)) {}
		_delay_ms(25);
	}
	while ((PIND & (1<<PD0)) != (1<<PD0))						//button 1
     e7e:	80 e3       	ldi	r24, 0x30	; 48
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	fc 01       	movw	r30, r24
     e84:	80 81       	ld	r24, Z
     e86:	88 2f       	mov	r24, r24
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	81 70       	andi	r24, 0x01	; 1
     e8c:	99 27       	eor	r25, r25
     e8e:	21 e0       	ldi	r18, 0x01	; 1
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	09 f0       	breq	.+2      	; 0xe96 <__stack+0x637>
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	22 23       	and	r18, r18
     e98:	09 f0       	breq	.+2      	; 0xe9c <__stack+0x63d>
     e9a:	02 cc       	rjmp	.-2044   	; 0x6a0 <_Z10changeTimebPh+0x272>
			lcd_goto(y,x);
			while ((PIND & (1<<PD3)) == (1<<PD3)) {}
			_delay_ms(25);
		}
	}
	if(alarm == false)
     e9c:	ce 01       	movw	r24, r28
     e9e:	86 5b       	subi	r24, 0xB6	; 182
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	fc 01       	movw	r30, r24
     ea4:	90 81       	ld	r25, Z
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	89 27       	eor	r24, r25
     eaa:	88 23       	and	r24, r24
     eac:	b1 f1       	breq	.+108    	; 0xf1a <__stack+0x6bb>
	{
		for (uint8_t i = 1; i <= 7 ; i++)
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	8b 83       	std	Y+3, r24	; 0x03
     eb2:	1c c0       	rjmp	.+56     	; 0xeec <__stack+0x68d>
		{
			data[i] = decToBcd(time[i-1]);
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	08 2f       	mov	r16, r24
     eb8:	10 e0       	ldi	r17, 0x00	; 0
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	9e 01       	movw	r18, r28
     ec4:	25 5b       	subi	r18, 0xB5	; 181
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	f9 01       	movw	r30, r18
     eca:	20 81       	ld	r18, Z
     ecc:	31 81       	ldd	r19, Z+1	; 0x01
     ece:	82 0f       	add	r24, r18
     ed0:	93 1f       	adc	r25, r19
     ed2:	fc 01       	movw	r30, r24
     ed4:	80 81       	ld	r24, Z
     ed6:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8decToBcdh>
     eda:	28 2f       	mov	r18, r24
     edc:	c8 01       	movw	r24, r16
     ede:	8e 54       	subi	r24, 0x4E	; 78
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18
			_delay_ms(25);
		}
	}
	if(alarm == false)
	{
		for (uint8_t i = 1; i <= 7 ; i++)
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	8f 5f       	subi	r24, 0xFF	; 255
     eea:	8b 83       	std	Y+3, r24	; 0x03
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	88 30       	cpi	r24, 0x08	; 8
     ef0:	08 f3       	brcs	.-62     	; 0xeb4 <__stack+0x655>
		{
			data[i] = decToBcd(time[i-1]);
		}
		data[0] = 0;
     ef2:	10 92 b2 00 	sts	0x00B2, r1
		TWI.start_wait(I2C_WRITE);
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	82 ec       	ldi	r24, 0xC2	; 194
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_ZN3I2C10start_waitEh>
		TWI.writeXBytes(data,8);
     f00:	48 e0       	ldi	r20, 0x08	; 8
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	62 eb       	ldi	r22, 0xB2	; 178
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	82 ec       	ldi	r24, 0xC2	; 194
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN3I2C11writeXBytesEPhj>
		TWI.stop();
     f10:	82 ec       	ldi	r24, 0xC2	; 194
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN3I2C4stopEv>
     f18:	04 c0       	rjmp	.+8      	; 0xf22 <__stack+0x6c3>
	}
	else
	{
		writeScreen(realTime);	
     f1a:	8b ea       	ldi	r24, 0xAB	; 171
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z11writeScreenPh>
	}
	t1_Start_TOI();
     f22:	0e 94 32 01 	call	0x264	; 0x264 <_Z12t1_Start_TOIv>
	lcd_cursor(false,false);
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_Z10lcd_cursorbb>
}
     f2e:	c4 5b       	subi	r28, 0xB4	; 180
     f30:	df 4f       	sbci	r29, 0xFF	; 255
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	08 95       	ret

00000f48 <__vector_11>:

ISR(TIMER0_OVF_vect) {
     f48:	1f 92       	push	r1
     f4a:	0f 92       	push	r0
     f4c:	00 90 5f 00 	lds	r0, 0x005F
     f50:	0f 92       	push	r0
     f52:	11 24       	eor	r1, r1
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	2f 93       	push	r18
     f5a:	3f 93       	push	r19
     f5c:	4f 93       	push	r20
     f5e:	5f 93       	push	r21
     f60:	6f 93       	push	r22
     f62:	7f 93       	push	r23
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	af 93       	push	r26
     f6a:	bf 93       	push	r27
     f6c:	ef 93       	push	r30
     f6e:	ff 93       	push	r31
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	1f 92       	push	r1
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
	static unsigned char x = 0;
	if ( x == 15 )
     f7a:	80 91 c3 00 	lds	r24, 0x00C3
     f7e:	8f 30       	cpi	r24, 0x0F	; 15
     f80:	71 f5       	brne	.+92     	; 0xfde <__vector_11+0x96>
	{
		TWI.start_wait(I2C_WRITE);						// set device address and write mode
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	82 ec       	ldi	r24, 0xC2	; 194
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_ZN3I2C10start_waitEh>
		TWI.readXBytes(data,7,0x00);
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	47 e0       	ldi	r20, 0x07	; 7
     f90:	62 eb       	ldi	r22, 0xB2	; 178
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	82 ec       	ldi	r24, 0xC2	; 194
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <_ZN3I2C10readXBytesEPhhh>
		TWI.stop();
     f9c:	82 ec       	ldi	r24, 0xC2	; 194
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN3I2C4stopEv>
		for (uint8_t i = 0; i <= 6 ; i++)
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	15 c0       	rjmp	.+42     	; 0xfd2 <__vector_11+0x8a>
		{
			realTime[i] = bcdToDec(data[i]);
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	08 2f       	mov	r16, r24
     fac:	10 e0       	ldi	r17, 0x00	; 0
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	8e 54       	subi	r24, 0x4E	; 78
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	fc 01       	movw	r30, r24
     fba:	80 81       	ld	r24, Z
     fbc:	0e 94 56 00 	call	0xac	; 0xac <_Z8bcdToDech>
     fc0:	28 2f       	mov	r18, r24
     fc2:	c8 01       	movw	r24, r16
     fc4:	85 55       	subi	r24, 0x55	; 85
     fc6:	9f 4f       	sbci	r25, 0xFF	; 255
     fc8:	fc 01       	movw	r30, r24
     fca:	20 83       	st	Z, r18
	if ( x == 15 )
	{
		TWI.start_wait(I2C_WRITE);						// set device address and write mode
		TWI.readXBytes(data,7,0x00);
		TWI.stop();
		for (uint8_t i = 0; i <= 6 ; i++)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	87 30       	cpi	r24, 0x07	; 7
     fd6:	40 f3       	brcs	.-48     	; 0xfa8 <__vector_11+0x60>
		{
			realTime[i] = bcdToDec(data[i]);
		}
		x = 0;
     fd8:	10 92 c3 00 	sts	0x00C3, r1
     fdc:	05 c0       	rjmp	.+10     	; 0xfe8 <__vector_11+0xa0>
	}
	else
	{
		x++;
     fde:	80 91 c3 00 	lds	r24, 0x00C3
     fe2:	8f 5f       	subi	r24, 0xFF	; 255
     fe4:	80 93 c3 00 	sts	0x00C3, r24
	}
	TCNT0 = 0;
     fe8:	82 e5       	ldi	r24, 0x52	; 82
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	fc 01       	movw	r30, r24
     fee:	10 82       	st	Z, r1
}
     ff0:	0f 90       	pop	r0
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	ff 91       	pop	r31
     ff8:	ef 91       	pop	r30
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	0f 90       	pop	r0
    1014:	00 92 5f 00 	sts	0x005F, r0
    1018:	0f 90       	pop	r0
    101a:	1f 90       	pop	r1
    101c:	18 95       	reti

0000101e <main>:

int main(void)
{
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	6c 97       	sbiw	r28, 0x1c	; 28
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
	init();
    1032:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z4initv>
	sei();
    1036:	78 94       	sei
	while(1)
	{
		cli();
    1038:	f8 94       	cli
		writeScreen(realTime);
    103a:	8b ea       	ldi	r24, 0xAB	; 171
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z11writeScreenPh>
		sei();
    1042:	78 94       	sei
		if ((PIND & (1<<PD0)) == (1<<PD0))
    1044:	80 e3       	ldi	r24, 0x30	; 48
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	fc 01       	movw	r30, r24
    104a:	80 81       	ld	r24, Z
    104c:	88 2f       	mov	r24, r24
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	81 70       	andi	r24, 0x01	; 1
    1052:	99 27       	eor	r25, r25
    1054:	21 e0       	ldi	r18, 0x01	; 1
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	09 f4       	brne	.+2      	; 0x105c <main+0x3e>
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	22 23       	and	r18, r18
    105e:	09 f4       	brne	.+2      	; 0x1062 <main+0x44>
    1060:	86 c0       	rjmp	.+268    	; 0x116e <main+0x150>
		{
			changeTime(false, realTime);
    1062:	6b ea       	ldi	r22, 0xAB	; 171
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	0e 94 17 02 	call	0x42e	; 0x42e <_Z10changeTimebPh>
			while((PIND & (1<<PD0)) == (1<<PD0)) {}
    106c:	00 00       	nop
    106e:	80 e3       	ldi	r24, 0x30	; 48
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	fc 01       	movw	r30, r24
    1074:	80 81       	ld	r24, Z
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	81 70       	andi	r24, 0x01	; 1
    107c:	99 27       	eor	r25, r25
    107e:	21 e0       	ldi	r18, 0x01	; 1
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	09 f4       	brne	.+2      	; 0x1086 <main+0x68>
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	22 23       	and	r18, r18
    1088:	91 f7       	brne	.-28     	; 0x106e <main+0x50>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	a8 ec       	ldi	r26, 0xC8	; 200
    1090:	b1 e4       	ldi	r27, 0x41	; 65
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	ab 83       	std	Y+3, r26	; 0x03
    1098:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	4a e7       	ldi	r20, 0x7A	; 122
    10a0:	54 e4       	ldi	r21, 0x44	; 68
    10a2:	69 81       	ldd	r22, Y+1	; 0x01
    10a4:	7a 81       	ldd	r23, Y+2	; 0x02
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	8d 83       	std	Y+5, r24	; 0x05
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	af 83       	std	Y+7, r26	; 0x07
    10b8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	40 e8       	ldi	r20, 0x80	; 128
    10c0:	5f e3       	ldi	r21, 0x3F	; 63
    10c2:	6d 81       	ldd	r22, Y+5	; 0x05
    10c4:	7e 81       	ldd	r23, Y+6	; 0x06
    10c6:	8f 81       	ldd	r24, Y+7	; 0x07
    10c8:	98 85       	ldd	r25, Y+8	; 0x08
    10ca:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__cmpsf2>
    10ce:	88 23       	and	r24, r24
    10d0:	2c f4       	brge	.+10     	; 0x10dc <main+0xbe>
		__ticks = 1;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9a 87       	std	Y+10, r25	; 0x0a
    10d8:	89 87       	std	Y+9, r24	; 0x09
    10da:	3f c0       	rjmp	.+126    	; 0x115a <main+0x13c>
	else if (__tmp > 65535)
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	3f ef       	ldi	r19, 0xFF	; 255
    10e0:	4f e7       	ldi	r20, 0x7F	; 127
    10e2:	57 e4       	ldi	r21, 0x47	; 71
    10e4:	6d 81       	ldd	r22, Y+5	; 0x05
    10e6:	7e 81       	ldd	r23, Y+6	; 0x06
    10e8:	8f 81       	ldd	r24, Y+7	; 0x07
    10ea:	98 85       	ldd	r25, Y+8	; 0x08
    10ec:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__gesf2>
    10f0:	18 16       	cp	r1, r24
    10f2:	4c f5       	brge	.+82     	; 0x1146 <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e2       	ldi	r20, 0x20	; 32
    10fa:	51 e4       	ldi	r21, 0x41	; 65
    10fc:	69 81       	ldd	r22, Y+1	; 0x01
    10fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	bc 01       	movw	r22, r24
    110e:	cd 01       	movw	r24, r26
    1110:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	9a 87       	std	Y+10, r25	; 0x0a
    111a:	89 87       	std	Y+9, r24	; 0x09
    111c:	0f c0       	rjmp	.+30     	; 0x113c <main+0x11e>
    111e:	84 e6       	ldi	r24, 0x64	; 100
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	9c 87       	std	Y+12, r25	; 0x0c
    1124:	8b 87       	std	Y+11, r24	; 0x0b
    1126:	8b 85       	ldd	r24, Y+11	; 0x0b
    1128:	9c 85       	ldd	r25, Y+12	; 0x0c
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <main+0x10c>
    112e:	9c 87       	std	Y+12, r25	; 0x0c
    1130:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1132:	89 85       	ldd	r24, Y+9	; 0x09
    1134:	9a 85       	ldd	r25, Y+10	; 0x0a
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	9a 87       	std	Y+10, r25	; 0x0a
    113a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113c:	89 85       	ldd	r24, Y+9	; 0x09
    113e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	69 f7       	brne	.-38     	; 0x111e <main+0x100>
    1144:	14 c0       	rjmp	.+40     	; 0x116e <main+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1146:	6d 81       	ldd	r22, Y+5	; 0x05
    1148:	7e 81       	ldd	r23, Y+6	; 0x06
    114a:	8f 81       	ldd	r24, Y+7	; 0x07
    114c:	98 85       	ldd	r25, Y+8	; 0x08
    114e:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	9a 87       	std	Y+10, r25	; 0x0a
    1158:	89 87       	std	Y+9, r24	; 0x09
    115a:	89 85       	ldd	r24, Y+9	; 0x09
    115c:	9a 85       	ldd	r25, Y+10	; 0x0a
    115e:	9e 87       	std	Y+14, r25	; 0x0e
    1160:	8d 87       	std	Y+13, r24	; 0x0d
    1162:	8d 85       	ldd	r24, Y+13	; 0x0d
    1164:	9e 85       	ldd	r25, Y+14	; 0x0e
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <main+0x148>
    116a:	9e 87       	std	Y+14, r25	; 0x0e
    116c:	8d 87       	std	Y+13, r24	; 0x0d
			_delay_ms(25);
		}
		if ((PIND & (1<<PD4)) == (1<<PD4))
    116e:	80 e3       	ldi	r24, 0x30	; 48
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	fc 01       	movw	r30, r24
    1174:	80 81       	ld	r24, Z
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	80 71       	andi	r24, 0x10	; 16
    117c:	99 27       	eor	r25, r25
    117e:	21 e0       	ldi	r18, 0x01	; 1
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	09 f4       	brne	.+2      	; 0x1186 <main+0x168>
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	22 23       	and	r18, r18
    1188:	09 f4       	brne	.+2      	; 0x118c <main+0x16e>
    118a:	86 c0       	rjmp	.+268    	; 0x1298 <main+0x27a>
		{
			changeTime(true, alarmTime);
    118c:	6a eb       	ldi	r22, 0xBA	; 186
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	0e 94 17 02 	call	0x42e	; 0x42e <_Z10changeTimebPh>
			while((PIND & (1<<PD0)) == (1<<PD0)) {}
    1196:	00 00       	nop
    1198:	80 e3       	ldi	r24, 0x30	; 48
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	fc 01       	movw	r30, r24
    119e:	80 81       	ld	r24, Z
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	81 70       	andi	r24, 0x01	; 1
    11a6:	99 27       	eor	r25, r25
    11a8:	21 e0       	ldi	r18, 0x01	; 1
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <main+0x192>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	22 23       	and	r18, r18
    11b2:	91 f7       	brne	.-28     	; 0x1198 <main+0x17a>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a8 ec       	ldi	r26, 0xC8	; 200
    11ba:	b1 e4       	ldi	r27, 0x41	; 65
    11bc:	8f 87       	std	Y+15, r24	; 0x0f
    11be:	98 8b       	std	Y+16, r25	; 0x10
    11c0:	a9 8b       	std	Y+17, r26	; 0x11
    11c2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	4a e7       	ldi	r20, 0x7A	; 122
    11ca:	54 e4       	ldi	r21, 0x44	; 68
    11cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    11ce:	78 89       	ldd	r23, Y+16	; 0x10
    11d0:	89 89       	ldd	r24, Y+17	; 0x11
    11d2:	9a 89       	ldd	r25, Y+18	; 0x12
    11d4:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	8b 8b       	std	Y+19, r24	; 0x13
    11de:	9c 8b       	std	Y+20, r25	; 0x14
    11e0:	ad 8b       	std	Y+21, r26	; 0x15
    11e2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	5f e3       	ldi	r21, 0x3F	; 63
    11ec:	6b 89       	ldd	r22, Y+19	; 0x13
    11ee:	7c 89       	ldd	r23, Y+20	; 0x14
    11f0:	8d 89       	ldd	r24, Y+21	; 0x15
    11f2:	9e 89       	ldd	r25, Y+22	; 0x16
    11f4:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__cmpsf2>
    11f8:	88 23       	and	r24, r24
    11fa:	2c f4       	brge	.+10     	; 0x1206 <main+0x1e8>
		__ticks = 1;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	98 8f       	std	Y+24, r25	; 0x18
    1202:	8f 8b       	std	Y+23, r24	; 0x17
    1204:	3f c0       	rjmp	.+126    	; 0x1284 <main+0x266>
	else if (__tmp > 65535)
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	3f ef       	ldi	r19, 0xFF	; 255
    120a:	4f e7       	ldi	r20, 0x7F	; 127
    120c:	57 e4       	ldi	r21, 0x47	; 71
    120e:	6b 89       	ldd	r22, Y+19	; 0x13
    1210:	7c 89       	ldd	r23, Y+20	; 0x14
    1212:	8d 89       	ldd	r24, Y+21	; 0x15
    1214:	9e 89       	ldd	r25, Y+22	; 0x16
    1216:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__gesf2>
    121a:	18 16       	cp	r1, r24
    121c:	4c f5       	brge	.+82     	; 0x1270 <main+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	40 e2       	ldi	r20, 0x20	; 32
    1224:	51 e4       	ldi	r21, 0x41	; 65
    1226:	6f 85       	ldd	r22, Y+15	; 0x0f
    1228:	78 89       	ldd	r23, Y+16	; 0x10
    122a:	89 89       	ldd	r24, Y+17	; 0x11
    122c:	9a 89       	ldd	r25, Y+18	; 0x12
    122e:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	98 8f       	std	Y+24, r25	; 0x18
    1244:	8f 8b       	std	Y+23, r24	; 0x17
    1246:	0f c0       	rjmp	.+30     	; 0x1266 <main+0x248>
    1248:	84 e6       	ldi	r24, 0x64	; 100
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	9a 8f       	std	Y+26, r25	; 0x1a
    124e:	89 8f       	std	Y+25, r24	; 0x19
    1250:	89 8d       	ldd	r24, Y+25	; 0x19
    1252:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <main+0x236>
    1258:	9a 8f       	std	Y+26, r25	; 0x1a
    125a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125c:	8f 89       	ldd	r24, Y+23	; 0x17
    125e:	98 8d       	ldd	r25, Y+24	; 0x18
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	98 8f       	std	Y+24, r25	; 0x18
    1264:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1266:	8f 89       	ldd	r24, Y+23	; 0x17
    1268:	98 8d       	ldd	r25, Y+24	; 0x18
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	69 f7       	brne	.-38     	; 0x1248 <main+0x22a>
    126e:	14 c0       	rjmp	.+40     	; 0x1298 <main+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1270:	6b 89       	ldd	r22, Y+19	; 0x13
    1272:	7c 89       	ldd	r23, Y+20	; 0x14
    1274:	8d 89       	ldd	r24, Y+21	; 0x15
    1276:	9e 89       	ldd	r25, Y+22	; 0x16
    1278:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	98 8f       	std	Y+24, r25	; 0x18
    1282:	8f 8b       	std	Y+23, r24	; 0x17
    1284:	8f 89       	ldd	r24, Y+23	; 0x17
    1286:	98 8d       	ldd	r25, Y+24	; 0x18
    1288:	9c 8f       	std	Y+28, r25	; 0x1c
    128a:	8b 8f       	std	Y+27, r24	; 0x1b
    128c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    128e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <main+0x272>
    1294:	9c 8f       	std	Y+28, r25	; 0x1c
    1296:	8b 8f       	std	Y+27, r24	; 0x1b
			_delay_ms(25);
		}
		if ((PIND & (1<<PD6)) == (1<<PD6))
    1298:	80 e3       	ldi	r24, 0x30	; 48
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	fc 01       	movw	r30, r24
    129e:	80 81       	ld	r24, Z
    12a0:	88 2f       	mov	r24, r24
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	80 74       	andi	r24, 0x40	; 64
    12a6:	99 27       	eor	r25, r25
    12a8:	21 e0       	ldi	r18, 0x01	; 1
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <main+0x292>
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	22 23       	and	r18, r18
    12b2:	c1 f0       	breq	.+48     	; 0x12e4 <main+0x2c6>
		{
			alarmSet = true;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	80 93 c1 00 	sts	0x00C1, r24
			if (realTime[0] == alarmTime[0] && realTime[1] == alarmTime[1] && realTime[2] == alarmTime[2])
    12ba:	90 91 ab 00 	lds	r25, 0x00AB
    12be:	80 91 ba 00 	lds	r24, 0x00BA
    12c2:	98 17       	cp	r25, r24
    12c4:	a1 f4       	brne	.+40     	; 0x12ee <main+0x2d0>
    12c6:	90 91 ac 00 	lds	r25, 0x00AC
    12ca:	80 91 bb 00 	lds	r24, 0x00BB
    12ce:	98 17       	cp	r25, r24
    12d0:	71 f4       	brne	.+28     	; 0x12ee <main+0x2d0>
    12d2:	90 91 ad 00 	lds	r25, 0x00AD
    12d6:	80 91 bc 00 	lds	r24, 0x00BC
    12da:	98 17       	cp	r25, r24
    12dc:	41 f4       	brne	.+16     	; 0x12ee <main+0x2d0>
			{
				Alarm_start();
    12de:	0e 94 42 01 	call	0x284	; 0x284 <_Z11Alarm_startv>
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <main+0x2d0>
			}
		}
		else
		{
			alarmSet = false;
    12e4:	10 92 c1 00 	sts	0x00C1, r1
			Alarm_stop();
    12e8:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z10Alarm_stopv>
		x++;
	}
	TCNT0 = 0;
}

int main(void)
    12ec:	a5 ce       	rjmp	.-694    	; 0x1038 <main+0x1a>
    12ee:	a4 ce       	rjmp	.-696    	; 0x1038 <main+0x1a>

000012f0 <_Z41__static_initialization_and_destruction_0ii>:
		{
			alarmSet = false;
			Alarm_stop();
		}
	}
}
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <_Z41__static_initialization_and_destruction_0ii+0x6>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <_Z41__static_initialization_and_destruction_0ii+0x8>
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	9a 83       	std	Y+2, r25	; 0x02
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	7c 83       	std	Y+4, r23	; 0x04
    1302:	6b 83       	std	Y+3, r22	; 0x03
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	91 05       	cpc	r25, r1
    130c:	59 f4       	brne	.+22     	; 0x1324 <_Z41__static_initialization_and_destruction_0ii+0x34>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	8f 3f       	cpi	r24, 0xFF	; 255
    1314:	2f ef       	ldi	r18, 0xFF	; 255
    1316:	92 07       	cpc	r25, r18
    1318:	29 f4       	brne	.+10     	; 0x1324 <_Z41__static_initialization_and_destruction_0ii+0x34>

unsigned char alarmTime[7] = {0,0,0,0,0,0,0};
	
bool alarmSet = false;

I2C TWI(address);
    131a:	60 ed       	ldi	r22, 0xD0	; 208
    131c:	82 ec       	ldi	r24, 0xC2	; 194
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN3I2CC1Eh>
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	9a 81       	ldd	r25, Y+2	; 0x02
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	51 f4       	brne	.+20     	; 0x1340 <_Z41__static_initialization_and_destruction_0ii+0x50>
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	8f 3f       	cpi	r24, 0xFF	; 255
    1332:	2f ef       	ldi	r18, 0xFF	; 255
    1334:	92 07       	cpc	r25, r18
    1336:	21 f4       	brne	.+8      	; 0x1340 <_Z41__static_initialization_and_destruction_0ii+0x50>
    1338:	82 ec       	ldi	r24, 0xC2	; 194
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <_ZN3I2CD1Ev>
		{
			alarmSet = false;
			Alarm_stop();
		}
	}
}
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <_GLOBAL__sub_I_buffer>:
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	6f ef       	ldi	r22, 0xFF	; 255
    1358:	7f ef       	ldi	r23, 0xFF	; 255
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_Z41__static_initialization_and_destruction_0ii>
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	08 95       	ret

00001368 <_GLOBAL__sub_D_buffer>:
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	6f ef       	ldi	r22, 0xFF	; 255
    1372:	7f ef       	ldi	r23, 0xFF	; 255
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_Z41__static_initialization_and_destruction_0ii>
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	08 95       	ret

00001382 <_ZN3I2CC1Eh>:
#define SCL_CLOCK  100000L

// default constructor
I2C::I2C():address(0) {}

I2C::I2C(unsigned char newaddress) : address(newaddress) {}
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	00 d0       	rcall	.+0      	; 0x1388 <_ZN3I2CC1Eh+0x6>
    1388:	1f 92       	push	r1
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	6b 83       	std	Y+3, r22	; 0x03
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	2b 81       	ldd	r18, Y+3	; 0x03
    139a:	fc 01       	movw	r30, r24
    139c:	20 83       	st	Z, r18
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <_ZN3I2C4initEv>:

void I2C::init(void)
{
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <_ZN3I2C4initEv+0x6>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	9a 83       	std	Y+2, r25	; 0x02
    13b6:	89 83       	std	Y+1, r24	; 0x01
	 /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
	 TWSR = 0;                         /* no prescaler */
    13b8:	81 e2       	ldi	r24, 0x21	; 33
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	fc 01       	movw	r30, r24
    13be:	10 82       	st	Z, r1
	 TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    13c0:	80 e2       	ldi	r24, 0x20	; 32
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	2c e0       	ldi	r18, 0x0C	; 12
    13c6:	fc 01       	movw	r30, r24
    13c8:	20 83       	st	Z, r18
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <_ZN3I2C5startEh>:
	return address;
}


unsigned char I2C::start(unsigned char RW)
{
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	00 d0       	rcall	.+0      	; 0x13da <_ZN3I2C5startEh+0x6>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <_ZN3I2C5startEh+0x8>
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	9b 83       	std	Y+3, r25	; 0x03
    13e2:	8a 83       	std	Y+2, r24	; 0x02
    13e4:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);				// send START condition
    13e6:	86 e5       	ldi	r24, 0x56	; 86
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	24 ea       	ldi	r18, 0xA4	; 164
    13ec:	fc 01       	movw	r30, r24
    13ee:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));							// wait until transmission completed
    13f0:	00 00       	nop
    13f2:	86 e5       	ldi	r24, 0x56	; 86
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	fc 01       	movw	r30, r24
    13f8:	80 81       	ld	r24, Z
    13fa:	80 95       	com	r24
    13fc:	88 1f       	adc	r24, r24
    13fe:	88 27       	eor	r24, r24
    1400:	88 1f       	adc	r24, r24
    1402:	88 23       	and	r24, r24
    1404:	b1 f7       	brne	.-20     	; 0x13f2 <_ZN3I2C5startEh+0x1e>
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
    1406:	81 e2       	ldi	r24, 0x21	; 33
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	fc 01       	movw	r30, r24
    140c:	80 81       	ld	r24, Z
    140e:	88 7f       	andi	r24, 0xF8	; 248
    1410:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	88 30       	cpi	r24, 0x08	; 8
    1416:	29 f0       	breq	.+10     	; 0x1422 <_ZN3I2C5startEh+0x4e>
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	80 31       	cpi	r24, 0x10	; 16
    141c:	11 f0       	breq	.+4      	; 0x1422 <_ZN3I2C5startEh+0x4e>
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	29 c0       	rjmp	.+82     	; 0x1474 <_ZN3I2C5startEh+0xa0>
	TWDR = address + RW;									// send device address
    1422:	83 e2       	ldi	r24, 0x23	; 35
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	2a 81       	ldd	r18, Y+2	; 0x02
    1428:	3b 81       	ldd	r19, Y+3	; 0x03
    142a:	f9 01       	movw	r30, r18
    142c:	30 81       	ld	r19, Z
    142e:	2c 81       	ldd	r18, Y+4	; 0x04
    1430:	23 0f       	add	r18, r19
    1432:	fc 01       	movw	r30, r24
    1434:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1436:	86 e5       	ldi	r24, 0x56	; 86
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	24 e8       	ldi	r18, 0x84	; 132
    143c:	fc 01       	movw	r30, r24
    143e:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));							// wail until transmission completed and ACK/NACK has been received
    1440:	00 00       	nop
    1442:	86 e5       	ldi	r24, 0x56	; 86
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	fc 01       	movw	r30, r24
    1448:	80 81       	ld	r24, Z
    144a:	80 95       	com	r24
    144c:	88 1f       	adc	r24, r24
    144e:	88 27       	eor	r24, r24
    1450:	88 1f       	adc	r24, r24
    1452:	88 23       	and	r24, r24
    1454:	b1 f7       	brne	.-20     	; 0x1442 <_ZN3I2C5startEh+0x6e>
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
    1456:	81 e2       	ldi	r24, 0x21	; 33
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	fc 01       	movw	r30, r24
    145c:	80 81       	ld	r24, Z
    145e:	88 7f       	andi	r24, 0xF8	; 248
    1460:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	88 31       	cpi	r24, 0x18	; 24
    1466:	29 f0       	breq	.+10     	; 0x1472 <_ZN3I2C5startEh+0x9e>
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	80 34       	cpi	r24, 0x40	; 64
    146c:	11 f0       	breq	.+4      	; 0x1472 <_ZN3I2C5startEh+0x9e>
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <_ZN3I2C5startEh+0xa0>
	return 0;
    1472:	80 e0       	ldi	r24, 0x00	; 0
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	08 95       	ret

00001482 <_ZN3I2C9rep_startEh>:

unsigned char I2C::rep_start(unsigned char RW)
{
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	00 d0       	rcall	.+0      	; 0x1488 <_ZN3I2C9rep_startEh+0x6>
    1488:	1f 92       	push	r1
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	9a 83       	std	Y+2, r25	; 0x02
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	6b 83       	std	Y+3, r22	; 0x03
	return start(RW);
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	6b 81       	ldd	r22, Y+3	; 0x03
    149a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <_ZN3I2C5startEh>
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	08 95       	ret

000014aa <_ZN3I2C10start_waitEh>:

void I2C::start_wait(unsigned char RW)
{
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <_ZN3I2C10start_waitEh+0x6>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <_ZN3I2C10start_waitEh+0x8>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	9b 83       	std	Y+3, r25	; 0x03
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t   twst;
	while ( 1 )
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);						// send START condition
    14bc:	86 e5       	ldi	r24, 0x56	; 86
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	24 ea       	ldi	r18, 0xA4	; 164
    14c2:	fc 01       	movw	r30, r24
    14c4:	20 83       	st	Z, r18
		while(!(TWCR & (1<<TWINT)));									// wait until transmission completed
    14c6:	00 00       	nop
    14c8:	86 e5       	ldi	r24, 0x56	; 86
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	fc 01       	movw	r30, r24
    14ce:	80 81       	ld	r24, Z
    14d0:	80 95       	com	r24
    14d2:	88 1f       	adc	r24, r24
    14d4:	88 27       	eor	r24, r24
    14d6:	88 1f       	adc	r24, r24
    14d8:	88 23       	and	r24, r24
    14da:	b1 f7       	brne	.-20     	; 0x14c8 <_ZN3I2C10start_waitEh+0x1e>
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
    14dc:	81 e2       	ldi	r24, 0x21	; 33
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	fc 01       	movw	r30, r24
    14e2:	80 81       	ld	r24, Z
    14e4:	88 7f       	andi	r24, 0xF8	; 248
    14e6:	89 83       	std	Y+1, r24	; 0x01
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	88 30       	cpi	r24, 0x08	; 8
    14ec:	21 f0       	breq	.+8      	; 0x14f6 <_ZN3I2C10start_waitEh+0x4c>
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	80 31       	cpi	r24, 0x10	; 16
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <_ZN3I2C10start_waitEh+0x4c>
    14f4:	3c c0       	rjmp	.+120    	; 0x156e <_ZN3I2C10start_waitEh+0xc4>
		TWDR = address + RW;											// send device address
    14f6:	83 e2       	ldi	r24, 0x23	; 35
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	2a 81       	ldd	r18, Y+2	; 0x02
    14fc:	3b 81       	ldd	r19, Y+3	; 0x03
    14fe:	f9 01       	movw	r30, r18
    1500:	30 81       	ld	r19, Z
    1502:	2c 81       	ldd	r18, Y+4	; 0x04
    1504:	23 0f       	add	r18, r19
    1506:	fc 01       	movw	r30, r24
    1508:	20 83       	st	Z, r18
		TWCR = (1<<TWINT) | (1<<TWEN);
    150a:	86 e5       	ldi	r24, 0x56	; 86
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	24 e8       	ldi	r18, 0x84	; 132
    1510:	fc 01       	movw	r30, r24
    1512:	20 83       	st	Z, r18
		while(!(TWCR & (1<<TWINT)));									// wail until transmission completed
    1514:	00 00       	nop
    1516:	86 e5       	ldi	r24, 0x56	; 86
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	fc 01       	movw	r30, r24
    151c:	80 81       	ld	r24, Z
    151e:	80 95       	com	r24
    1520:	88 1f       	adc	r24, r24
    1522:	88 27       	eor	r24, r24
    1524:	88 1f       	adc	r24, r24
    1526:	88 23       	and	r24, r24
    1528:	b1 f7       	brne	.-20     	; 0x1516 <_ZN3I2C10start_waitEh+0x6c>
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
    152a:	81 e2       	ldi	r24, 0x21	; 33
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	fc 01       	movw	r30, r24
    1530:	80 81       	ld	r24, Z
    1532:	88 7f       	andi	r24, 0xF8	; 248
    1534:	89 83       	std	Y+1, r24	; 0x01
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	80 32       	cpi	r24, 0x20	; 32
    153a:	19 f0       	breq	.+6      	; 0x1542 <_ZN3I2C10start_waitEh+0x98>
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	88 35       	cpi	r24, 0x58	; 88
    1540:	a9 f4       	brne	.+42     	; 0x156c <_ZN3I2C10start_waitEh+0xc2>
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);					//device busy, send stop condition to terminate write operation
    1542:	86 e5       	ldi	r24, 0x56	; 86
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	24 e9       	ldi	r18, 0x94	; 148
    1548:	fc 01       	movw	r30, r24
    154a:	20 83       	st	Z, r18
			while(TWCR & (1<<TWSTO));									// wait until stop condition is executed and bus released
    154c:	00 00       	nop
    154e:	86 e5       	ldi	r24, 0x56	; 86
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	fc 01       	movw	r30, r24
    1554:	80 81       	ld	r24, Z
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	80 71       	andi	r24, 0x10	; 16
    155c:	99 27       	eor	r25, r25
    155e:	21 e0       	ldi	r18, 0x01	; 1
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	09 f4       	brne	.+2      	; 0x1566 <_ZN3I2C10start_waitEh+0xbc>
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	22 23       	and	r18, r18
    1568:	91 f7       	brne	.-28     	; 0x154e <_ZN3I2C10start_waitEh+0xa4>
			continue;
    156a:	01 c0       	rjmp	.+2      	; 0x156e <_ZN3I2C10start_waitEh+0xc4>
		}
		break;															//if( twst != TW_MT_SLA_ACK) return 1;
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <_ZN3I2C10start_waitEh+0xc6>
	}
    156e:	a6 cf       	rjmp	.-180    	; 0x14bc <_ZN3I2C10start_waitEh+0x12>
}
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <_ZN3I2C4stopEv>:

void I2C::stop(void)
{
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	00 d0       	rcall	.+0      	; 0x1584 <_ZN3I2C4stopEv+0x6>
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	9a 83       	std	Y+2, r25	; 0x02
    158a:	89 83       	std	Y+1, r24	; 0x01
	 TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);						//send stop condition
    158c:	86 e5       	ldi	r24, 0x56	; 86
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	24 e9       	ldi	r18, 0x94	; 148
    1592:	fc 01       	movw	r30, r24
    1594:	20 83       	st	Z, r18
	 while(TWCR & (1<<TWSTO));											// wait until stop condition is executed and bus released
    1596:	00 00       	nop
    1598:	86 e5       	ldi	r24, 0x56	; 86
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	fc 01       	movw	r30, r24
    159e:	80 81       	ld	r24, Z
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	80 71       	andi	r24, 0x10	; 16
    15a6:	99 27       	eor	r25, r25
    15a8:	21 e0       	ldi	r18, 0x01	; 1
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <_ZN3I2C4stopEv+0x32>
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	22 23       	and	r18, r18
    15b2:	91 f7       	brne	.-28     	; 0x1598 <_ZN3I2C4stopEv+0x1a>
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <_ZN3I2C5writeEh>:


unsigned char I2C::write(unsigned char data)
{
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <_ZN3I2C5writeEh+0x6>
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <_ZN3I2C5writeEh+0x8>
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	9b 83       	std	Y+3, r25	; 0x03
    15cc:	8a 83       	std	Y+2, r24	; 0x02
    15ce:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t   twst;
	TWDR = data;														// send data to the previously addressed device
    15d0:	83 e2       	ldi	r24, 0x23	; 35
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	2c 81       	ldd	r18, Y+4	; 0x04
    15d6:	fc 01       	movw	r30, r24
    15d8:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    15da:	86 e5       	ldi	r24, 0x56	; 86
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	24 e8       	ldi	r18, 0x84	; 132
    15e0:	fc 01       	movw	r30, r24
    15e2:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))){}										// wait until transmission completed
    15e4:	00 00       	nop
    15e6:	86 e5       	ldi	r24, 0x56	; 86
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	fc 01       	movw	r30, r24
    15ec:	80 81       	ld	r24, Z
    15ee:	80 95       	com	r24
    15f0:	88 1f       	adc	r24, r24
    15f2:	88 27       	eor	r24, r24
    15f4:	88 1f       	adc	r24, r24
    15f6:	88 23       	and	r24, r24
    15f8:	b1 f7       	brne	.-20     	; 0x15e6 <_ZN3I2C5writeEh+0x28>
	twst = TW_STATUS & 0xF8;											// check value of TWI Status Register. Mask prescaler bits
    15fa:	81 e2       	ldi	r24, 0x21	; 33
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	fc 01       	movw	r30, r24
    1600:	80 81       	ld	r24, Z
    1602:	88 7f       	andi	r24, 0xF8	; 248
    1604:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	88 32       	cpi	r24, 0x28	; 40
    160a:	11 f0       	breq	.+4      	; 0x1610 <_ZN3I2C5writeEh+0x52>
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <_ZN3I2C5writeEh+0x54>
	return 0;
    1610:	80 e0       	ldi	r24, 0x00	; 0
}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	08 95       	ret

00001620 <_ZN3I2C7readAckEv>:

unsigned char I2C::readAck(void)
{
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	00 d0       	rcall	.+0      	; 0x1626 <_ZN3I2C7readAckEv+0x6>
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    162e:	86 e5       	ldi	r24, 0x56	; 86
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	24 ec       	ldi	r18, 0xC4	; 196
    1634:	fc 01       	movw	r30, r24
    1636:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));
    1638:	00 00       	nop
    163a:	86 e5       	ldi	r24, 0x56	; 86
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	fc 01       	movw	r30, r24
    1640:	80 81       	ld	r24, Z
    1642:	80 95       	com	r24
    1644:	88 1f       	adc	r24, r24
    1646:	88 27       	eor	r24, r24
    1648:	88 1f       	adc	r24, r24
    164a:	88 23       	and	r24, r24
    164c:	b1 f7       	brne	.-20     	; 0x163a <_ZN3I2C7readAckEv+0x1a>
	return TWDR;
    164e:	83 e2       	ldi	r24, 0x23	; 35
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	fc 01       	movw	r30, r24
    1654:	80 81       	ld	r24, Z
}
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	08 95       	ret

00001660 <_ZN3I2C7readNakEv>:

unsigned char I2C::readNak(void)
{
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	00 d0       	rcall	.+0      	; 0x1666 <_ZN3I2C7readNakEv+0x6>
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<<TWINT) | (1<<TWEN);
    166e:	86 e5       	ldi	r24, 0x56	; 86
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	24 e8       	ldi	r18, 0x84	; 132
    1674:	fc 01       	movw	r30, r24
    1676:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));	
    1678:	00 00       	nop
    167a:	86 e5       	ldi	r24, 0x56	; 86
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	fc 01       	movw	r30, r24
    1680:	80 81       	ld	r24, Z
    1682:	80 95       	com	r24
    1684:	88 1f       	adc	r24, r24
    1686:	88 27       	eor	r24, r24
    1688:	88 1f       	adc	r24, r24
    168a:	88 23       	and	r24, r24
    168c:	b1 f7       	brne	.-20     	; 0x167a <_ZN3I2C7readNakEv+0x1a>
	return TWDR;
    168e:	83 e2       	ldi	r24, 0x23	; 35
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	fc 01       	movw	r30, r24
    1694:	80 81       	ld	r24, Z
}
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret

000016a0 <_ZN3I2C10readXBytesEPhhh>:

void I2C::readXBytes(unsigned char data[], unsigned char amount, unsigned char startAddress)	//data[x] : x >= amount
{
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	27 97       	sbiw	r28, 0x07	; 7
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	9b 83       	std	Y+3, r25	; 0x03
    16ba:	8a 83       	std	Y+2, r24	; 0x02
    16bc:	7d 83       	std	Y+5, r23	; 0x05
    16be:	6c 83       	std	Y+4, r22	; 0x04
    16c0:	4e 83       	std	Y+6, r20	; 0x06
    16c2:	2f 83       	std	Y+7, r18	; 0x07
//	if ((sizeof (data)/sizeof (data[0])) >= amount){
		write(startAddress);
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	9b 81       	ldd	r25, Y+3	; 0x03
    16c8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ca:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN3I2C5writeEh>
		rep_start(I2C_READ);
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	9b 81       	ldd	r25, Y+3	; 0x03
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	0e 94 41 0a 	call	0x1482	; 0x1482 <_ZN3I2C9rep_startEh>
		for (uint8_t i = 0; i < amount - 1; i++){
    16d8:	19 82       	std	Y+1, r1	; 0x01
    16da:	11 c0       	rjmp	.+34     	; 0x16fe <_ZN3I2C10readXBytesEPhhh+0x5e>
			data[i] = readAck();
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	2c 81       	ldd	r18, Y+4	; 0x04
    16e4:	3d 81       	ldd	r19, Y+5	; 0x05
    16e6:	89 01       	movw	r16, r18
    16e8:	08 0f       	add	r16, r24
    16ea:	19 1f       	adc	r17, r25
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	9b 81       	ldd	r25, Y+3	; 0x03
    16f0:	0e 94 10 0b 	call	0x1620	; 0x1620 <_ZN3I2C7readAckEv>
    16f4:	f8 01       	movw	r30, r16
    16f6:	80 83       	st	Z, r24
void I2C::readXBytes(unsigned char data[], unsigned char amount, unsigned char startAddress)	//data[x] : x >= amount
{
//	if ((sizeof (data)/sizeof (data[0])) >= amount){
		write(startAddress);
		rep_start(I2C_READ);
		for (uint8_t i = 0; i < amount - 1; i++){
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	8f 5f       	subi	r24, 0xFF	; 255
    16fc:	89 83       	std	Y+1, r24	; 0x01
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	8e 81       	ldd	r24, Y+6	; 0x06
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	28 17       	cp	r18, r24
    170e:	39 07       	cpc	r19, r25
    1710:	2c f3       	brlt	.-54     	; 0x16dc <_ZN3I2C10readXBytesEPhhh+0x3c>
			data[i] = readAck();
		}
		data[amount - 1] = readNak();
    1712:	8e 81       	ldd	r24, Y+6	; 0x06
    1714:	88 2f       	mov	r24, r24
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	2c 81       	ldd	r18, Y+4	; 0x04
    171c:	3d 81       	ldd	r19, Y+5	; 0x05
    171e:	89 01       	movw	r16, r18
    1720:	08 0f       	add	r16, r24
    1722:	19 1f       	adc	r17, r25
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	9b 81       	ldd	r25, Y+3	; 0x03
    1728:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN3I2C7readNakEv>
    172c:	f8 01       	movw	r30, r16
    172e:	80 83       	st	Z, r24
//	}
}
    1730:	27 96       	adiw	r28, 0x07	; 7
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	08 95       	ret

00001746 <_ZN3I2C11writeXBytesEPhj>:

void I2C::writeXBytes(unsigned char data[], unsigned int amount)	//data[x] : x >= amount
{
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	27 97       	sbiw	r28, 0x07	; 7
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	9b 83       	std	Y+3, r25	; 0x03
    175c:	8a 83       	std	Y+2, r24	; 0x02
    175e:	7d 83       	std	Y+5, r23	; 0x05
    1760:	6c 83       	std	Y+4, r22	; 0x04
    1762:	5f 83       	std	Y+7, r21	; 0x07
    1764:	4e 83       	std	Y+6, r20	; 0x06
	for (uint8_t i = 0; i <= amount; i++){
    1766:	19 82       	std	Y+1, r1	; 0x01
    1768:	11 c0       	rjmp	.+34     	; 0x178c <_ZN3I2C11writeXBytesEPhj+0x46>
		write(data[i]);	
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	88 2f       	mov	r24, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	2c 81       	ldd	r18, Y+4	; 0x04
    1772:	3d 81       	ldd	r19, Y+5	; 0x05
    1774:	82 0f       	add	r24, r18
    1776:	93 1f       	adc	r25, r19
    1778:	fc 01       	movw	r30, r24
    177a:	20 81       	ld	r18, Z
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	9b 81       	ldd	r25, Y+3	; 0x03
    1780:	62 2f       	mov	r22, r18
    1782:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN3I2C5writeEh>
//	}
}

void I2C::writeXBytes(unsigned char data[], unsigned int amount)	//data[x] : x >= amount
{
	for (uint8_t i = 0; i <= amount; i++){
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	8f 5f       	subi	r24, 0xFF	; 255
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	8e 81       	ldd	r24, Y+6	; 0x06
    1794:	9f 81       	ldd	r25, Y+7	; 0x07
    1796:	82 17       	cp	r24, r18
    1798:	93 07       	cpc	r25, r19
    179a:	38 f7       	brcc	.-50     	; 0x176a <_ZN3I2C11writeXBytesEPhj+0x24>
		write(data[i]);	
	}
}
    179c:	27 96       	adiw	r28, 0x07	; 7
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	08 95       	ret

000017ae <_ZN3I2CD1Ev>:

// default destructor
I2C::~I2C()
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <_ZN3I2CD1Ev+0x6>
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
{
} //~I2C
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	08 95       	ret

000017c6 <_Z12_lcd_delay_8h>:

    These functions and macro's are written by Jesse.
*/

/* One byte delay loop, one loop costs 3 cycles. */
void _lcd_delay_8(uint8_t t) {
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	1f 92       	push	r1
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("\n"
                  "L_dl0%=: subi %0,1"    "\n\t"
                  "         brcc L_dl0%=" "\n\t"
                  :: "r" (t));
    17d2:	89 81       	ldd	r24, Y+1	; 0x01

000017d4 <L_dl021>:
    17d4:	81 50       	subi	r24, 0x01	; 1
    17d6:	f0 f7       	brcc	.-4      	; 0x17d4 <L_dl021>
}
    17d8:	0f 90       	pop	r0
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <_Z13_lcd_delay_16j>:

/* Two byte delay loop, one loop costs 4 cycles. */
void _lcd_delay_16(uint16_t t) {
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <_Z13_lcd_delay_16j+0x6>
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("\n"
                  "L_dl1%=: subi %A0,1"   "\n\t"
                  "         sbci %B0,0"   "\n\t"
                  "         brcc L_dl1%=" "\n\t"
                  :: "r" (t));
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02

000017f2 <L_dl149>:
    17f2:	81 50       	subi	r24, 0x01	; 1
    17f4:	90 40       	sbci	r25, 0x00	; 0
    17f6:	e8 f7       	brcc	.-6      	; 0x17f2 <L_dl149>
}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <_Z16lcd_read_commandv>:
// PA0 is Not Connected and is NOT AFFECTED by this LCD software
#define _LCD_E PA1
#define _LCD_RW PA2
#define _LCD_RS PA3

uint8_t lcd_read_command(void) {
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	1f 92       	push	r1
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    uint8_t command;
    DDRA |= 1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS; // control bus output
    180c:	8a e3       	ldi	r24, 0x3A	; 58
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	2a e3       	ldi	r18, 0x3A	; 58
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	f9 01       	movw	r30, r18
    1816:	20 81       	ld	r18, Z
    1818:	2e 60       	ori	r18, 0x0E	; 14
    181a:	fc 01       	movw	r30, r24
    181c:	20 83       	st	Z, r18
    DDRA &= ~0xF0; // databus input
    181e:	8a e3       	ldi	r24, 0x3A	; 58
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	2a e3       	ldi	r18, 0x3A	; 58
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	f9 01       	movw	r30, r18
    1828:	20 81       	ld	r18, Z
    182a:	2f 70       	andi	r18, 0x0F	; 15
    182c:	fc 01       	movw	r30, r24
    182e:	20 83       	st	Z, r18
    PORTA |= 1<<_LCD_RW | 0xF0; // R/!W= 1 (Read) and Pullup inputs 
    1830:	8b e3       	ldi	r24, 0x3B	; 59
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	2b e3       	ldi	r18, 0x3B	; 59
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	f9 01       	movw	r30, r18
    183a:	20 81       	ld	r18, Z
    183c:	24 6f       	ori	r18, 0xF4	; 244
    183e:	fc 01       	movw	r30, r24
    1840:	20 83       	st	Z, r18
    PORTA &= ~(1<<_LCD_RS); // RS=0
    1842:	8b e3       	ldi	r24, 0x3B	; 59
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	2b e3       	ldi	r18, 0x3B	; 59
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	f9 01       	movw	r30, r18
    184c:	20 81       	ld	r18, Z
    184e:	27 7f       	andi	r18, 0xF7	; 247
    1850:	fc 01       	movw	r30, r24
    1852:	20 83       	st	Z, r18
    _lcd_delay_us_small(2);
    1854:	82 e0       	ldi	r24, 0x02	; 2
    1856:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z12_lcd_delay_8h>
    PORTA |= 1<<_LCD_E; // E=1
    185a:	8b e3       	ldi	r24, 0x3B	; 59
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	2b e3       	ldi	r18, 0x3B	; 59
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	f9 01       	movw	r30, r18
    1864:	20 81       	ld	r18, Z
    1866:	22 60       	ori	r18, 0x02	; 2
    1868:	fc 01       	movw	r30, r24
    186a:	20 83       	st	Z, r18
    _lcd_delay_us_small(1);
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z12_lcd_delay_8h>
    command = PINA & 0xF0; // read high nibble
    1872:	89 e3       	ldi	r24, 0x39	; 57
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	fc 01       	movw	r30, r24
    1878:	80 81       	ld	r24, Z
    187a:	80 7f       	andi	r24, 0xF0	; 240
    187c:	89 83       	std	Y+1, r24	; 0x01
    PORTA &= ~(1<<_LCD_E); // E=0
    187e:	8b e3       	ldi	r24, 0x3B	; 59
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	2b e3       	ldi	r18, 0x3B	; 59
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	f9 01       	movw	r30, r18
    1888:	20 81       	ld	r18, Z
    188a:	2d 7f       	andi	r18, 0xFD	; 253
    188c:	fc 01       	movw	r30, r24
    188e:	20 83       	st	Z, r18
    _lcd_delay_us_small(2);
    1890:	82 e0       	ldi	r24, 0x02	; 2
    1892:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z12_lcd_delay_8h>
    PORTA |= 1<<_LCD_E; // E=1
    1896:	8b e3       	ldi	r24, 0x3B	; 59
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	2b e3       	ldi	r18, 0x3B	; 59
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	f9 01       	movw	r30, r18
    18a0:	20 81       	ld	r18, Z
    18a2:	22 60       	ori	r18, 0x02	; 2
    18a4:	fc 01       	movw	r30, r24
    18a6:	20 83       	st	Z, r18
    _lcd_delay_us_small(1);
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z12_lcd_delay_8h>
    command |= PINA >> 4; // read low nibble
    18ae:	89 e3       	ldi	r24, 0x39	; 57
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	fc 01       	movw	r30, r24
    18b4:	80 81       	ld	r24, Z
    18b6:	88 2f       	mov	r24, r24
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	95 95       	asr	r25
    18bc:	87 95       	ror	r24
    18be:	95 95       	asr	r25
    18c0:	87 95       	ror	r24
    18c2:	95 95       	asr	r25
    18c4:	87 95       	ror	r24
    18c6:	95 95       	asr	r25
    18c8:	87 95       	ror	r24
    18ca:	29 81       	ldd	r18, Y+1	; 0x01
    18cc:	22 2f       	mov	r18, r18
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	82 2b       	or	r24, r18
    18d2:	93 2b       	or	r25, r19
    18d4:	89 83       	std	Y+1, r24	; 0x01
    PORTA &= ~(1<<_LCD_E); // E=0
    18d6:	8b e3       	ldi	r24, 0x3B	; 59
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	2b e3       	ldi	r18, 0x3B	; 59
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	f9 01       	movw	r30, r18
    18e0:	20 81       	ld	r18, Z
    18e2:	2d 7f       	andi	r18, 0xFD	; 253
    18e4:	fc 01       	movw	r30, r24
    18e6:	20 83       	st	Z, r18
    return command;
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ea:	0f 90       	pop	r0
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	08 95       	ret

000018f2 <_ZL4waitv>:
    data |= PINA>>4;
    PORTA &= ~(1<<_LCD_E);
    return data;
}

static void wait(void) {
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    while (lcd_read_command() & 0x80);
    18fa:	00 00       	nop
    18fc:	0e 94 01 0c 	call	0x1802	; 0x1802 <_Z16lcd_read_commandv>
    1900:	88 1f       	adc	r24, r24
    1902:	88 27       	eor	r24, r24
    1904:	88 1f       	adc	r24, r24
    1906:	88 23       	and	r24, r24
    1908:	c9 f7       	brne	.-14     	; 0x18fc <_ZL4waitv+0xa>
}
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	08 95       	ret

00001910 <_ZL11pos_pulse_Ev>:
    
static void pos_pulse_E(void) {
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    _lcd_delay_us_small(2);
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z12_lcd_delay_8h>
    PORTA |= 1<<_LCD_E; // E=1
    191e:	8b e3       	ldi	r24, 0x3B	; 59
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	2b e3       	ldi	r18, 0x3B	; 59
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	f9 01       	movw	r30, r18
    1928:	20 81       	ld	r18, Z
    192a:	22 60       	ori	r18, 0x02	; 2
    192c:	fc 01       	movw	r30, r24
    192e:	20 83       	st	Z, r18
    _lcd_delay_us_small(1);
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z12_lcd_delay_8h>
    PORTA &= ~(1<<_LCD_E); // E=0
    1936:	8b e3       	ldi	r24, 0x3B	; 59
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	2b e3       	ldi	r18, 0x3B	; 59
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	f9 01       	movw	r30, r18
    1940:	20 81       	ld	r18, Z
    1942:	2d 7f       	andi	r18, 0xFD	; 253
    1944:	fc 01       	movw	r30, r24
    1946:	20 83       	st	Z, r18
}
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	08 95       	ret

0000194e <_Z17lcd_write_commandh>:

void lcd_write_command(uint8_t command) {
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	1f 92       	push	r1
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	89 83       	std	Y+1, r24	; 0x01
    wait();
    195a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <_ZL4waitv>
    DDRA |= 1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0; // controlbus and databus output
    195e:	8a e3       	ldi	r24, 0x3A	; 58
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	2a e3       	ldi	r18, 0x3A	; 58
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	f9 01       	movw	r30, r18
    1968:	20 81       	ld	r18, Z
    196a:	2e 6f       	ori	r18, 0xFE	; 254
    196c:	fc 01       	movw	r30, r24
    196e:	20 83       	st	Z, r18
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0);
    1970:	8b e3       	ldi	r24, 0x3B	; 59
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	2b e3       	ldi	r18, 0x3B	; 59
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	f9 01       	movw	r30, r18
    197a:	20 81       	ld	r18, Z
    197c:	21 70       	andi	r18, 0x01	; 1
    197e:	fc 01       	movw	r30, r24
    1980:	20 83       	st	Z, r18
    PORTA |= command & 0xF0; // all control signals low RS=0 R/!W=0
    1982:	8b e3       	ldi	r24, 0x3B	; 59
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	2b e3       	ldi	r18, 0x3B	; 59
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	f9 01       	movw	r30, r18
    198c:	20 81       	ld	r18, Z
    198e:	32 2f       	mov	r19, r18
    1990:	29 81       	ldd	r18, Y+1	; 0x01
    1992:	20 7f       	andi	r18, 0xF0	; 240
    1994:	23 2b       	or	r18, r19
    1996:	fc 01       	movw	r30, r24
    1998:	20 83       	st	Z, r18
    pos_pulse_E();// write high nibble
    199a:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZL11pos_pulse_Ev>
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0);
    199e:	8b e3       	ldi	r24, 0x3B	; 59
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	2b e3       	ldi	r18, 0x3B	; 59
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	f9 01       	movw	r30, r18
    19a8:	20 81       	ld	r18, Z
    19aa:	21 70       	andi	r18, 0x01	; 1
    19ac:	fc 01       	movw	r30, r24
    19ae:	20 83       	st	Z, r18
    PORTA |= command << 4; // all control signals low RS=0 R/!W=0
    19b0:	8b e3       	ldi	r24, 0x3B	; 59
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	2b e3       	ldi	r18, 0x3B	; 59
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	f9 01       	movw	r30, r18
    19ba:	20 81       	ld	r18, Z
    19bc:	42 2f       	mov	r20, r18
    19be:	29 81       	ldd	r18, Y+1	; 0x01
    19c0:	22 2f       	mov	r18, r18
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	22 95       	swap	r18
    19c6:	32 95       	swap	r19
    19c8:	30 7f       	andi	r19, 0xF0	; 240
    19ca:	32 27       	eor	r19, r18
    19cc:	20 7f       	andi	r18, 0xF0	; 240
    19ce:	32 27       	eor	r19, r18
    19d0:	24 2b       	or	r18, r20
    19d2:	fc 01       	movw	r30, r24
    19d4:	20 83       	st	Z, r18
    pos_pulse_E();// write low nibble
    19d6:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZL11pos_pulse_Ev>
}
    19da:	0f 90       	pop	r0
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	08 95       	ret

000019e2 <_Z14lcd_write_datah>:

void lcd_write_data(uint8_t data) {
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	1f 92       	push	r1
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	89 83       	std	Y+1, r24	; 0x01
    wait();
    19ee:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <_ZL4waitv>
    DDRA |= 1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0;
    19f2:	8a e3       	ldi	r24, 0x3A	; 58
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	2a e3       	ldi	r18, 0x3A	; 58
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	f9 01       	movw	r30, r18
    19fc:	20 81       	ld	r18, Z
    19fe:	2e 6f       	ori	r18, 0xFE	; 254
    1a00:	fc 01       	movw	r30, r24
    1a02:	20 83       	st	Z, r18
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0);
    1a04:	8b e3       	ldi	r24, 0x3B	; 59
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	2b e3       	ldi	r18, 0x3B	; 59
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	f9 01       	movw	r30, r18
    1a0e:	20 81       	ld	r18, Z
    1a10:	21 70       	andi	r18, 0x01	; 1
    1a12:	fc 01       	movw	r30, r24
    1a14:	20 83       	st	Z, r18
    PORTA |= (data & 0xF0) | 1<<_LCD_RS; // RS=1 other control signals 0 R/!W=0
    1a16:	8b e3       	ldi	r24, 0x3B	; 59
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	2b e3       	ldi	r18, 0x3B	; 59
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	f9 01       	movw	r30, r18
    1a20:	30 81       	ld	r19, Z
    1a22:	29 81       	ldd	r18, Y+1	; 0x01
    1a24:	20 7f       	andi	r18, 0xF0	; 240
    1a26:	23 2b       	or	r18, r19
    1a28:	28 60       	ori	r18, 0x08	; 8
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	20 83       	st	Z, r18
    pos_pulse_E();
    1a2e:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZL11pos_pulse_Ev>
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0);
    1a32:	8b e3       	ldi	r24, 0x3B	; 59
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	2b e3       	ldi	r18, 0x3B	; 59
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	f9 01       	movw	r30, r18
    1a3c:	20 81       	ld	r18, Z
    1a3e:	21 70       	andi	r18, 0x01	; 1
    1a40:	fc 01       	movw	r30, r24
    1a42:	20 83       	st	Z, r18
    PORTA |= (data << 4) | 1<<_LCD_RS;
    1a44:	8b e3       	ldi	r24, 0x3B	; 59
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	2b e3       	ldi	r18, 0x3B	; 59
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	f9 01       	movw	r30, r18
    1a4e:	40 81       	ld	r20, Z
    1a50:	29 81       	ldd	r18, Y+1	; 0x01
    1a52:	22 2f       	mov	r18, r18
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	22 95       	swap	r18
    1a58:	32 95       	swap	r19
    1a5a:	30 7f       	andi	r19, 0xF0	; 240
    1a5c:	32 27       	eor	r19, r18
    1a5e:	20 7f       	andi	r18, 0xF0	; 240
    1a60:	32 27       	eor	r19, r18
    1a62:	24 2b       	or	r18, r20
    1a64:	28 60       	ori	r18, 0x08	; 8
    1a66:	fc 01       	movw	r30, r24
    1a68:	20 83       	st	Z, r18
    pos_pulse_E();
    1a6a:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZL11pos_pulse_Ev>
}
    1a6e:	0f 90       	pop	r0
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	08 95       	ret

00001a76 <_Z8lcd_initv>:

void lcd_init(void) {
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    DDRA |= 1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0;
    1a7e:	8a e3       	ldi	r24, 0x3A	; 58
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	2a e3       	ldi	r18, 0x3A	; 58
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	f9 01       	movw	r30, r18
    1a88:	20 81       	ld	r18, Z
    1a8a:	2e 6f       	ori	r18, 0xFE	; 254
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
    _lcd_delay_us(15000);
    1a90:	8e ef       	ldi	r24, 0xFE	; 254
    1a92:	95 e3       	ldi	r25, 0x35	; 53
    1a94:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_Z13_lcd_delay_16j>
    PORTA &= ~(1<<_LCD_E | 1<<_LCD_RW | 1<<_LCD_RS | 0xF0); 
    1a98:	8b e3       	ldi	r24, 0x3B	; 59
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	2b e3       	ldi	r18, 0x3B	; 59
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	f9 01       	movw	r30, r18
    1aa2:	20 81       	ld	r18, Z
    1aa4:	21 70       	andi	r18, 0x01	; 1
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	20 83       	st	Z, r18
    PORTA |= 0x30; // all control signals low RS=0 R/!W=0
    1aaa:	8b e3       	ldi	r24, 0x3B	; 59
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	2b e3       	ldi	r18, 0x3B	; 59
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	f9 01       	movw	r30, r18
    1ab4:	20 81       	ld	r18, Z
    1ab6:	20 63       	ori	r18, 0x30	; 48
    1ab8:	fc 01       	movw	r30, r24
    1aba:	20 83       	st	Z, r18
    pos_pulse_E(); 
    1abc:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZL11pos_pulse_Ev>
    _lcd_delay_us(4100);
    1ac0:	82 ec       	ldi	r24, 0xC2	; 194
    1ac2:	9e e0       	ldi	r25, 0x0E	; 14
    1ac4:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_Z13_lcd_delay_16j>
    pos_pulse_E(); 
    1ac8:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZL11pos_pulse_Ev>
    _lcd_delay_us(100);
    1acc:	8c e5       	ldi	r24, 0x5C	; 92
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_Z13_lcd_delay_16j>
    pos_pulse_E(); 
    1ad4:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZL11pos_pulse_Ev>
    _lcd_delay_us(100);
    1ad8:	8c e5       	ldi	r24, 0x5C	; 92
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_Z13_lcd_delay_16j>
    PORTA &= ~0x10; 
    1ae0:	8b e3       	ldi	r24, 0x3B	; 59
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	2b e3       	ldi	r18, 0x3B	; 59
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	f9 01       	movw	r30, r18
    1aea:	20 81       	ld	r18, Z
    1aec:	2f 7e       	andi	r18, 0xEF	; 239
    1aee:	fc 01       	movw	r30, r24
    1af0:	20 83       	st	Z, r18
    pos_pulse_E(); 
    1af2:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZL11pos_pulse_Ev>
    _lcd_delay_us(100);
    1af6:	8c e5       	ldi	r24, 0x5C	; 92
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_Z13_lcd_delay_16j>
    lcd_write_command(0x28);
    1afe:	88 e2       	ldi	r24, 0x28	; 40
    1b00:	0e 94 a7 0c 	call	0x194e	; 0x194e <_Z17lcd_write_commandh>
    lcd_write_command(0x06);
    1b04:	86 e0       	ldi	r24, 0x06	; 6
    1b06:	0e 94 a7 0c 	call	0x194e	; 0x194e <_Z17lcd_write_commandh>
    lcd_cls();
    1b0a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_Z7lcd_clsv>
    lcd_cursor(true, true);
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_Z10lcd_cursorbb>
}
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	08 95       	ret

00001b1c <_Z7lcd_clsv>:

void lcd_cls(void) {
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    lcd_write_command(0x01);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	0e 94 a7 0c 	call	0x194e	; 0x194e <_Z17lcd_write_commandh>
}
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	08 95       	ret

00001b30 <_Z8lcd_homev>:

void lcd_home(void) {
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    lcd_write_command(0x02);
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	0e 94 a7 0c 	call	0x194e	; 0x194e <_Z17lcd_write_commandh>
}
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	08 95       	ret

00001b44 <_Z10lcd_cursorbb>:

void lcd_cursor(bool cursorOn, bool cursorBlinks) { 
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <_Z10lcd_cursorbb+0x6>
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	6a 83       	std	Y+2, r22	; 0x02
    lcd_write_command(0x0C + (cursorOn ? 0x02 : 0) + (cursorBlinks ? 0x01 : 0));
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	88 23       	and	r24, r24
    1b56:	11 f0       	breq	.+4      	; 0x1b5c <_Z10lcd_cursorbb+0x18>
    1b58:	9e e0       	ldi	r25, 0x0E	; 14
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <_Z10lcd_cursorbb+0x1a>
    1b5c:	9c e0       	ldi	r25, 0x0C	; 12
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	88 23       	and	r24, r24
    1b62:	11 f0       	breq	.+4      	; 0x1b68 <_Z10lcd_cursorbb+0x24>
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <_Z10lcd_cursorbb+0x26>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	89 0f       	add	r24, r25
    1b6c:	0e 94 a7 0c 	call	0x194e	; 0x194e <_Z17lcd_write_commandh>
}
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	08 95       	ret

00001b7a <_Z8lcd_gotohh>:

void lcd_goto(uint8_t row, uint8_t column) {
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <_Z8lcd_gotohh+0x6>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	6a 83       	std	Y+2, r22	; 0x02
    if (row < 2 && column < 16) {
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	82 30       	cpi	r24, 0x02	; 2
    1b8c:	80 f4       	brcc	.+32     	; 0x1bae <_Z8lcd_gotohh+0x34>
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	80 31       	cpi	r24, 0x10	; 16
    1b92:	68 f4       	brcc	.+26     	; 0x1bae <_Z8lcd_gotohh+0x34>
        lcd_write_command(0x80 + row * 0x40 + column);
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	88 2f       	mov	r24, r24
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 96       	adiw	r24, 0x02	; 2
    1b9c:	98 2f       	mov	r25, r24
    1b9e:	92 95       	swap	r25
    1ba0:	99 0f       	add	r25, r25
    1ba2:	99 0f       	add	r25, r25
    1ba4:	90 7c       	andi	r25, 0xC0	; 192
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	89 0f       	add	r24, r25
    1baa:	0e 94 a7 0c 	call	0x194e	; 0x194e <_Z17lcd_write_commandh>
    }
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	08 95       	ret

00001bb8 <_Z11lcd_get_rowv>:

uint8_t lcd_get_row(void) {
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    wait();
    1bc0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <_ZL4waitv>
    return lcd_read_command() & 1<<6 ? 1 : 0;
    1bc4:	0e 94 01 0c 	call	0x1802	; 0x1802 <_Z16lcd_read_commandv>
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	80 74       	andi	r24, 0x40	; 64
    1bce:	99 27       	eor	r25, r25
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	11 f0       	breq	.+4      	; 0x1bd8 <_Z11lcd_get_rowv+0x20>
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <_Z11lcd_get_rowv+0x22>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
}
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	08 95       	ret

00001be0 <_Z14lcd_get_columnv>:

uint8_t lcd_get_column(void) {
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    wait();
    1be8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <_ZL4waitv>
    return lcd_read_command() & 0x3f;
    1bec:	0e 94 01 0c 	call	0x1802	; 0x1802 <_Z16lcd_read_commandv>
    1bf0:	8f 73       	andi	r24, 0x3F	; 63
}
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	08 95       	ret

00001bf8 <_Z8lcd_putcc>:

void lcd_putc(char data) { 
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	1f 92       	push	r1
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	89 83       	std	Y+1, r24	; 0x01
    lcd_write_data(data);
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <_Z14lcd_write_datah>
}
    1c0a:	0f 90       	pop	r0
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	08 95       	ret

00001c12 <_Z8lcd_putsPc>:

void lcd_puts(char *s) {
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <_Z8lcd_putsPc+0x6>
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	9a 83       	std	Y+2, r25	; 0x02
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    while (*s) {
    1c20:	0b c0       	rjmp	.+22     	; 0x1c38 <_Z8lcd_putsPc+0x26>
        lcd_putc(*s++);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	9c 01       	movw	r18, r24
    1c28:	2f 5f       	subi	r18, 0xFF	; 255
    1c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2c:	3a 83       	std	Y+2, r19	; 0x02
    1c2e:	29 83       	std	Y+1, r18	; 0x01
    1c30:	fc 01       	movw	r30, r24
    1c32:	80 81       	ld	r24, Z
    1c34:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z8lcd_putcc>
void lcd_putc(char data) { 
    lcd_write_data(data);
}

void lcd_puts(char *s) {
    while (*s) {
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	80 81       	ld	r24, Z
    1c40:	88 23       	and	r24, r24
    1c42:	79 f7       	brne	.-34     	; 0x1c22 <_Z8lcd_putsPc+0x10>
        lcd_putc(*s++);
    }
}
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <__cmpsf2>:
    1c4e:	2f d0       	rcall	.+94     	; 0x1cae <__fp_cmp>
    1c50:	08 f4       	brcc	.+2      	; 0x1c54 <__cmpsf2+0x6>
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	08 95       	ret

00001c56 <__fixunssfsi>:
    1c56:	57 d0       	rcall	.+174    	; 0x1d06 <__fp_splitA>
    1c58:	88 f0       	brcs	.+34     	; 0x1c7c <__fixunssfsi+0x26>
    1c5a:	9f 57       	subi	r25, 0x7F	; 127
    1c5c:	90 f0       	brcs	.+36     	; 0x1c82 <__fixunssfsi+0x2c>
    1c5e:	b9 2f       	mov	r27, r25
    1c60:	99 27       	eor	r25, r25
    1c62:	b7 51       	subi	r27, 0x17	; 23
    1c64:	a0 f0       	brcs	.+40     	; 0x1c8e <__fixunssfsi+0x38>
    1c66:	d1 f0       	breq	.+52     	; 0x1c9c <__fixunssfsi+0x46>
    1c68:	66 0f       	add	r22, r22
    1c6a:	77 1f       	adc	r23, r23
    1c6c:	88 1f       	adc	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	1a f0       	brmi	.+6      	; 0x1c78 <__fixunssfsi+0x22>
    1c72:	ba 95       	dec	r27
    1c74:	c9 f7       	brne	.-14     	; 0x1c68 <__fixunssfsi+0x12>
    1c76:	12 c0       	rjmp	.+36     	; 0x1c9c <__fixunssfsi+0x46>
    1c78:	b1 30       	cpi	r27, 0x01	; 1
    1c7a:	81 f0       	breq	.+32     	; 0x1c9c <__fixunssfsi+0x46>
    1c7c:	5e d0       	rcall	.+188    	; 0x1d3a <__fp_zero>
    1c7e:	b1 e0       	ldi	r27, 0x01	; 1
    1c80:	08 95       	ret
    1c82:	5b c0       	rjmp	.+182    	; 0x1d3a <__fp_zero>
    1c84:	67 2f       	mov	r22, r23
    1c86:	78 2f       	mov	r23, r24
    1c88:	88 27       	eor	r24, r24
    1c8a:	b8 5f       	subi	r27, 0xF8	; 248
    1c8c:	39 f0       	breq	.+14     	; 0x1c9c <__fixunssfsi+0x46>
    1c8e:	b9 3f       	cpi	r27, 0xF9	; 249
    1c90:	cc f3       	brlt	.-14     	; 0x1c84 <__fixunssfsi+0x2e>
    1c92:	86 95       	lsr	r24
    1c94:	77 95       	ror	r23
    1c96:	67 95       	ror	r22
    1c98:	b3 95       	inc	r27
    1c9a:	d9 f7       	brne	.-10     	; 0x1c92 <__fixunssfsi+0x3c>
    1c9c:	3e f4       	brtc	.+14     	; 0x1cac <__fixunssfsi+0x56>
    1c9e:	90 95       	com	r25
    1ca0:	80 95       	com	r24
    1ca2:	70 95       	com	r23
    1ca4:	61 95       	neg	r22
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	8f 4f       	sbci	r24, 0xFF	; 255
    1caa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cac:	08 95       	ret

00001cae <__fp_cmp>:
    1cae:	99 0f       	add	r25, r25
    1cb0:	00 08       	sbc	r0, r0
    1cb2:	55 0f       	add	r21, r21
    1cb4:	aa 0b       	sbc	r26, r26
    1cb6:	e0 e8       	ldi	r30, 0x80	; 128
    1cb8:	fe ef       	ldi	r31, 0xFE	; 254
    1cba:	16 16       	cp	r1, r22
    1cbc:	17 06       	cpc	r1, r23
    1cbe:	e8 07       	cpc	r30, r24
    1cc0:	f9 07       	cpc	r31, r25
    1cc2:	c0 f0       	brcs	.+48     	; 0x1cf4 <__fp_cmp+0x46>
    1cc4:	12 16       	cp	r1, r18
    1cc6:	13 06       	cpc	r1, r19
    1cc8:	e4 07       	cpc	r30, r20
    1cca:	f5 07       	cpc	r31, r21
    1ccc:	98 f0       	brcs	.+38     	; 0x1cf4 <__fp_cmp+0x46>
    1cce:	62 1b       	sub	r22, r18
    1cd0:	73 0b       	sbc	r23, r19
    1cd2:	84 0b       	sbc	r24, r20
    1cd4:	95 0b       	sbc	r25, r21
    1cd6:	39 f4       	brne	.+14     	; 0x1ce6 <__fp_cmp+0x38>
    1cd8:	0a 26       	eor	r0, r26
    1cda:	61 f0       	breq	.+24     	; 0x1cf4 <__fp_cmp+0x46>
    1cdc:	23 2b       	or	r18, r19
    1cde:	24 2b       	or	r18, r20
    1ce0:	25 2b       	or	r18, r21
    1ce2:	21 f4       	brne	.+8      	; 0x1cec <__fp_cmp+0x3e>
    1ce4:	08 95       	ret
    1ce6:	0a 26       	eor	r0, r26
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <__fp_cmp+0x3e>
    1cea:	a1 40       	sbci	r26, 0x01	; 1
    1cec:	a6 95       	lsr	r26
    1cee:	8f ef       	ldi	r24, 0xFF	; 255
    1cf0:	81 1d       	adc	r24, r1
    1cf2:	81 1d       	adc	r24, r1
    1cf4:	08 95       	ret

00001cf6 <__fp_split3>:
    1cf6:	57 fd       	sbrc	r21, 7
    1cf8:	90 58       	subi	r25, 0x80	; 128
    1cfa:	44 0f       	add	r20, r20
    1cfc:	55 1f       	adc	r21, r21
    1cfe:	59 f0       	breq	.+22     	; 0x1d16 <__fp_splitA+0x10>
    1d00:	5f 3f       	cpi	r21, 0xFF	; 255
    1d02:	71 f0       	breq	.+28     	; 0x1d20 <__fp_splitA+0x1a>
    1d04:	47 95       	ror	r20

00001d06 <__fp_splitA>:
    1d06:	88 0f       	add	r24, r24
    1d08:	97 fb       	bst	r25, 7
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	61 f0       	breq	.+24     	; 0x1d26 <__fp_splitA+0x20>
    1d0e:	9f 3f       	cpi	r25, 0xFF	; 255
    1d10:	79 f0       	breq	.+30     	; 0x1d30 <__fp_splitA+0x2a>
    1d12:	87 95       	ror	r24
    1d14:	08 95       	ret
    1d16:	12 16       	cp	r1, r18
    1d18:	13 06       	cpc	r1, r19
    1d1a:	14 06       	cpc	r1, r20
    1d1c:	55 1f       	adc	r21, r21
    1d1e:	f2 cf       	rjmp	.-28     	; 0x1d04 <__fp_split3+0xe>
    1d20:	46 95       	lsr	r20
    1d22:	f1 df       	rcall	.-30     	; 0x1d06 <__fp_splitA>
    1d24:	08 c0       	rjmp	.+16     	; 0x1d36 <__fp_splitA+0x30>
    1d26:	16 16       	cp	r1, r22
    1d28:	17 06       	cpc	r1, r23
    1d2a:	18 06       	cpc	r1, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	f1 cf       	rjmp	.-30     	; 0x1d12 <__fp_splitA+0xc>
    1d30:	86 95       	lsr	r24
    1d32:	71 05       	cpc	r23, r1
    1d34:	61 05       	cpc	r22, r1
    1d36:	08 94       	sec
    1d38:	08 95       	ret

00001d3a <__fp_zero>:
    1d3a:	e8 94       	clt

00001d3c <__fp_szero>:
    1d3c:	bb 27       	eor	r27, r27
    1d3e:	66 27       	eor	r22, r22
    1d40:	77 27       	eor	r23, r23
    1d42:	cb 01       	movw	r24, r22
    1d44:	97 f9       	bld	r25, 7
    1d46:	08 95       	ret

00001d48 <__gesf2>:
    1d48:	b2 df       	rcall	.-156    	; 0x1cae <__fp_cmp>
    1d4a:	08 f4       	brcc	.+2      	; 0x1d4e <__gesf2+0x6>
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	08 95       	ret

00001d50 <__mulsf3>:
    1d50:	0b d0       	rcall	.+22     	; 0x1d68 <__mulsf3x>
    1d52:	78 c0       	rjmp	.+240    	; 0x1e44 <__fp_round>
    1d54:	69 d0       	rcall	.+210    	; 0x1e28 <__fp_pscA>
    1d56:	28 f0       	brcs	.+10     	; 0x1d62 <__mulsf3+0x12>
    1d58:	6e d0       	rcall	.+220    	; 0x1e36 <__fp_pscB>
    1d5a:	18 f0       	brcs	.+6      	; 0x1d62 <__mulsf3+0x12>
    1d5c:	95 23       	and	r25, r21
    1d5e:	09 f0       	breq	.+2      	; 0x1d62 <__mulsf3+0x12>
    1d60:	5a c0       	rjmp	.+180    	; 0x1e16 <__fp_inf>
    1d62:	5f c0       	rjmp	.+190    	; 0x1e22 <__fp_nan>
    1d64:	11 24       	eor	r1, r1
    1d66:	ea cf       	rjmp	.-44     	; 0x1d3c <__fp_szero>

00001d68 <__mulsf3x>:
    1d68:	c6 df       	rcall	.-116    	; 0x1cf6 <__fp_split3>
    1d6a:	a0 f3       	brcs	.-24     	; 0x1d54 <__mulsf3+0x4>

00001d6c <__mulsf3_pse>:
    1d6c:	95 9f       	mul	r25, r21
    1d6e:	d1 f3       	breq	.-12     	; 0x1d64 <__mulsf3+0x14>
    1d70:	95 0f       	add	r25, r21
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	55 1f       	adc	r21, r21
    1d76:	62 9f       	mul	r22, r18
    1d78:	f0 01       	movw	r30, r0
    1d7a:	72 9f       	mul	r23, r18
    1d7c:	bb 27       	eor	r27, r27
    1d7e:	f0 0d       	add	r31, r0
    1d80:	b1 1d       	adc	r27, r1
    1d82:	63 9f       	mul	r22, r19
    1d84:	aa 27       	eor	r26, r26
    1d86:	f0 0d       	add	r31, r0
    1d88:	b1 1d       	adc	r27, r1
    1d8a:	aa 1f       	adc	r26, r26
    1d8c:	64 9f       	mul	r22, r20
    1d8e:	66 27       	eor	r22, r22
    1d90:	b0 0d       	add	r27, r0
    1d92:	a1 1d       	adc	r26, r1
    1d94:	66 1f       	adc	r22, r22
    1d96:	82 9f       	mul	r24, r18
    1d98:	22 27       	eor	r18, r18
    1d9a:	b0 0d       	add	r27, r0
    1d9c:	a1 1d       	adc	r26, r1
    1d9e:	62 1f       	adc	r22, r18
    1da0:	73 9f       	mul	r23, r19
    1da2:	b0 0d       	add	r27, r0
    1da4:	a1 1d       	adc	r26, r1
    1da6:	62 1f       	adc	r22, r18
    1da8:	83 9f       	mul	r24, r19
    1daa:	a0 0d       	add	r26, r0
    1dac:	61 1d       	adc	r22, r1
    1dae:	22 1f       	adc	r18, r18
    1db0:	74 9f       	mul	r23, r20
    1db2:	33 27       	eor	r19, r19
    1db4:	a0 0d       	add	r26, r0
    1db6:	61 1d       	adc	r22, r1
    1db8:	23 1f       	adc	r18, r19
    1dba:	84 9f       	mul	r24, r20
    1dbc:	60 0d       	add	r22, r0
    1dbe:	21 1d       	adc	r18, r1
    1dc0:	82 2f       	mov	r24, r18
    1dc2:	76 2f       	mov	r23, r22
    1dc4:	6a 2f       	mov	r22, r26
    1dc6:	11 24       	eor	r1, r1
    1dc8:	9f 57       	subi	r25, 0x7F	; 127
    1dca:	50 40       	sbci	r21, 0x00	; 0
    1dcc:	8a f0       	brmi	.+34     	; 0x1df0 <__mulsf3_pse+0x84>
    1dce:	e1 f0       	breq	.+56     	; 0x1e08 <__mulsf3_pse+0x9c>
    1dd0:	88 23       	and	r24, r24
    1dd2:	4a f0       	brmi	.+18     	; 0x1de6 <__mulsf3_pse+0x7a>
    1dd4:	ee 0f       	add	r30, r30
    1dd6:	ff 1f       	adc	r31, r31
    1dd8:	bb 1f       	adc	r27, r27
    1dda:	66 1f       	adc	r22, r22
    1ddc:	77 1f       	adc	r23, r23
    1dde:	88 1f       	adc	r24, r24
    1de0:	91 50       	subi	r25, 0x01	; 1
    1de2:	50 40       	sbci	r21, 0x00	; 0
    1de4:	a9 f7       	brne	.-22     	; 0x1dd0 <__mulsf3_pse+0x64>
    1de6:	9e 3f       	cpi	r25, 0xFE	; 254
    1de8:	51 05       	cpc	r21, r1
    1dea:	70 f0       	brcs	.+28     	; 0x1e08 <__mulsf3_pse+0x9c>
    1dec:	14 c0       	rjmp	.+40     	; 0x1e16 <__fp_inf>
    1dee:	a6 cf       	rjmp	.-180    	; 0x1d3c <__fp_szero>
    1df0:	5f 3f       	cpi	r21, 0xFF	; 255
    1df2:	ec f3       	brlt	.-6      	; 0x1dee <__mulsf3_pse+0x82>
    1df4:	98 3e       	cpi	r25, 0xE8	; 232
    1df6:	dc f3       	brlt	.-10     	; 0x1dee <__mulsf3_pse+0x82>
    1df8:	86 95       	lsr	r24
    1dfa:	77 95       	ror	r23
    1dfc:	67 95       	ror	r22
    1dfe:	b7 95       	ror	r27
    1e00:	f7 95       	ror	r31
    1e02:	e7 95       	ror	r30
    1e04:	9f 5f       	subi	r25, 0xFF	; 255
    1e06:	c1 f7       	brne	.-16     	; 0x1df8 <__mulsf3_pse+0x8c>
    1e08:	fe 2b       	or	r31, r30
    1e0a:	88 0f       	add	r24, r24
    1e0c:	91 1d       	adc	r25, r1
    1e0e:	96 95       	lsr	r25
    1e10:	87 95       	ror	r24
    1e12:	97 f9       	bld	r25, 7
    1e14:	08 95       	ret

00001e16 <__fp_inf>:
    1e16:	97 f9       	bld	r25, 7
    1e18:	9f 67       	ori	r25, 0x7F	; 127
    1e1a:	80 e8       	ldi	r24, 0x80	; 128
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	60 e0       	ldi	r22, 0x00	; 0
    1e20:	08 95       	ret

00001e22 <__fp_nan>:
    1e22:	9f ef       	ldi	r25, 0xFF	; 255
    1e24:	80 ec       	ldi	r24, 0xC0	; 192
    1e26:	08 95       	ret

00001e28 <__fp_pscA>:
    1e28:	00 24       	eor	r0, r0
    1e2a:	0a 94       	dec	r0
    1e2c:	16 16       	cp	r1, r22
    1e2e:	17 06       	cpc	r1, r23
    1e30:	18 06       	cpc	r1, r24
    1e32:	09 06       	cpc	r0, r25
    1e34:	08 95       	ret

00001e36 <__fp_pscB>:
    1e36:	00 24       	eor	r0, r0
    1e38:	0a 94       	dec	r0
    1e3a:	12 16       	cp	r1, r18
    1e3c:	13 06       	cpc	r1, r19
    1e3e:	14 06       	cpc	r1, r20
    1e40:	05 06       	cpc	r0, r21
    1e42:	08 95       	ret

00001e44 <__fp_round>:
    1e44:	09 2e       	mov	r0, r25
    1e46:	03 94       	inc	r0
    1e48:	00 0c       	add	r0, r0
    1e4a:	11 f4       	brne	.+4      	; 0x1e50 <__fp_round+0xc>
    1e4c:	88 23       	and	r24, r24
    1e4e:	52 f0       	brmi	.+20     	; 0x1e64 <__fp_round+0x20>
    1e50:	bb 0f       	add	r27, r27
    1e52:	40 f4       	brcc	.+16     	; 0x1e64 <__fp_round+0x20>
    1e54:	bf 2b       	or	r27, r31
    1e56:	11 f4       	brne	.+4      	; 0x1e5c <__fp_round+0x18>
    1e58:	60 ff       	sbrs	r22, 0
    1e5a:	04 c0       	rjmp	.+8      	; 0x1e64 <__fp_round+0x20>
    1e5c:	6f 5f       	subi	r22, 0xFF	; 255
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	8f 4f       	sbci	r24, 0xFF	; 255
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	08 95       	ret

00001e66 <__tablejump2__>:
    1e66:	ee 0f       	add	r30, r30
    1e68:	ff 1f       	adc	r31, r31

00001e6a <__tablejump__>:
    1e6a:	05 90       	lpm	r0, Z+
    1e6c:	f4 91       	lpm	r31, Z
    1e6e:	e0 2d       	mov	r30, r0
    1e70:	09 94       	ijmp

00001e72 <snprintf>:
    1e72:	ae e0       	ldi	r26, 0x0E	; 14
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	ef e3       	ldi	r30, 0x3F	; 63
    1e78:	ff e0       	ldi	r31, 0x0F	; 15
    1e7a:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__prologue_saves__+0x1c>
    1e7e:	0d 89       	ldd	r16, Y+21	; 0x15
    1e80:	1e 89       	ldd	r17, Y+22	; 0x16
    1e82:	8f 89       	ldd	r24, Y+23	; 0x17
    1e84:	98 8d       	ldd	r25, Y+24	; 0x18
    1e86:	26 e0       	ldi	r18, 0x06	; 6
    1e88:	2c 83       	std	Y+4, r18	; 0x04
    1e8a:	1a 83       	std	Y+2, r17	; 0x02
    1e8c:	09 83       	std	Y+1, r16	; 0x01
    1e8e:	97 ff       	sbrs	r25, 7
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <snprintf+0x24>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e8       	ldi	r25, 0x80	; 128
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	9e 83       	std	Y+6, r25	; 0x06
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	ae 01       	movw	r20, r28
    1e9e:	45 5e       	subi	r20, 0xE5	; 229
    1ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ea4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <vfprintf>
    1eae:	4d 81       	ldd	r20, Y+5	; 0x05
    1eb0:	5e 81       	ldd	r21, Y+6	; 0x06
    1eb2:	57 fd       	sbrc	r21, 7
    1eb4:	0a c0       	rjmp	.+20     	; 0x1eca <snprintf+0x58>
    1eb6:	2f 81       	ldd	r18, Y+7	; 0x07
    1eb8:	38 85       	ldd	r19, Y+8	; 0x08
    1eba:	42 17       	cp	r20, r18
    1ebc:	53 07       	cpc	r21, r19
    1ebe:	0c f4       	brge	.+2      	; 0x1ec2 <snprintf+0x50>
    1ec0:	9a 01       	movw	r18, r20
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	e2 0f       	add	r30, r18
    1ec6:	f3 1f       	adc	r31, r19
    1ec8:	10 82       	st	Z, r1
    1eca:	2e 96       	adiw	r28, 0x0e	; 14
    1ecc:	e4 e0       	ldi	r30, 0x04	; 4
    1ece:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__epilogue_restores__+0x1c>

00001ed2 <vfprintf>:
    1ed2:	ac e0       	ldi	r26, 0x0C	; 12
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	ef e6       	ldi	r30, 0x6F	; 111
    1ed8:	ff e0       	ldi	r31, 0x0F	; 15
    1eda:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__prologue_saves__>
    1ede:	7c 01       	movw	r14, r24
    1ee0:	6b 01       	movw	r12, r22
    1ee2:	8a 01       	movw	r16, r20
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	17 82       	std	Z+7, r1	; 0x07
    1ee8:	16 82       	std	Z+6, r1	; 0x06
    1eea:	83 81       	ldd	r24, Z+3	; 0x03
    1eec:	81 ff       	sbrs	r24, 1
    1eee:	bd c1       	rjmp	.+890    	; 0x226a <vfprintf+0x398>
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	01 96       	adiw	r24, 0x01	; 1
    1ef4:	4c 01       	movw	r8, r24
    1ef6:	f7 01       	movw	r30, r14
    1ef8:	93 81       	ldd	r25, Z+3	; 0x03
    1efa:	f6 01       	movw	r30, r12
    1efc:	93 fd       	sbrc	r25, 3
    1efe:	85 91       	lpm	r24, Z+
    1f00:	93 ff       	sbrs	r25, 3
    1f02:	81 91       	ld	r24, Z+
    1f04:	6f 01       	movw	r12, r30
    1f06:	88 23       	and	r24, r24
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <vfprintf+0x3a>
    1f0a:	ab c1       	rjmp	.+854    	; 0x2262 <vfprintf+0x390>
    1f0c:	85 32       	cpi	r24, 0x25	; 37
    1f0e:	39 f4       	brne	.+14     	; 0x1f1e <vfprintf+0x4c>
    1f10:	93 fd       	sbrc	r25, 3
    1f12:	85 91       	lpm	r24, Z+
    1f14:	93 ff       	sbrs	r25, 3
    1f16:	81 91       	ld	r24, Z+
    1f18:	6f 01       	movw	r12, r30
    1f1a:	85 32       	cpi	r24, 0x25	; 37
    1f1c:	29 f4       	brne	.+10     	; 0x1f28 <vfprintf+0x56>
    1f1e:	b7 01       	movw	r22, r14
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    1f26:	e7 cf       	rjmp	.-50     	; 0x1ef6 <vfprintf+0x24>
    1f28:	51 2c       	mov	r5, r1
    1f2a:	31 2c       	mov	r3, r1
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	20 32       	cpi	r18, 0x20	; 32
    1f30:	a0 f4       	brcc	.+40     	; 0x1f5a <vfprintf+0x88>
    1f32:	8b 32       	cpi	r24, 0x2B	; 43
    1f34:	69 f0       	breq	.+26     	; 0x1f50 <vfprintf+0x7e>
    1f36:	30 f4       	brcc	.+12     	; 0x1f44 <vfprintf+0x72>
    1f38:	80 32       	cpi	r24, 0x20	; 32
    1f3a:	59 f0       	breq	.+22     	; 0x1f52 <vfprintf+0x80>
    1f3c:	83 32       	cpi	r24, 0x23	; 35
    1f3e:	69 f4       	brne	.+26     	; 0x1f5a <vfprintf+0x88>
    1f40:	20 61       	ori	r18, 0x10	; 16
    1f42:	2c c0       	rjmp	.+88     	; 0x1f9c <vfprintf+0xca>
    1f44:	8d 32       	cpi	r24, 0x2D	; 45
    1f46:	39 f0       	breq	.+14     	; 0x1f56 <vfprintf+0x84>
    1f48:	80 33       	cpi	r24, 0x30	; 48
    1f4a:	39 f4       	brne	.+14     	; 0x1f5a <vfprintf+0x88>
    1f4c:	21 60       	ori	r18, 0x01	; 1
    1f4e:	26 c0       	rjmp	.+76     	; 0x1f9c <vfprintf+0xca>
    1f50:	22 60       	ori	r18, 0x02	; 2
    1f52:	24 60       	ori	r18, 0x04	; 4
    1f54:	23 c0       	rjmp	.+70     	; 0x1f9c <vfprintf+0xca>
    1f56:	28 60       	ori	r18, 0x08	; 8
    1f58:	21 c0       	rjmp	.+66     	; 0x1f9c <vfprintf+0xca>
    1f5a:	27 fd       	sbrc	r18, 7
    1f5c:	27 c0       	rjmp	.+78     	; 0x1fac <vfprintf+0xda>
    1f5e:	30 ed       	ldi	r19, 0xD0	; 208
    1f60:	38 0f       	add	r19, r24
    1f62:	3a 30       	cpi	r19, 0x0A	; 10
    1f64:	78 f4       	brcc	.+30     	; 0x1f84 <vfprintf+0xb2>
    1f66:	26 ff       	sbrs	r18, 6
    1f68:	06 c0       	rjmp	.+12     	; 0x1f76 <vfprintf+0xa4>
    1f6a:	fa e0       	ldi	r31, 0x0A	; 10
    1f6c:	5f 9e       	mul	r5, r31
    1f6e:	30 0d       	add	r19, r0
    1f70:	11 24       	eor	r1, r1
    1f72:	53 2e       	mov	r5, r19
    1f74:	13 c0       	rjmp	.+38     	; 0x1f9c <vfprintf+0xca>
    1f76:	8a e0       	ldi	r24, 0x0A	; 10
    1f78:	38 9e       	mul	r3, r24
    1f7a:	30 0d       	add	r19, r0
    1f7c:	11 24       	eor	r1, r1
    1f7e:	33 2e       	mov	r3, r19
    1f80:	20 62       	ori	r18, 0x20	; 32
    1f82:	0c c0       	rjmp	.+24     	; 0x1f9c <vfprintf+0xca>
    1f84:	8e 32       	cpi	r24, 0x2E	; 46
    1f86:	21 f4       	brne	.+8      	; 0x1f90 <vfprintf+0xbe>
    1f88:	26 fd       	sbrc	r18, 6
    1f8a:	6b c1       	rjmp	.+726    	; 0x2262 <vfprintf+0x390>
    1f8c:	20 64       	ori	r18, 0x40	; 64
    1f8e:	06 c0       	rjmp	.+12     	; 0x1f9c <vfprintf+0xca>
    1f90:	8c 36       	cpi	r24, 0x6C	; 108
    1f92:	11 f4       	brne	.+4      	; 0x1f98 <vfprintf+0xc6>
    1f94:	20 68       	ori	r18, 0x80	; 128
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <vfprintf+0xca>
    1f98:	88 36       	cpi	r24, 0x68	; 104
    1f9a:	41 f4       	brne	.+16     	; 0x1fac <vfprintf+0xda>
    1f9c:	f6 01       	movw	r30, r12
    1f9e:	93 fd       	sbrc	r25, 3
    1fa0:	85 91       	lpm	r24, Z+
    1fa2:	93 ff       	sbrs	r25, 3
    1fa4:	81 91       	ld	r24, Z+
    1fa6:	6f 01       	movw	r12, r30
    1fa8:	81 11       	cpse	r24, r1
    1faa:	c1 cf       	rjmp	.-126    	; 0x1f2e <vfprintf+0x5c>
    1fac:	98 2f       	mov	r25, r24
    1fae:	9f 7d       	andi	r25, 0xDF	; 223
    1fb0:	95 54       	subi	r25, 0x45	; 69
    1fb2:	93 30       	cpi	r25, 0x03	; 3
    1fb4:	28 f4       	brcc	.+10     	; 0x1fc0 <vfprintf+0xee>
    1fb6:	0c 5f       	subi	r16, 0xFC	; 252
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	ff e3       	ldi	r31, 0x3F	; 63
    1fbc:	f9 83       	std	Y+1, r31	; 0x01
    1fbe:	0d c0       	rjmp	.+26     	; 0x1fda <vfprintf+0x108>
    1fc0:	83 36       	cpi	r24, 0x63	; 99
    1fc2:	31 f0       	breq	.+12     	; 0x1fd0 <vfprintf+0xfe>
    1fc4:	83 37       	cpi	r24, 0x73	; 115
    1fc6:	71 f0       	breq	.+28     	; 0x1fe4 <vfprintf+0x112>
    1fc8:	83 35       	cpi	r24, 0x53	; 83
    1fca:	09 f0       	breq	.+2      	; 0x1fce <vfprintf+0xfc>
    1fcc:	5b c0       	rjmp	.+182    	; 0x2084 <vfprintf+0x1b2>
    1fce:	22 c0       	rjmp	.+68     	; 0x2014 <vfprintf+0x142>
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	80 81       	ld	r24, Z
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	0e 5f       	subi	r16, 0xFE	; 254
    1fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fda:	44 24       	eor	r4, r4
    1fdc:	43 94       	inc	r4
    1fde:	51 2c       	mov	r5, r1
    1fe0:	54 01       	movw	r10, r8
    1fe2:	15 c0       	rjmp	.+42     	; 0x200e <vfprintf+0x13c>
    1fe4:	38 01       	movw	r6, r16
    1fe6:	f2 e0       	ldi	r31, 0x02	; 2
    1fe8:	6f 0e       	add	r6, r31
    1fea:	71 1c       	adc	r7, r1
    1fec:	f8 01       	movw	r30, r16
    1fee:	a0 80       	ld	r10, Z
    1ff0:	b1 80       	ldd	r11, Z+1	; 0x01
    1ff2:	26 ff       	sbrs	r18, 6
    1ff4:	03 c0       	rjmp	.+6      	; 0x1ffc <vfprintf+0x12a>
    1ff6:	65 2d       	mov	r22, r5
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <vfprintf+0x12e>
    1ffc:	6f ef       	ldi	r22, 0xFF	; 255
    1ffe:	7f ef       	ldi	r23, 0xFF	; 255
    2000:	c5 01       	movw	r24, r10
    2002:	2c 87       	std	Y+12, r18	; 0x0c
    2004:	0e 94 46 11 	call	0x228c	; 0x228c <strnlen>
    2008:	2c 01       	movw	r4, r24
    200a:	83 01       	movw	r16, r6
    200c:	2c 85       	ldd	r18, Y+12	; 0x0c
    200e:	2f 77       	andi	r18, 0x7F	; 127
    2010:	22 2e       	mov	r2, r18
    2012:	17 c0       	rjmp	.+46     	; 0x2042 <vfprintf+0x170>
    2014:	38 01       	movw	r6, r16
    2016:	f2 e0       	ldi	r31, 0x02	; 2
    2018:	6f 0e       	add	r6, r31
    201a:	71 1c       	adc	r7, r1
    201c:	f8 01       	movw	r30, r16
    201e:	a0 80       	ld	r10, Z
    2020:	b1 80       	ldd	r11, Z+1	; 0x01
    2022:	26 ff       	sbrs	r18, 6
    2024:	03 c0       	rjmp	.+6      	; 0x202c <vfprintf+0x15a>
    2026:	65 2d       	mov	r22, r5
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <vfprintf+0x15e>
    202c:	6f ef       	ldi	r22, 0xFF	; 255
    202e:	7f ef       	ldi	r23, 0xFF	; 255
    2030:	c5 01       	movw	r24, r10
    2032:	2c 87       	std	Y+12, r18	; 0x0c
    2034:	0e 94 3b 11 	call	0x2276	; 0x2276 <strnlen_P>
    2038:	2c 01       	movw	r4, r24
    203a:	2c 85       	ldd	r18, Y+12	; 0x0c
    203c:	20 68       	ori	r18, 0x80	; 128
    203e:	22 2e       	mov	r2, r18
    2040:	83 01       	movw	r16, r6
    2042:	23 fc       	sbrc	r2, 3
    2044:	1b c0       	rjmp	.+54     	; 0x207c <vfprintf+0x1aa>
    2046:	83 2d       	mov	r24, r3
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	48 16       	cp	r4, r24
    204c:	59 06       	cpc	r5, r25
    204e:	b0 f4       	brcc	.+44     	; 0x207c <vfprintf+0x1aa>
    2050:	b7 01       	movw	r22, r14
    2052:	80 e2       	ldi	r24, 0x20	; 32
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    205a:	3a 94       	dec	r3
    205c:	f4 cf       	rjmp	.-24     	; 0x2046 <vfprintf+0x174>
    205e:	f5 01       	movw	r30, r10
    2060:	27 fc       	sbrc	r2, 7
    2062:	85 91       	lpm	r24, Z+
    2064:	27 fe       	sbrs	r2, 7
    2066:	81 91       	ld	r24, Z+
    2068:	5f 01       	movw	r10, r30
    206a:	b7 01       	movw	r22, r14
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    2072:	31 10       	cpse	r3, r1
    2074:	3a 94       	dec	r3
    2076:	f1 e0       	ldi	r31, 0x01	; 1
    2078:	4f 1a       	sub	r4, r31
    207a:	51 08       	sbc	r5, r1
    207c:	41 14       	cp	r4, r1
    207e:	51 04       	cpc	r5, r1
    2080:	71 f7       	brne	.-36     	; 0x205e <vfprintf+0x18c>
    2082:	e5 c0       	rjmp	.+458    	; 0x224e <vfprintf+0x37c>
    2084:	84 36       	cpi	r24, 0x64	; 100
    2086:	11 f0       	breq	.+4      	; 0x208c <vfprintf+0x1ba>
    2088:	89 36       	cpi	r24, 0x69	; 105
    208a:	39 f5       	brne	.+78     	; 0x20da <vfprintf+0x208>
    208c:	f8 01       	movw	r30, r16
    208e:	27 ff       	sbrs	r18, 7
    2090:	07 c0       	rjmp	.+14     	; 0x20a0 <vfprintf+0x1ce>
    2092:	60 81       	ld	r22, Z
    2094:	71 81       	ldd	r23, Z+1	; 0x01
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	0c 5f       	subi	r16, 0xFC	; 252
    209c:	1f 4f       	sbci	r17, 0xFF	; 255
    209e:	08 c0       	rjmp	.+16     	; 0x20b0 <vfprintf+0x1de>
    20a0:	60 81       	ld	r22, Z
    20a2:	71 81       	ldd	r23, Z+1	; 0x01
    20a4:	88 27       	eor	r24, r24
    20a6:	77 fd       	sbrc	r23, 7
    20a8:	80 95       	com	r24
    20aa:	98 2f       	mov	r25, r24
    20ac:	0e 5f       	subi	r16, 0xFE	; 254
    20ae:	1f 4f       	sbci	r17, 0xFF	; 255
    20b0:	2f 76       	andi	r18, 0x6F	; 111
    20b2:	b2 2e       	mov	r11, r18
    20b4:	97 ff       	sbrs	r25, 7
    20b6:	09 c0       	rjmp	.+18     	; 0x20ca <vfprintf+0x1f8>
    20b8:	90 95       	com	r25
    20ba:	80 95       	com	r24
    20bc:	70 95       	com	r23
    20be:	61 95       	neg	r22
    20c0:	7f 4f       	sbci	r23, 0xFF	; 255
    20c2:	8f 4f       	sbci	r24, 0xFF	; 255
    20c4:	9f 4f       	sbci	r25, 0xFF	; 255
    20c6:	20 68       	ori	r18, 0x80	; 128
    20c8:	b2 2e       	mov	r11, r18
    20ca:	2a e0       	ldi	r18, 0x0A	; 10
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	a4 01       	movw	r20, r8
    20d0:	0e 94 83 11 	call	0x2306	; 0x2306 <__ultoa_invert>
    20d4:	a8 2e       	mov	r10, r24
    20d6:	a8 18       	sub	r10, r8
    20d8:	44 c0       	rjmp	.+136    	; 0x2162 <vfprintf+0x290>
    20da:	85 37       	cpi	r24, 0x75	; 117
    20dc:	29 f4       	brne	.+10     	; 0x20e8 <vfprintf+0x216>
    20de:	2f 7e       	andi	r18, 0xEF	; 239
    20e0:	b2 2e       	mov	r11, r18
    20e2:	2a e0       	ldi	r18, 0x0A	; 10
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	25 c0       	rjmp	.+74     	; 0x2132 <vfprintf+0x260>
    20e8:	f2 2f       	mov	r31, r18
    20ea:	f9 7f       	andi	r31, 0xF9	; 249
    20ec:	bf 2e       	mov	r11, r31
    20ee:	8f 36       	cpi	r24, 0x6F	; 111
    20f0:	c1 f0       	breq	.+48     	; 0x2122 <vfprintf+0x250>
    20f2:	18 f4       	brcc	.+6      	; 0x20fa <vfprintf+0x228>
    20f4:	88 35       	cpi	r24, 0x58	; 88
    20f6:	79 f0       	breq	.+30     	; 0x2116 <vfprintf+0x244>
    20f8:	b4 c0       	rjmp	.+360    	; 0x2262 <vfprintf+0x390>
    20fa:	80 37       	cpi	r24, 0x70	; 112
    20fc:	19 f0       	breq	.+6      	; 0x2104 <vfprintf+0x232>
    20fe:	88 37       	cpi	r24, 0x78	; 120
    2100:	21 f0       	breq	.+8      	; 0x210a <vfprintf+0x238>
    2102:	af c0       	rjmp	.+350    	; 0x2262 <vfprintf+0x390>
    2104:	2f 2f       	mov	r18, r31
    2106:	20 61       	ori	r18, 0x10	; 16
    2108:	b2 2e       	mov	r11, r18
    210a:	b4 fe       	sbrs	r11, 4
    210c:	0d c0       	rjmp	.+26     	; 0x2128 <vfprintf+0x256>
    210e:	8b 2d       	mov	r24, r11
    2110:	84 60       	ori	r24, 0x04	; 4
    2112:	b8 2e       	mov	r11, r24
    2114:	09 c0       	rjmp	.+18     	; 0x2128 <vfprintf+0x256>
    2116:	24 ff       	sbrs	r18, 4
    2118:	0a c0       	rjmp	.+20     	; 0x212e <vfprintf+0x25c>
    211a:	9f 2f       	mov	r25, r31
    211c:	96 60       	ori	r25, 0x06	; 6
    211e:	b9 2e       	mov	r11, r25
    2120:	06 c0       	rjmp	.+12     	; 0x212e <vfprintf+0x25c>
    2122:	28 e0       	ldi	r18, 0x08	; 8
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	05 c0       	rjmp	.+10     	; 0x2132 <vfprintf+0x260>
    2128:	20 e1       	ldi	r18, 0x10	; 16
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <vfprintf+0x260>
    212e:	20 e1       	ldi	r18, 0x10	; 16
    2130:	32 e0       	ldi	r19, 0x02	; 2
    2132:	f8 01       	movw	r30, r16
    2134:	b7 fe       	sbrs	r11, 7
    2136:	07 c0       	rjmp	.+14     	; 0x2146 <vfprintf+0x274>
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	0c 5f       	subi	r16, 0xFC	; 252
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	06 c0       	rjmp	.+12     	; 0x2152 <vfprintf+0x280>
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	0e 5f       	subi	r16, 0xFE	; 254
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
    2152:	a4 01       	movw	r20, r8
    2154:	0e 94 83 11 	call	0x2306	; 0x2306 <__ultoa_invert>
    2158:	a8 2e       	mov	r10, r24
    215a:	a8 18       	sub	r10, r8
    215c:	fb 2d       	mov	r31, r11
    215e:	ff 77       	andi	r31, 0x7F	; 127
    2160:	bf 2e       	mov	r11, r31
    2162:	b6 fe       	sbrs	r11, 6
    2164:	0b c0       	rjmp	.+22     	; 0x217c <vfprintf+0x2aa>
    2166:	2b 2d       	mov	r18, r11
    2168:	2e 7f       	andi	r18, 0xFE	; 254
    216a:	a5 14       	cp	r10, r5
    216c:	50 f4       	brcc	.+20     	; 0x2182 <vfprintf+0x2b0>
    216e:	b4 fe       	sbrs	r11, 4
    2170:	0a c0       	rjmp	.+20     	; 0x2186 <vfprintf+0x2b4>
    2172:	b2 fc       	sbrc	r11, 2
    2174:	08 c0       	rjmp	.+16     	; 0x2186 <vfprintf+0x2b4>
    2176:	2b 2d       	mov	r18, r11
    2178:	2e 7e       	andi	r18, 0xEE	; 238
    217a:	05 c0       	rjmp	.+10     	; 0x2186 <vfprintf+0x2b4>
    217c:	7a 2c       	mov	r7, r10
    217e:	2b 2d       	mov	r18, r11
    2180:	03 c0       	rjmp	.+6      	; 0x2188 <vfprintf+0x2b6>
    2182:	7a 2c       	mov	r7, r10
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <vfprintf+0x2b6>
    2186:	75 2c       	mov	r7, r5
    2188:	24 ff       	sbrs	r18, 4
    218a:	0d c0       	rjmp	.+26     	; 0x21a6 <vfprintf+0x2d4>
    218c:	fe 01       	movw	r30, r28
    218e:	ea 0d       	add	r30, r10
    2190:	f1 1d       	adc	r31, r1
    2192:	80 81       	ld	r24, Z
    2194:	80 33       	cpi	r24, 0x30	; 48
    2196:	11 f4       	brne	.+4      	; 0x219c <vfprintf+0x2ca>
    2198:	29 7e       	andi	r18, 0xE9	; 233
    219a:	09 c0       	rjmp	.+18     	; 0x21ae <vfprintf+0x2dc>
    219c:	22 ff       	sbrs	r18, 2
    219e:	06 c0       	rjmp	.+12     	; 0x21ac <vfprintf+0x2da>
    21a0:	73 94       	inc	r7
    21a2:	73 94       	inc	r7
    21a4:	04 c0       	rjmp	.+8      	; 0x21ae <vfprintf+0x2dc>
    21a6:	82 2f       	mov	r24, r18
    21a8:	86 78       	andi	r24, 0x86	; 134
    21aa:	09 f0       	breq	.+2      	; 0x21ae <vfprintf+0x2dc>
    21ac:	73 94       	inc	r7
    21ae:	23 fd       	sbrc	r18, 3
    21b0:	13 c0       	rjmp	.+38     	; 0x21d8 <vfprintf+0x306>
    21b2:	20 ff       	sbrs	r18, 0
    21b4:	06 c0       	rjmp	.+12     	; 0x21c2 <vfprintf+0x2f0>
    21b6:	5a 2c       	mov	r5, r10
    21b8:	73 14       	cp	r7, r3
    21ba:	18 f4       	brcc	.+6      	; 0x21c2 <vfprintf+0x2f0>
    21bc:	53 0c       	add	r5, r3
    21be:	57 18       	sub	r5, r7
    21c0:	73 2c       	mov	r7, r3
    21c2:	73 14       	cp	r7, r3
    21c4:	68 f4       	brcc	.+26     	; 0x21e0 <vfprintf+0x30e>
    21c6:	b7 01       	movw	r22, r14
    21c8:	80 e2       	ldi	r24, 0x20	; 32
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	2c 87       	std	Y+12, r18	; 0x0c
    21ce:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    21d2:	73 94       	inc	r7
    21d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    21d6:	f5 cf       	rjmp	.-22     	; 0x21c2 <vfprintf+0x2f0>
    21d8:	73 14       	cp	r7, r3
    21da:	10 f4       	brcc	.+4      	; 0x21e0 <vfprintf+0x30e>
    21dc:	37 18       	sub	r3, r7
    21de:	01 c0       	rjmp	.+2      	; 0x21e2 <vfprintf+0x310>
    21e0:	31 2c       	mov	r3, r1
    21e2:	24 ff       	sbrs	r18, 4
    21e4:	12 c0       	rjmp	.+36     	; 0x220a <vfprintf+0x338>
    21e6:	b7 01       	movw	r22, r14
    21e8:	80 e3       	ldi	r24, 0x30	; 48
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	2c 87       	std	Y+12, r18	; 0x0c
    21ee:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    21f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    21f4:	22 ff       	sbrs	r18, 2
    21f6:	17 c0       	rjmp	.+46     	; 0x2226 <vfprintf+0x354>
    21f8:	21 ff       	sbrs	r18, 1
    21fa:	03 c0       	rjmp	.+6      	; 0x2202 <vfprintf+0x330>
    21fc:	88 e5       	ldi	r24, 0x58	; 88
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <vfprintf+0x334>
    2202:	88 e7       	ldi	r24, 0x78	; 120
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	b7 01       	movw	r22, r14
    2208:	0c c0       	rjmp	.+24     	; 0x2222 <vfprintf+0x350>
    220a:	82 2f       	mov	r24, r18
    220c:	86 78       	andi	r24, 0x86	; 134
    220e:	59 f0       	breq	.+22     	; 0x2226 <vfprintf+0x354>
    2210:	21 fd       	sbrc	r18, 1
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <vfprintf+0x346>
    2214:	80 e2       	ldi	r24, 0x20	; 32
    2216:	01 c0       	rjmp	.+2      	; 0x221a <vfprintf+0x348>
    2218:	8b e2       	ldi	r24, 0x2B	; 43
    221a:	27 fd       	sbrc	r18, 7
    221c:	8d e2       	ldi	r24, 0x2D	; 45
    221e:	b7 01       	movw	r22, r14
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    2226:	a5 14       	cp	r10, r5
    2228:	38 f4       	brcc	.+14     	; 0x2238 <vfprintf+0x366>
    222a:	b7 01       	movw	r22, r14
    222c:	80 e3       	ldi	r24, 0x30	; 48
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    2234:	5a 94       	dec	r5
    2236:	f7 cf       	rjmp	.-18     	; 0x2226 <vfprintf+0x354>
    2238:	aa 94       	dec	r10
    223a:	f4 01       	movw	r30, r8
    223c:	ea 0d       	add	r30, r10
    223e:	f1 1d       	adc	r31, r1
    2240:	80 81       	ld	r24, Z
    2242:	b7 01       	movw	r22, r14
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    224a:	a1 10       	cpse	r10, r1
    224c:	f5 cf       	rjmp	.-22     	; 0x2238 <vfprintf+0x366>
    224e:	33 20       	and	r3, r3
    2250:	09 f4       	brne	.+2      	; 0x2254 <vfprintf+0x382>
    2252:	51 ce       	rjmp	.-862    	; 0x1ef6 <vfprintf+0x24>
    2254:	b7 01       	movw	r22, r14
    2256:	80 e2       	ldi	r24, 0x20	; 32
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    225e:	3a 94       	dec	r3
    2260:	f6 cf       	rjmp	.-20     	; 0x224e <vfprintf+0x37c>
    2262:	f7 01       	movw	r30, r14
    2264:	86 81       	ldd	r24, Z+6	; 0x06
    2266:	97 81       	ldd	r25, Z+7	; 0x07
    2268:	02 c0       	rjmp	.+4      	; 0x226e <vfprintf+0x39c>
    226a:	8f ef       	ldi	r24, 0xFF	; 255
    226c:	9f ef       	ldi	r25, 0xFF	; 255
    226e:	2c 96       	adiw	r28, 0x0c	; 12
    2270:	e2 e1       	ldi	r30, 0x12	; 18
    2272:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__epilogue_restores__>

00002276 <strnlen_P>:
    2276:	fc 01       	movw	r30, r24
    2278:	05 90       	lpm	r0, Z+
    227a:	61 50       	subi	r22, 0x01	; 1
    227c:	70 40       	sbci	r23, 0x00	; 0
    227e:	01 10       	cpse	r0, r1
    2280:	d8 f7       	brcc	.-10     	; 0x2278 <strnlen_P+0x2>
    2282:	80 95       	com	r24
    2284:	90 95       	com	r25
    2286:	8e 0f       	add	r24, r30
    2288:	9f 1f       	adc	r25, r31
    228a:	08 95       	ret

0000228c <strnlen>:
    228c:	fc 01       	movw	r30, r24
    228e:	61 50       	subi	r22, 0x01	; 1
    2290:	70 40       	sbci	r23, 0x00	; 0
    2292:	01 90       	ld	r0, Z+
    2294:	01 10       	cpse	r0, r1
    2296:	d8 f7       	brcc	.-10     	; 0x228e <strnlen+0x2>
    2298:	80 95       	com	r24
    229a:	90 95       	com	r25
    229c:	8e 0f       	add	r24, r30
    229e:	9f 1f       	adc	r25, r31
    22a0:	08 95       	ret

000022a2 <fputc>:
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	18 2f       	mov	r17, r24
    22ac:	09 2f       	mov	r16, r25
    22ae:	eb 01       	movw	r28, r22
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	81 fd       	sbrc	r24, 1
    22b4:	03 c0       	rjmp	.+6      	; 0x22bc <fputc+0x1a>
    22b6:	8f ef       	ldi	r24, 0xFF	; 255
    22b8:	9f ef       	ldi	r25, 0xFF	; 255
    22ba:	20 c0       	rjmp	.+64     	; 0x22fc <fputc+0x5a>
    22bc:	82 ff       	sbrs	r24, 2
    22be:	10 c0       	rjmp	.+32     	; 0x22e0 <fputc+0x3e>
    22c0:	4e 81       	ldd	r20, Y+6	; 0x06
    22c2:	5f 81       	ldd	r21, Y+7	; 0x07
    22c4:	2c 81       	ldd	r18, Y+4	; 0x04
    22c6:	3d 81       	ldd	r19, Y+5	; 0x05
    22c8:	42 17       	cp	r20, r18
    22ca:	53 07       	cpc	r21, r19
    22cc:	7c f4       	brge	.+30     	; 0x22ec <fputc+0x4a>
    22ce:	e8 81       	ld	r30, Y
    22d0:	f9 81       	ldd	r31, Y+1	; 0x01
    22d2:	9f 01       	movw	r18, r30
    22d4:	2f 5f       	subi	r18, 0xFF	; 255
    22d6:	3f 4f       	sbci	r19, 0xFF	; 255
    22d8:	39 83       	std	Y+1, r19	; 0x01
    22da:	28 83       	st	Y, r18
    22dc:	10 83       	st	Z, r17
    22de:	06 c0       	rjmp	.+12     	; 0x22ec <fputc+0x4a>
    22e0:	e8 85       	ldd	r30, Y+8	; 0x08
    22e2:	f9 85       	ldd	r31, Y+9	; 0x09
    22e4:	81 2f       	mov	r24, r17
    22e6:	09 95       	icall
    22e8:	89 2b       	or	r24, r25
    22ea:	29 f7       	brne	.-54     	; 0x22b6 <fputc+0x14>
    22ec:	2e 81       	ldd	r18, Y+6	; 0x06
    22ee:	3f 81       	ldd	r19, Y+7	; 0x07
    22f0:	2f 5f       	subi	r18, 0xFF	; 255
    22f2:	3f 4f       	sbci	r19, 0xFF	; 255
    22f4:	3f 83       	std	Y+7, r19	; 0x07
    22f6:	2e 83       	std	Y+6, r18	; 0x06
    22f8:	81 2f       	mov	r24, r17
    22fa:	90 2f       	mov	r25, r16
    22fc:	df 91       	pop	r29
    22fe:	cf 91       	pop	r28
    2300:	1f 91       	pop	r17
    2302:	0f 91       	pop	r16
    2304:	08 95       	ret

00002306 <__ultoa_invert>:
    2306:	fa 01       	movw	r30, r20
    2308:	aa 27       	eor	r26, r26
    230a:	28 30       	cpi	r18, 0x08	; 8
    230c:	51 f1       	breq	.+84     	; 0x2362 <__ultoa_invert+0x5c>
    230e:	20 31       	cpi	r18, 0x10	; 16
    2310:	81 f1       	breq	.+96     	; 0x2372 <__ultoa_invert+0x6c>
    2312:	e8 94       	clt
    2314:	6f 93       	push	r22
    2316:	6e 7f       	andi	r22, 0xFE	; 254
    2318:	6e 5f       	subi	r22, 0xFE	; 254
    231a:	7f 4f       	sbci	r23, 0xFF	; 255
    231c:	8f 4f       	sbci	r24, 0xFF	; 255
    231e:	9f 4f       	sbci	r25, 0xFF	; 255
    2320:	af 4f       	sbci	r26, 0xFF	; 255
    2322:	b1 e0       	ldi	r27, 0x01	; 1
    2324:	3e d0       	rcall	.+124    	; 0x23a2 <__ultoa_invert+0x9c>
    2326:	b4 e0       	ldi	r27, 0x04	; 4
    2328:	3c d0       	rcall	.+120    	; 0x23a2 <__ultoa_invert+0x9c>
    232a:	67 0f       	add	r22, r23
    232c:	78 1f       	adc	r23, r24
    232e:	89 1f       	adc	r24, r25
    2330:	9a 1f       	adc	r25, r26
    2332:	a1 1d       	adc	r26, r1
    2334:	68 0f       	add	r22, r24
    2336:	79 1f       	adc	r23, r25
    2338:	8a 1f       	adc	r24, r26
    233a:	91 1d       	adc	r25, r1
    233c:	a1 1d       	adc	r26, r1
    233e:	6a 0f       	add	r22, r26
    2340:	71 1d       	adc	r23, r1
    2342:	81 1d       	adc	r24, r1
    2344:	91 1d       	adc	r25, r1
    2346:	a1 1d       	adc	r26, r1
    2348:	20 d0       	rcall	.+64     	; 0x238a <__ultoa_invert+0x84>
    234a:	09 f4       	brne	.+2      	; 0x234e <__ultoa_invert+0x48>
    234c:	68 94       	set
    234e:	3f 91       	pop	r19
    2350:	2a e0       	ldi	r18, 0x0A	; 10
    2352:	26 9f       	mul	r18, r22
    2354:	11 24       	eor	r1, r1
    2356:	30 19       	sub	r19, r0
    2358:	30 5d       	subi	r19, 0xD0	; 208
    235a:	31 93       	st	Z+, r19
    235c:	de f6       	brtc	.-74     	; 0x2314 <__ultoa_invert+0xe>
    235e:	cf 01       	movw	r24, r30
    2360:	08 95       	ret
    2362:	46 2f       	mov	r20, r22
    2364:	47 70       	andi	r20, 0x07	; 7
    2366:	40 5d       	subi	r20, 0xD0	; 208
    2368:	41 93       	st	Z+, r20
    236a:	b3 e0       	ldi	r27, 0x03	; 3
    236c:	0f d0       	rcall	.+30     	; 0x238c <__ultoa_invert+0x86>
    236e:	c9 f7       	brne	.-14     	; 0x2362 <__ultoa_invert+0x5c>
    2370:	f6 cf       	rjmp	.-20     	; 0x235e <__ultoa_invert+0x58>
    2372:	46 2f       	mov	r20, r22
    2374:	4f 70       	andi	r20, 0x0F	; 15
    2376:	40 5d       	subi	r20, 0xD0	; 208
    2378:	4a 33       	cpi	r20, 0x3A	; 58
    237a:	18 f0       	brcs	.+6      	; 0x2382 <__ultoa_invert+0x7c>
    237c:	49 5d       	subi	r20, 0xD9	; 217
    237e:	31 fd       	sbrc	r19, 1
    2380:	40 52       	subi	r20, 0x20	; 32
    2382:	41 93       	st	Z+, r20
    2384:	02 d0       	rcall	.+4      	; 0x238a <__ultoa_invert+0x84>
    2386:	a9 f7       	brne	.-22     	; 0x2372 <__ultoa_invert+0x6c>
    2388:	ea cf       	rjmp	.-44     	; 0x235e <__ultoa_invert+0x58>
    238a:	b4 e0       	ldi	r27, 0x04	; 4
    238c:	a6 95       	lsr	r26
    238e:	97 95       	ror	r25
    2390:	87 95       	ror	r24
    2392:	77 95       	ror	r23
    2394:	67 95       	ror	r22
    2396:	ba 95       	dec	r27
    2398:	c9 f7       	brne	.-14     	; 0x238c <__ultoa_invert+0x86>
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	61 05       	cpc	r22, r1
    239e:	71 05       	cpc	r23, r1
    23a0:	08 95       	ret
    23a2:	9b 01       	movw	r18, r22
    23a4:	ac 01       	movw	r20, r24
    23a6:	0a 2e       	mov	r0, r26
    23a8:	06 94       	lsr	r0
    23aa:	57 95       	ror	r21
    23ac:	47 95       	ror	r20
    23ae:	37 95       	ror	r19
    23b0:	27 95       	ror	r18
    23b2:	ba 95       	dec	r27
    23b4:	c9 f7       	brne	.-14     	; 0x23a8 <__ultoa_invert+0xa2>
    23b6:	62 0f       	add	r22, r18
    23b8:	73 1f       	adc	r23, r19
    23ba:	84 1f       	adc	r24, r20
    23bc:	95 1f       	adc	r25, r21
    23be:	a0 1d       	adc	r26, r0
    23c0:	08 95       	ret

000023c2 <__prologue_saves__>:
    23c2:	2f 92       	push	r2
    23c4:	3f 92       	push	r3
    23c6:	4f 92       	push	r4
    23c8:	5f 92       	push	r5
    23ca:	6f 92       	push	r6
    23cc:	7f 92       	push	r7
    23ce:	8f 92       	push	r8
    23d0:	9f 92       	push	r9
    23d2:	af 92       	push	r10
    23d4:	bf 92       	push	r11
    23d6:	cf 92       	push	r12
    23d8:	df 92       	push	r13
    23da:	ef 92       	push	r14
    23dc:	ff 92       	push	r15
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	ca 1b       	sub	r28, r26
    23ec:	db 0b       	sbc	r29, r27
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	09 94       	ijmp

000023fa <__epilogue_restores__>:
    23fa:	2a 88       	ldd	r2, Y+18	; 0x12
    23fc:	39 88       	ldd	r3, Y+17	; 0x11
    23fe:	48 88       	ldd	r4, Y+16	; 0x10
    2400:	5f 84       	ldd	r5, Y+15	; 0x0f
    2402:	6e 84       	ldd	r6, Y+14	; 0x0e
    2404:	7d 84       	ldd	r7, Y+13	; 0x0d
    2406:	8c 84       	ldd	r8, Y+12	; 0x0c
    2408:	9b 84       	ldd	r9, Y+11	; 0x0b
    240a:	aa 84       	ldd	r10, Y+10	; 0x0a
    240c:	b9 84       	ldd	r11, Y+9	; 0x09
    240e:	c8 84       	ldd	r12, Y+8	; 0x08
    2410:	df 80       	ldd	r13, Y+7	; 0x07
    2412:	ee 80       	ldd	r14, Y+6	; 0x06
    2414:	fd 80       	ldd	r15, Y+5	; 0x05
    2416:	0c 81       	ldd	r16, Y+4	; 0x04
    2418:	1b 81       	ldd	r17, Y+3	; 0x03
    241a:	aa 81       	ldd	r26, Y+2	; 0x02
    241c:	b9 81       	ldd	r27, Y+1	; 0x01
    241e:	ce 0f       	add	r28, r30
    2420:	d1 1d       	adc	r29, r1
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	ed 01       	movw	r28, r26
    242e:	08 95       	ret

00002430 <__do_global_dtors>:
    2430:	10 e0       	ldi	r17, 0x00	; 0
    2432:	c6 e5       	ldi	r28, 0x56	; 86
    2434:	d0 e0       	ldi	r29, 0x00	; 0
    2436:	04 c0       	rjmp	.+8      	; 0x2440 <__do_global_dtors+0x10>
    2438:	fe 01       	movw	r30, r28
    243a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__tablejump__>
    243e:	22 96       	adiw	r28, 0x02	; 2
    2440:	c8 35       	cpi	r28, 0x58	; 88
    2442:	d1 07       	cpc	r29, r17
    2444:	c9 f7       	brne	.-14     	; 0x2438 <__do_global_dtors+0x8>
    2446:	f8 94       	cli

00002448 <__stop_program>:
    2448:	ff cf       	rjmp	.-2      	; 0x2448 <__stop_program>
