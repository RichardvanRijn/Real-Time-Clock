
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000c44  00000cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800076  00800076  00000cee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cee  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00000d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000167b  00000000  00000000  00000ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074a  00000000  00000000  0000255d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000677  00000000  00000000  00002ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000460  00000000  00000000  00003320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000648  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ca4  00000000  00000000  00003dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00004a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_11>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	8c 01       	movw	r16, r24

00000056 <__ctors_end>:
  56:	a7 01       	movw	r20, r14

00000058 <__dtors_end>:
  58:	11 24       	eor	r1, r1
  5a:	1f be       	out	0x3f, r1	; 63
  5c:	cf e5       	ldi	r28, 0x5F	; 95
  5e:	d8 e0       	ldi	r29, 0x08	; 8
  60:	de bf       	out	0x3e, r29	; 62
  62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
  64:	10 e0       	ldi	r17, 0x00	; 0
  66:	a0 e6       	ldi	r26, 0x60	; 96
  68:	b0 e0       	ldi	r27, 0x00	; 0
  6a:	e4 e4       	ldi	r30, 0x44	; 68
  6c:	fc e0       	ldi	r31, 0x0C	; 12
  6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
  70:	05 90       	lpm	r0, Z+
  72:	0d 92       	st	X+, r0
  74:	a6 37       	cpi	r26, 0x76	; 118
  76:	b1 07       	cpc	r27, r17
  78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	a6 e7       	ldi	r26, 0x76	; 118
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
  82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
  84:	a5 3a       	cpi	r26, 0xA5	; 165
  86:	b2 07       	cpc	r27, r18
  88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
  8a:	10 e0       	ldi	r17, 0x00	; 0
  8c:	c6 e5       	ldi	r28, 0x56	; 86
  8e:	d0 e0       	ldi	r29, 0x00	; 0
  90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
  92:	22 97       	sbiw	r28, 0x02	; 2
  94:	fe 01       	movw	r30, r28
  96:	0e 94 32 03 	call	0x664	; 0x664 <__tablejump__>
  9a:	c4 35       	cpi	r28, 0x54	; 84
  9c:	d1 07       	cpc	r29, r17
  9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
  a0:	0e 94 48 01 	call	0x290	; 0x290 <main>
  a4:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__do_global_dtors>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_Z7init_T0v>:

I2C TWI(address);

void init_T0(void)
{
	TCCR0 = (1<<CS02) && (1<<CS00);
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  b0:	12 be       	out	0x32, r1	; 50
	TIMSK = (1<<TOIE0);
  b2:	89 bf       	out	0x39, r24	; 57
  b4:	08 95       	ret

000000b6 <_Z8bcdToDech>:
}

unsigned char bcdToDec(unsigned char val)
{
	return ((val/16*10) + (val%16) );
  b6:	98 2f       	mov	r25, r24
  b8:	92 95       	swap	r25
  ba:	9f 70       	andi	r25, 0x0F	; 15
  bc:	99 0f       	add	r25, r25
  be:	29 2f       	mov	r18, r25
  c0:	22 0f       	add	r18, r18
  c2:	22 0f       	add	r18, r18
  c4:	92 0f       	add	r25, r18
  c6:	8f 70       	andi	r24, 0x0F	; 15
}
  c8:	89 0f       	add	r24, r25
  ca:	08 95       	ret

000000cc <_Z11writeScreenv>:

unsigned char timeIn[8] = {0x00,	 decToBcd(30), decToBcd(41), decToBcd(17), decToBcd(5),	 decToBcd(6), decToBcd(2), decToBcd(15)};
//						   Address	,Seconds,	  Minutes,	   Hours,	    Day of the week, Date,		  month,	   Year.

void writeScreen(void)
{
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
	lcd_puts(buffer);
	lcd_goto(1,6);
	snprintf(buffer, sizeof buffer,"%d ",time[6]);
	lcd_puts(buffer);		*/

	lcd_home();
  d6:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8lcd_homev>
	snprintf(buffer, sizeof buffer, "%d%d:%d%d:%d%d",time[5],time[4],time[3],time[2],time[1],time[0]);
  da:	80 91 87 00 	lds	r24, 0x0087
  de:	1f 92       	push	r1
  e0:	8f 93       	push	r24
  e2:	80 91 88 00 	lds	r24, 0x0088
  e6:	1f 92       	push	r1
  e8:	8f 93       	push	r24
  ea:	80 91 89 00 	lds	r24, 0x0089
  ee:	1f 92       	push	r1
  f0:	8f 93       	push	r24
  f2:	80 91 8a 00 	lds	r24, 0x008A
  f6:	1f 92       	push	r1
  f8:	8f 93       	push	r24
  fa:	80 91 8b 00 	lds	r24, 0x008B
  fe:	1f 92       	push	r1
 100:	8f 93       	push	r24
 102:	80 91 8c 00 	lds	r24, 0x008C
 106:	1f 92       	push	r1
 108:	8f 93       	push	r24
 10a:	00 e6       	ldi	r16, 0x60	; 96
 10c:	10 e0       	ldi	r17, 0x00	; 0
 10e:	1f 93       	push	r17
 110:	0f 93       	push	r16
 112:	1f 92       	push	r1
 114:	0f 2e       	mov	r0, r31
 116:	f1 e1       	ldi	r31, 0x11	; 17
 118:	ff 2e       	mov	r15, r31
 11a:	f0 2d       	mov	r31, r0
 11c:	ff 92       	push	r15
 11e:	c4 e9       	ldi	r28, 0x94	; 148
 120:	d0 e0       	ldi	r29, 0x00	; 0
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	0e 94 36 03 	call	0x66c	; 0x66c <snprintf>
	lcd_puts(buffer);
 12a:	ce 01       	movw	r24, r28
 12c:	0e 94 21 03 	call	0x642	; 0x642 <_Z8lcd_putsPc>
	lcd_goto(1,0);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 14 03 	call	0x628	; 0x628 <_Z8lcd_gotohh>
	snprintf(buffer, sizeof buffer, "%d%d:%d%d:%d%d",time[8],time[7],time[10],time[9],time[12],time[11]);
 138:	80 91 92 00 	lds	r24, 0x0092
 13c:	1f 92       	push	r1
 13e:	8f 93       	push	r24
 140:	80 91 93 00 	lds	r24, 0x0093
 144:	1f 92       	push	r1
 146:	8f 93       	push	r24
 148:	80 91 90 00 	lds	r24, 0x0090
 14c:	1f 92       	push	r1
 14e:	8f 93       	push	r24
 150:	80 91 91 00 	lds	r24, 0x0091
 154:	1f 92       	push	r1
 156:	8f 93       	push	r24
 158:	80 91 8e 00 	lds	r24, 0x008E
 15c:	1f 92       	push	r1
 15e:	8f 93       	push	r24
 160:	80 91 8f 00 	lds	r24, 0x008F
 164:	1f 92       	push	r1
 166:	8f 93       	push	r24
 168:	1f 93       	push	r17
 16a:	0f 93       	push	r16
 16c:	1f 92       	push	r1
 16e:	ff 92       	push	r15
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	0e 94 36 03 	call	0x66c	; 0x66c <snprintf>
	lcd_puts(buffer);
 178:	8d b7       	in	r24, 0x3d	; 61
 17a:	9e b7       	in	r25, 0x3e	; 62
 17c:	84 96       	adiw	r24, 0x24	; 36
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	9e bf       	out	0x3e, r25	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	8d bf       	out	0x3d, r24	; 61
 188:	ce 01       	movw	r24, r28
 18a:	0e 94 21 03 	call	0x642	; 0x642 <_Z8lcd_putsPc>
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	08 95       	ret

0000019a <__vector_11>:
	lcd_cursor(true,true);
	lcd_home();
	
}

ISR(TIMER0_OVF_vect) {
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	df 92       	push	r13
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
	static unsigned char x = 0;

	if ( x == 15 )
 1ca:	80 91 76 00 	lds	r24, 0x0076
 1ce:	8f 30       	cpi	r24, 0x0F	; 15
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <__vector_11+0x3a>
 1d2:	42 c0       	rjmp	.+132    	; 0x258 <__vector_11+0xbe>
	{
		TWI.start_wait(I2C_WRITE);			// set device address and write mode
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	8f e7       	ldi	r24, 0x7F	; 127
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_ZN3I2C10start_waitEh>
		TWI.readXBytes(data,7,0x00);
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	47 e0       	ldi	r20, 0x07	; 7
 1e2:	60 e8       	ldi	r22, 0x80	; 128
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	8f e7       	ldi	r24, 0x7F	; 127
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 19 02 	call	0x432	; 0x432 <_ZN3I2C10readXBytesEPhhh>
		TWI.stop();
 1ee:	8f e7       	ldi	r24, 0x7F	; 127
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_ZN3I2C4stopEv>
//				time[i] = bcdToDec(data[i]);
				j++;
			}
			else
			{
				time[j] = bcdToDec(data[i]);
 1f6:	d0 90 83 00 	lds	r13, 0x0083
 1fa:	ee 24       	eor	r14, r14
 1fc:	e3 94       	inc	r14
 1fe:	10 e0       	ldi	r17, 0x00	; 0
	if ( x == 15 )
	{
		TWI.start_wait(I2C_WRITE);			// set device address and write mode
		TWI.readXBytes(data,7,0x00);
		TWI.stop();
		for (uint8_t i = 0, j = 0; i <= 6 ; i++, j++)
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <__vector_11+0x6e>
 204:	1f 5f       	subi	r17, 0xFF	; 255
 206:	e3 94       	inc	r14
		{
			if ( i != 3 )
 208:	13 30       	cpi	r17, 0x03	; 3
 20a:	c9 f0       	breq	.+50     	; 0x23e <__vector_11+0xa4>
			{
				time[j] = bcdToDec((data[i] & 0x0F));
 20c:	c0 2f       	mov	r28, r16
 20e:	d0 e0       	ldi	r29, 0x00	; 0
 210:	e1 2f       	mov	r30, r17
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	e0 58       	subi	r30, 0x80	; 128
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	f0 80       	ld	r15, Z
 21a:	8f 2d       	mov	r24, r15
 21c:	8f 70       	andi	r24, 0x0F	; 15
 21e:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8bcdToDech>
 222:	c9 57       	subi	r28, 0x79	; 121
 224:	df 4f       	sbci	r29, 0xFF	; 255
 226:	88 83       	st	Y, r24
				time[j + 1] = bcdToDec(((data[i] >> 4) & 0x0F));
 228:	8f 2d       	mov	r24, r15
 22a:	82 95       	swap	r24
 22c:	8f 70       	andi	r24, 0x0F	; 15
 22e:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8bcdToDech>
 232:	89 83       	std	Y+1, r24	; 0x01
	if ( x == 15 )
	{
		TWI.start_wait(I2C_WRITE);			// set device address and write mode
		TWI.readXBytes(data,7,0x00);
		TWI.stop();
		for (uint8_t i = 0, j = 0; i <= 6 ; i++, j++)
 234:	0e 5f       	subi	r16, 0xFE	; 254
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	8e 15       	cp	r24, r14
 23a:	20 f7       	brcc	.-56     	; 0x204 <__vector_11+0x6a>
 23c:	0a c0       	rjmp	.+20     	; 0x252 <__vector_11+0xb8>
//				time[i] = bcdToDec(data[i]);
				j++;
			}
			else
			{
				time[j] = bcdToDec(data[i]);
 23e:	8d 2d       	mov	r24, r13
 240:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8bcdToDech>
 244:	e0 2f       	mov	r30, r16
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	e9 57       	subi	r30, 0x79	; 121
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	80 83       	st	Z, r24
	if ( x == 15 )
	{
		TWI.start_wait(I2C_WRITE);			// set device address and write mode
		TWI.readXBytes(data,7,0x00);
		TWI.stop();
		for (uint8_t i = 0, j = 0; i <= 6 ; i++, j++)
 24e:	0f 5f       	subi	r16, 0xFF	; 255
 250:	d9 cf       	rjmp	.-78     	; 0x204 <__vector_11+0x6a>
			{
				time[j] = bcdToDec(data[i]);
			}
		}
		
		x = 0;
 252:	10 92 76 00 	sts	0x0076, r1
 256:	03 c0       	rjmp	.+6      	; 0x25e <__vector_11+0xc4>
	}
	else
	{
		x++;
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	80 93 76 00 	sts	0x0076, r24
	}
	TCNT0 = 0;
 25e:	12 be       	out	0x32, r1	; 50
}
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <main>:

int main(void)
{
	DDRD = 0x00;
 290:	11 ba       	out	0x11, r1	; 17
	lcd_init();
 292:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_Z8lcd_initv>
	lcd_cursor(false, false);							//  cursor off
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 0b 03 	call	0x616	; 0x616 <_Z10lcd_cursorbb>
	lcd_home();
 29e:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8lcd_homev>
	snprintf(buffer, sizeof buffer, "int");
 2a2:	89 e6       	ldi	r24, 0x69	; 105
 2a4:	9e e6       	ldi	r25, 0x6E	; 110
 2a6:	a4 e7       	ldi	r26, 0x74	; 116
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	80 93 94 00 	sts	0x0094, r24
 2ae:	90 93 95 00 	sts	0x0095, r25
 2b2:	a0 93 96 00 	sts	0x0096, r26
 2b6:	b0 93 97 00 	sts	0x0097, r27
	lcd_puts(buffer);
 2ba:	84 e9       	ldi	r24, 0x94	; 148
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 21 03 	call	0x642	; 0x642 <_Z8lcd_putsPc>
	lcd_home();
 2c2:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8lcd_homev>
	TWI.init();									// Function to initialize TWI
 2c6:	8f e7       	ldi	r24, 0x7F	; 127
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3I2C4initEv>
	int ret = TWI.start(I2C_WRITE);				// set device address and write mode
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	8f e7       	ldi	r24, 0x7F	; 127
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN3I2C5startEh>
	if ( ret ) 
 2d8:	81 11       	cpse	r24, r1
 2da:	08 c0       	rjmp	.+16     	; 0x2ec <main+0x5c>
//		TWI.stop();
//		TWI.start_wait(I2C_WRITE);
//		TWI.writeXBytes(timeIn,8);
//		TWI.stop();

		init_T0();
 2dc:	0e 94 56 00 	call	0xac	; 0xac <_Z7init_T0v>
		sei();
 2e0:	78 94       	sei
		while(1)
		{
			cli();
 2e2:	f8 94       	cli
			writeScreen();
 2e4:	0e 94 66 00 	call	0xcc	; 0xcc <_Z11writeScreenv>
			sei();
 2e8:	78 94       	sei
 2ea:	fb cf       	rjmp	.-10     	; 0x2e2 <main+0x52>
	lcd_home();
	TWI.init();									// Function to initialize TWI
	int ret = TWI.start(I2C_WRITE);				// set device address and write mode
	if ( ret ) 
	{										// failed to issue start condition, possibly no device found
		TWI.stop();
 2ec:	8f e7       	ldi	r24, 0x7F	; 127
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_ZN3I2C4stopEv>
		snprintf(buffer, sizeof buffer, "Failed");
 2f4:	87 e0       	ldi	r24, 0x07	; 7
 2f6:	ef e6       	ldi	r30, 0x6F	; 111
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	a4 e9       	ldi	r26, 0x94	; 148
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	01 90       	ld	r0, Z+
 300:	0d 92       	st	X+, r0
 302:	8a 95       	dec	r24
 304:	e1 f7       	brne	.-8      	; 0x2fe <main+0x6e>
		lcd_puts(buffer);
 306:	84 e9       	ldi	r24, 0x94	; 148
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 21 03 	call	0x642	; 0x642 <_Z8lcd_putsPc>
		lcd_home();
 30e:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8lcd_homev>
//			{
//				changeTime();	
//			}
		}
	}
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	08 95       	ret

00000318 <_GLOBAL__sub_I_buffer>:
char buffer[17];
unsigned char time[13];
unsigned char data[7];
unsigned char temp;

I2C TWI(address);
 318:	60 ed       	ldi	r22, 0xD0	; 208
 31a:	8f e7       	ldi	r24, 0x7F	; 127
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN3I2CC1Eh>
unsigned char decToBcd(unsigned char val)
{
	return ((val/10*16) + (val%10) );
}

unsigned char timeIn[8] = {0x00,	 decToBcd(30), decToBcd(41), decToBcd(17), decToBcd(5),	 decToBcd(6), decToBcd(2), decToBcd(15)};
 322:	80 e3       	ldi	r24, 0x30	; 48
 324:	80 93 78 00 	sts	0x0078, r24
 328:	81 e4       	ldi	r24, 0x41	; 65
 32a:	80 93 79 00 	sts	0x0079, r24
 32e:	87 e1       	ldi	r24, 0x17	; 23
 330:	80 93 7a 00 	sts	0x007A, r24
 334:	85 e0       	ldi	r24, 0x05	; 5
 336:	80 93 7b 00 	sts	0x007B, r24
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	80 93 7c 00 	sts	0x007C, r24
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	80 93 7d 00 	sts	0x007D, r24
 346:	85 e1       	ldi	r24, 0x15	; 21
 348:	80 93 7e 00 	sts	0x007E, r24
 34c:	08 95       	ret

0000034e <_GLOBAL__sub_D_buffer>:
char buffer[17];
unsigned char time[13];
unsigned char data[7];
unsigned char temp;

I2C TWI(address);
 34e:	8f e7       	ldi	r24, 0x7F	; 127
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZN3I2CD1Ev>
 356:	08 95       	ret

00000358 <_ZN3I2CC1Eh>:
#define SCL_CLOCK  100000L

// default constructor
I2C::I2C():address(0) {}

I2C::I2C(unsigned char newaddress) : address(newaddress) {}
 358:	fc 01       	movw	r30, r24
 35a:	60 83       	st	Z, r22
 35c:	08 95       	ret

0000035e <_ZN3I2C4initEv>:

void I2C::init(void)
{
	 /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
	 TWSR = 0;                         /* no prescaler */
 35e:	11 b8       	out	0x01, r1	; 1
	 TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 360:	8c e0       	ldi	r24, 0x0C	; 12
 362:	80 b9       	out	0x00, r24	; 0
 364:	08 95       	ret

00000366 <_ZN3I2C5startEh>:
}

unsigned char I2C::start(unsigned char RW)
{
	uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);				// send START condition
 366:	24 ea       	ldi	r18, 0xA4	; 164
 368:	26 bf       	out	0x36, r18	; 54
	while(!(TWCR & (1<<TWINT)));							// wait until transmission completed
 36a:	06 b6       	in	r0, 0x36	; 54
 36c:	07 fe       	sbrs	r0, 7
 36e:	fd cf       	rjmp	.-6      	; 0x36a <_ZN3I2C5startEh+0x4>
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
 370:	21 b1       	in	r18, 0x01	; 1
 372:	28 7f       	andi	r18, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 374:	28 30       	cpi	r18, 0x08	; 8
 376:	11 f0       	breq	.+4      	; 0x37c <_ZN3I2C5startEh+0x16>
 378:	20 31       	cpi	r18, 0x10	; 16
 37a:	91 f4       	brne	.+36     	; 0x3a0 <_ZN3I2C5startEh+0x3a>
	TWDR = address + RW;									// send device address
 37c:	fc 01       	movw	r30, r24
 37e:	80 81       	ld	r24, Z
 380:	68 0f       	add	r22, r24
 382:	63 b9       	out	0x03, r22	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 384:	84 e8       	ldi	r24, 0x84	; 132
 386:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));							// wail until transmission completed and ACK/NACK has been received
 388:	06 b6       	in	r0, 0x36	; 54
 38a:	07 fe       	sbrs	r0, 7
 38c:	fd cf       	rjmp	.-6      	; 0x388 <_ZN3I2C5startEh+0x22>
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
 38e:	91 b1       	in	r25, 0x01	; 1
 390:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 392:	98 31       	cpi	r25, 0x18	; 24
 394:	39 f0       	breq	.+14     	; 0x3a4 <_ZN3I2C5startEh+0x3e>
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 34       	cpi	r25, 0x40	; 64
 39a:	29 f4       	brne	.+10     	; 0x3a6 <_ZN3I2C5startEh+0x40>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 95       	ret
{
	uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);				// send START condition
	while(!(TWCR & (1<<TWINT)));							// wait until transmission completed
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	08 95       	ret
	TWDR = address + RW;									// send device address
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));							// wail until transmission completed and ACK/NACK has been received
	twst = TW_STATUS & 0xF8;								// check value of TWI Status Register. Mask prescaler bits.
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	return 0;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
}
 3a6:	08 95       	ret

000003a8 <_ZN3I2C9rep_startEh>:

unsigned char I2C::rep_start(unsigned char RW)
{
	return start(RW);
 3a8:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN3I2C5startEh>
}
 3ac:	08 95       	ret

000003ae <_ZN3I2C10start_waitEh>:

void I2C::start_wait(unsigned char RW)
{
 3ae:	fc 01       	movw	r30, r24
	uint8_t   twst;
	while ( 1 )
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);						// send START condition
 3b0:	94 ea       	ldi	r25, 0xA4	; 164
		while(!(TWCR & (1<<TWINT)));									// wait until transmission completed
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
		TWDR = address + RW;											// send device address
		TWCR = (1<<TWINT) | (1<<TWEN);
 3b2:	24 e8       	ldi	r18, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));									// wail until transmission completed
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);					//device busy, send stop condition to terminate write operation
 3b4:	34 e9       	ldi	r19, 0x94	; 148
void I2C::start_wait(unsigned char RW)
{
	uint8_t   twst;
	while ( 1 )
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);						// send START condition
 3b6:	96 bf       	out	0x36, r25	; 54
		while(!(TWCR & (1<<TWINT)));									// wait until transmission completed
 3b8:	06 b6       	in	r0, 0x36	; 54
 3ba:	07 fe       	sbrs	r0, 7
 3bc:	fd cf       	rjmp	.-6      	; 0x3b8 <_ZN3I2C10start_waitEh+0xa>
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
 3be:	81 b1       	in	r24, 0x01	; 1
 3c0:	88 7f       	andi	r24, 0xF8	; 248
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 3c2:	88 30       	cpi	r24, 0x08	; 8
 3c4:	11 f0       	breq	.+4      	; 0x3ca <_ZN3I2C10start_waitEh+0x1c>
 3c6:	80 31       	cpi	r24, 0x10	; 16
 3c8:	b1 f7       	brne	.-20     	; 0x3b6 <_ZN3I2C10start_waitEh+0x8>
		TWDR = address + RW;											// send device address
 3ca:	80 81       	ld	r24, Z
 3cc:	86 0f       	add	r24, r22
 3ce:	83 b9       	out	0x03, r24	; 3
		TWCR = (1<<TWINT) | (1<<TWEN);
 3d0:	26 bf       	out	0x36, r18	; 54
		while(!(TWCR & (1<<TWINT)));									// wail until transmission completed
 3d2:	06 b6       	in	r0, 0x36	; 54
 3d4:	07 fe       	sbrs	r0, 7
 3d6:	fd cf       	rjmp	.-6      	; 0x3d2 <_ZN3I2C10start_waitEh+0x24>
		twst = TW_STATUS & 0xF8;										// check value of TWI Status Register. Mask prescaler bits.
 3d8:	81 b1       	in	r24, 0x01	; 1
 3da:	88 7f       	andi	r24, 0xF8	; 248
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
 3dc:	80 32       	cpi	r24, 0x20	; 32
 3de:	11 f0       	breq	.+4      	; 0x3e4 <_ZN3I2C10start_waitEh+0x36>
 3e0:	88 35       	cpi	r24, 0x58	; 88
 3e2:	29 f4       	brne	.+10     	; 0x3ee <_ZN3I2C10start_waitEh+0x40>
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);					//device busy, send stop condition to terminate write operation
 3e4:	36 bf       	out	0x36, r19	; 54
			while(TWCR & (1<<TWSTO));									// wait until stop condition is executed and bus released
 3e6:	06 b6       	in	r0, 0x36	; 54
 3e8:	04 fc       	sbrc	r0, 4
 3ea:	fd cf       	rjmp	.-6      	; 0x3e6 <_ZN3I2C10start_waitEh+0x38>
 3ec:	e4 cf       	rjmp	.-56     	; 0x3b6 <_ZN3I2C10start_waitEh+0x8>
 3ee:	08 95       	ret

000003f0 <_ZN3I2C4stopEv>:
	}
}

void I2C::stop(void)
{
	 TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);						//send stop condition
 3f0:	84 e9       	ldi	r24, 0x94	; 148
 3f2:	86 bf       	out	0x36, r24	; 54
	 while(TWCR & (1<<TWSTO));											// wait until stop condition is executed and bus released
 3f4:	06 b6       	in	r0, 0x36	; 54
 3f6:	04 fc       	sbrc	r0, 4
 3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <_ZN3I2C4stopEv+0x4>
}
 3fa:	08 95       	ret

000003fc <_ZN3I2C5writeEh>:


unsigned char I2C::write(unsigned char data)
{
	uint8_t   twst;
	TWDR = data;														// send data to the previously addressed device
 3fc:	63 b9       	out	0x03, r22	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 3fe:	84 e8       	ldi	r24, 0x84	; 132
 400:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT))){}										// wait until transmission completed
 402:	06 b6       	in	r0, 0x36	; 54
 404:	07 fe       	sbrs	r0, 7
 406:	fd cf       	rjmp	.-6      	; 0x402 <_ZN3I2C5writeEh+0x6>
	twst = TW_STATUS & 0xF8;											// check value of TWI Status Register. Mask prescaler bits
 408:	91 b1       	in	r25, 0x01	; 1
 40a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	98 32       	cpi	r25, 0x28	; 40
 410:	09 f4       	brne	.+2      	; 0x414 <_ZN3I2C5writeEh+0x18>
 412:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 414:	08 95       	ret

00000416 <_ZN3I2C7readAckEv>:

unsigned char I2C::readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 416:	84 ec       	ldi	r24, 0xC4	; 196
 418:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 41a:	06 b6       	in	r0, 0x36	; 54
 41c:	07 fe       	sbrs	r0, 7
 41e:	fd cf       	rjmp	.-6      	; 0x41a <_ZN3I2C7readAckEv+0x4>
	return TWDR;
 420:	83 b1       	in	r24, 0x03	; 3
}
 422:	08 95       	ret

00000424 <_ZN3I2C7readNakEv>:

unsigned char I2C::readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 424:	84 e8       	ldi	r24, 0x84	; 132
 426:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));	
 428:	06 b6       	in	r0, 0x36	; 54
 42a:	07 fe       	sbrs	r0, 7
 42c:	fd cf       	rjmp	.-6      	; 0x428 <_ZN3I2C7readNakEv+0x4>
	return TWDR;
 42e:	83 b1       	in	r24, 0x03	; 3
}
 430:	08 95       	ret

00000432 <_ZN3I2C10readXBytesEPhhh>:
{
	return address;
}

void I2C::readXBytes(unsigned char data[], unsigned char amount, unsigned char startAddress)	//data[x] : x >= amount
{
 432:	af 92       	push	r10
 434:	bf 92       	push	r11
 436:	cf 92       	push	r12
 438:	df 92       	push	r13
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	8c 01       	movw	r16, r24
 448:	6b 01       	movw	r12, r22
 44a:	a4 2e       	mov	r10, r20
//	if ((sizeof (data)/sizeof (data[0])) >= amount){
		write(startAddress);
 44c:	62 2f       	mov	r22, r18
 44e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <_ZN3I2C5writeEh>
		rep_start(I2C_READ);
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	c8 01       	movw	r24, r16
 456:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_ZN3I2C9rep_startEh>
		for (uint8_t i = 0; i < amount - 1; i++){
 45a:	ea 2c       	mov	r14, r10
 45c:	f1 2c       	mov	r15, r1
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	e8 1a       	sub	r14, r24
 462:	f1 08       	sbc	r15, r1
 464:	1e 14       	cp	r1, r14
 466:	1f 04       	cpc	r1, r15
 468:	74 f4       	brge	.+28     	; 0x486 <_ZN3I2C10readXBytesEPhhh+0x54>
 46a:	b1 2c       	mov	r11, r1
			data[i] = readAck();
 46c:	e6 01       	movw	r28, r12
 46e:	cb 0d       	add	r28, r11
 470:	d1 1d       	adc	r29, r1
 472:	c8 01       	movw	r24, r16
 474:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN3I2C7readAckEv>
 478:	88 83       	st	Y, r24
void I2C::readXBytes(unsigned char data[], unsigned char amount, unsigned char startAddress)	//data[x] : x >= amount
{
//	if ((sizeof (data)/sizeof (data[0])) >= amount){
		write(startAddress);
		rep_start(I2C_READ);
		for (uint8_t i = 0; i < amount - 1; i++){
 47a:	b3 94       	inc	r11
 47c:	2b 2d       	mov	r18, r11
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	2e 15       	cp	r18, r14
 482:	3f 05       	cpc	r19, r15
 484:	9c f3       	brlt	.-26     	; 0x46c <_ZN3I2C10readXBytesEPhhh+0x3a>
			data[i] = readAck();
		}
		data[amount - 1] = readNak();
 486:	8a 2d       	mov	r24, r10
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	e6 01       	movw	r28, r12
 48e:	c8 0f       	add	r28, r24
 490:	d9 1f       	adc	r29, r25
 492:	c8 01       	movw	r24, r16
 494:	0e 94 12 02 	call	0x424	; 0x424 <_ZN3I2C7readNakEv>
 498:	88 83       	st	Y, r24
//	}
}
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	ff 90       	pop	r15
 4a4:	ef 90       	pop	r14
 4a6:	df 90       	pop	r13
 4a8:	cf 90       	pop	r12
 4aa:	bf 90       	pop	r11
 4ac:	af 90       	pop	r10
 4ae:	08 95       	ret

000004b0 <_ZN3I2CD1Ev>:
		write(data[i]);	
	}
}

// default destructor
I2C::~I2C()
 4b0:	08 95       	ret

000004b2 <_Z12_lcd_delay_8h>:
 4b2:	81 50       	subi	r24, 0x01	; 1
 4b4:	f0 f7       	brcc	.-4      	; 0x4b2 <_Z12_lcd_delay_8h>
 4b6:	08 95       	ret

000004b8 <_ZL11pos_pulse_Ev>:
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	0e 94 59 02 	call	0x4b2	; 0x4b2 <_Z12_lcd_delay_8h>
 4be:	d9 9a       	sbi	0x1b, 1	; 27
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <_Z12_lcd_delay_8h>
 4c6:	d9 98       	cbi	0x1b, 1	; 27
 4c8:	08 95       	ret

000004ca <_Z13_lcd_delay_16j>:
 4ca:	81 50       	subi	r24, 0x01	; 1
 4cc:	90 40       	sbci	r25, 0x00	; 0
 4ce:	e8 f7       	brcc	.-6      	; 0x4ca <_Z13_lcd_delay_16j>
 4d0:	08 95       	ret

000004d2 <_Z16lcd_read_commandv>:
 4d2:	cf 93       	push	r28
 4d4:	8a b3       	in	r24, 0x1a	; 26
 4d6:	8e 60       	ori	r24, 0x0E	; 14
 4d8:	8a bb       	out	0x1a, r24	; 26
 4da:	8a b3       	in	r24, 0x1a	; 26
 4dc:	8f 70       	andi	r24, 0x0F	; 15
 4de:	8a bb       	out	0x1a, r24	; 26
 4e0:	8b b3       	in	r24, 0x1b	; 27
 4e2:	84 6f       	ori	r24, 0xF4	; 244
 4e4:	8b bb       	out	0x1b, r24	; 27
 4e6:	db 98       	cbi	0x1b, 3	; 27
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	0e 94 59 02 	call	0x4b2	; 0x4b2 <_Z12_lcd_delay_8h>
 4ee:	d9 9a       	sbi	0x1b, 1	; 27
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <_Z12_lcd_delay_8h>
 4f6:	c9 b3       	in	r28, 0x19	; 25
 4f8:	d9 98       	cbi	0x1b, 1	; 27
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <_Z12_lcd_delay_8h>
 500:	d9 9a       	sbi	0x1b, 1	; 27
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	0e 94 59 02 	call	0x4b2	; 0x4b2 <_Z12_lcd_delay_8h>
 508:	89 b3       	in	r24, 0x19	; 25
 50a:	c0 7f       	andi	r28, 0xF0	; 240
 50c:	82 95       	swap	r24
 50e:	8f 70       	andi	r24, 0x0F	; 15
 510:	d9 98       	cbi	0x1b, 1	; 27
 512:	8c 2b       	or	r24, r28
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <_ZL4waitv>:
 518:	0e 94 69 02 	call	0x4d2	; 0x4d2 <_Z16lcd_read_commandv>
 51c:	88 23       	and	r24, r24
 51e:	e4 f3       	brlt	.-8      	; 0x518 <_ZL4waitv>
 520:	08 95       	ret

00000522 <_Z17lcd_write_commandh>:
 522:	cf 93       	push	r28
 524:	c8 2f       	mov	r28, r24
 526:	0e 94 8c 02 	call	0x518	; 0x518 <_ZL4waitv>
 52a:	8a b3       	in	r24, 0x1a	; 26
 52c:	8e 6f       	ori	r24, 0xFE	; 254
 52e:	8a bb       	out	0x1a, r24	; 26
 530:	8b b3       	in	r24, 0x1b	; 27
 532:	81 70       	andi	r24, 0x01	; 1
 534:	8b bb       	out	0x1b, r24	; 27
 536:	8b b3       	in	r24, 0x1b	; 27
 538:	9c 2f       	mov	r25, r28
 53a:	90 7f       	andi	r25, 0xF0	; 240
 53c:	89 2b       	or	r24, r25
 53e:	8b bb       	out	0x1b, r24	; 27
 540:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZL11pos_pulse_Ev>
 544:	8b b3       	in	r24, 0x1b	; 27
 546:	81 70       	andi	r24, 0x01	; 1
 548:	8b bb       	out	0x1b, r24	; 27
 54a:	2b b3       	in	r18, 0x1b	; 27
 54c:	30 e1       	ldi	r19, 0x10	; 16
 54e:	c3 9f       	mul	r28, r19
 550:	c0 01       	movw	r24, r0
 552:	11 24       	eor	r1, r1
 554:	82 2b       	or	r24, r18
 556:	8b bb       	out	0x1b, r24	; 27
 558:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZL11pos_pulse_Ev>
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <_Z14lcd_write_datah>:
 560:	cf 93       	push	r28
 562:	c8 2f       	mov	r28, r24
 564:	0e 94 8c 02 	call	0x518	; 0x518 <_ZL4waitv>
 568:	8a b3       	in	r24, 0x1a	; 26
 56a:	8e 6f       	ori	r24, 0xFE	; 254
 56c:	8a bb       	out	0x1a, r24	; 26
 56e:	8b b3       	in	r24, 0x1b	; 27
 570:	81 70       	andi	r24, 0x01	; 1
 572:	8b bb       	out	0x1b, r24	; 27
 574:	8b b3       	in	r24, 0x1b	; 27
 576:	88 60       	ori	r24, 0x08	; 8
 578:	9c 2f       	mov	r25, r28
 57a:	90 7f       	andi	r25, 0xF0	; 240
 57c:	89 2b       	or	r24, r25
 57e:	8b bb       	out	0x1b, r24	; 27
 580:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZL11pos_pulse_Ev>
 584:	8b b3       	in	r24, 0x1b	; 27
 586:	81 70       	andi	r24, 0x01	; 1
 588:	8b bb       	out	0x1b, r24	; 27
 58a:	2b b3       	in	r18, 0x1b	; 27
 58c:	28 60       	ori	r18, 0x08	; 8
 58e:	30 e1       	ldi	r19, 0x10	; 16
 590:	c3 9f       	mul	r28, r19
 592:	c0 01       	movw	r24, r0
 594:	11 24       	eor	r1, r1
 596:	82 2b       	or	r24, r18
 598:	8b bb       	out	0x1b, r24	; 27
 59a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZL11pos_pulse_Ev>
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <_Z7lcd_clsv>:
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	0e 94 91 02 	call	0x522	; 0x522 <_Z17lcd_write_commandh>
 5a8:	08 95       	ret

000005aa <_Z8lcd_initv>:
 5aa:	8a b3       	in	r24, 0x1a	; 26
 5ac:	8e 6f       	ori	r24, 0xFE	; 254
 5ae:	8a bb       	out	0x1a, r24	; 26
 5b0:	8e ef       	ldi	r24, 0xFE	; 254
 5b2:	95 e3       	ldi	r25, 0x35	; 53
 5b4:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z13_lcd_delay_16j>
 5b8:	8b b3       	in	r24, 0x1b	; 27
 5ba:	81 70       	andi	r24, 0x01	; 1
 5bc:	8b bb       	out	0x1b, r24	; 27
 5be:	8b b3       	in	r24, 0x1b	; 27
 5c0:	80 63       	ori	r24, 0x30	; 48
 5c2:	8b bb       	out	0x1b, r24	; 27
 5c4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZL11pos_pulse_Ev>
 5c8:	82 ec       	ldi	r24, 0xC2	; 194
 5ca:	9e e0       	ldi	r25, 0x0E	; 14
 5cc:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z13_lcd_delay_16j>
 5d0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZL11pos_pulse_Ev>
 5d4:	8c e5       	ldi	r24, 0x5C	; 92
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z13_lcd_delay_16j>
 5dc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZL11pos_pulse_Ev>
 5e0:	8c e5       	ldi	r24, 0x5C	; 92
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z13_lcd_delay_16j>
 5e8:	dc 98       	cbi	0x1b, 4	; 27
 5ea:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZL11pos_pulse_Ev>
 5ee:	8c e5       	ldi	r24, 0x5C	; 92
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z13_lcd_delay_16j>
 5f6:	88 e2       	ldi	r24, 0x28	; 40
 5f8:	0e 94 91 02 	call	0x522	; 0x522 <_Z17lcd_write_commandh>
 5fc:	86 e0       	ldi	r24, 0x06	; 6
 5fe:	0e 94 91 02 	call	0x522	; 0x522 <_Z17lcd_write_commandh>
 602:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_Z7lcd_clsv>
 606:	8f e0       	ldi	r24, 0x0F	; 15
 608:	0e 94 91 02 	call	0x522	; 0x522 <_Z17lcd_write_commandh>
 60c:	08 95       	ret

0000060e <_Z8lcd_homev>:
 60e:	82 e0       	ldi	r24, 0x02	; 2
 610:	0e 94 91 02 	call	0x522	; 0x522 <_Z17lcd_write_commandh>
 614:	08 95       	ret

00000616 <_Z10lcd_cursorbb>:
 616:	88 23       	and	r24, r24
 618:	11 f0       	breq	.+4      	; 0x61e <_Z10lcd_cursorbb+0x8>
 61a:	8e e0       	ldi	r24, 0x0E	; 14
 61c:	01 c0       	rjmp	.+2      	; 0x620 <_Z10lcd_cursorbb+0xa>
 61e:	8c e0       	ldi	r24, 0x0C	; 12
 620:	86 0f       	add	r24, r22
 622:	0e 94 91 02 	call	0x522	; 0x522 <_Z17lcd_write_commandh>
 626:	08 95       	ret

00000628 <_Z8lcd_gotohh>:
 628:	82 30       	cpi	r24, 0x02	; 2
 62a:	50 f4       	brcc	.+20     	; 0x640 <_Z8lcd_gotohh+0x18>
 62c:	60 31       	cpi	r22, 0x10	; 16
 62e:	40 f4       	brcc	.+16     	; 0x640 <_Z8lcd_gotohh+0x18>
 630:	90 e4       	ldi	r25, 0x40	; 64
 632:	89 9f       	mul	r24, r25
 634:	60 0d       	add	r22, r0
 636:	11 24       	eor	r1, r1
 638:	86 2f       	mov	r24, r22
 63a:	80 58       	subi	r24, 0x80	; 128
 63c:	0e 94 91 02 	call	0x522	; 0x522 <_Z17lcd_write_commandh>
 640:	08 95       	ret

00000642 <_Z8lcd_putsPc>:
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	ec 01       	movw	r28, r24
 648:	88 81       	ld	r24, Y
 64a:	88 23       	and	r24, r24
 64c:	31 f0       	breq	.+12     	; 0x65a <_Z8lcd_putsPc+0x18>
 64e:	21 96       	adiw	r28, 0x01	; 1
 650:	0e 94 b0 02 	call	0x560	; 0x560 <_Z14lcd_write_datah>
 654:	89 91       	ld	r24, Y+
 656:	81 11       	cpse	r24, r1
 658:	fb cf       	rjmp	.-10     	; 0x650 <_Z8lcd_putsPc+0xe>
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <__tablejump2__>:
 660:	ee 0f       	add	r30, r30
 662:	ff 1f       	adc	r31, r31

00000664 <__tablejump__>:
 664:	05 90       	lpm	r0, Z+
 666:	f4 91       	lpm	r31, Z
 668:	e0 2d       	mov	r30, r0
 66a:	09 94       	ijmp

0000066c <snprintf>:
 66c:	ae e0       	ldi	r26, 0x0E	; 14
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	ec e3       	ldi	r30, 0x3C	; 60
 672:	f3 e0       	ldi	r31, 0x03	; 3
 674:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__prologue_saves__+0x1c>
 678:	0d 89       	ldd	r16, Y+21	; 0x15
 67a:	1e 89       	ldd	r17, Y+22	; 0x16
 67c:	8f 89       	ldd	r24, Y+23	; 0x17
 67e:	98 8d       	ldd	r25, Y+24	; 0x18
 680:	26 e0       	ldi	r18, 0x06	; 6
 682:	2c 83       	std	Y+4, r18	; 0x04
 684:	1a 83       	std	Y+2, r17	; 0x02
 686:	09 83       	std	Y+1, r16	; 0x01
 688:	97 ff       	sbrs	r25, 7
 68a:	02 c0       	rjmp	.+4      	; 0x690 <snprintf+0x24>
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	90 e8       	ldi	r25, 0x80	; 128
 690:	01 97       	sbiw	r24, 0x01	; 1
 692:	9e 83       	std	Y+6, r25	; 0x06
 694:	8d 83       	std	Y+5, r24	; 0x05
 696:	ae 01       	movw	r20, r28
 698:	45 5e       	subi	r20, 0xE5	; 229
 69a:	5f 4f       	sbci	r21, 0xFF	; 255
 69c:	69 8d       	ldd	r22, Y+25	; 0x19
 69e:	7a 8d       	ldd	r23, Y+26	; 0x1a
 6a0:	ce 01       	movw	r24, r28
 6a2:	01 96       	adiw	r24, 0x01	; 1
 6a4:	0e 94 66 03 	call	0x6cc	; 0x6cc <vfprintf>
 6a8:	4d 81       	ldd	r20, Y+5	; 0x05
 6aa:	5e 81       	ldd	r21, Y+6	; 0x06
 6ac:	57 fd       	sbrc	r21, 7
 6ae:	0a c0       	rjmp	.+20     	; 0x6c4 <snprintf+0x58>
 6b0:	2f 81       	ldd	r18, Y+7	; 0x07
 6b2:	38 85       	ldd	r19, Y+8	; 0x08
 6b4:	42 17       	cp	r20, r18
 6b6:	53 07       	cpc	r21, r19
 6b8:	0c f4       	brge	.+2      	; 0x6bc <snprintf+0x50>
 6ba:	9a 01       	movw	r18, r20
 6bc:	f8 01       	movw	r30, r16
 6be:	e2 0f       	add	r30, r18
 6c0:	f3 1f       	adc	r31, r19
 6c2:	10 82       	st	Z, r1
 6c4:	2e 96       	adiw	r28, 0x0e	; 14
 6c6:	e4 e0       	ldi	r30, 0x04	; 4
 6c8:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__epilogue_restores__+0x1c>

000006cc <vfprintf>:
 6cc:	ac e0       	ldi	r26, 0x0C	; 12
 6ce:	b0 e0       	ldi	r27, 0x00	; 0
 6d0:	ec e6       	ldi	r30, 0x6C	; 108
 6d2:	f3 e0       	ldi	r31, 0x03	; 3
 6d4:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__prologue_saves__>
 6d8:	7c 01       	movw	r14, r24
 6da:	6b 01       	movw	r12, r22
 6dc:	8a 01       	movw	r16, r20
 6de:	fc 01       	movw	r30, r24
 6e0:	17 82       	std	Z+7, r1	; 0x07
 6e2:	16 82       	std	Z+6, r1	; 0x06
 6e4:	83 81       	ldd	r24, Z+3	; 0x03
 6e6:	81 ff       	sbrs	r24, 1
 6e8:	bd c1       	rjmp	.+890    	; 0xa64 <__stack+0x205>
 6ea:	ce 01       	movw	r24, r28
 6ec:	01 96       	adiw	r24, 0x01	; 1
 6ee:	4c 01       	movw	r8, r24
 6f0:	f7 01       	movw	r30, r14
 6f2:	93 81       	ldd	r25, Z+3	; 0x03
 6f4:	f6 01       	movw	r30, r12
 6f6:	93 fd       	sbrc	r25, 3
 6f8:	85 91       	lpm	r24, Z+
 6fa:	93 ff       	sbrs	r25, 3
 6fc:	81 91       	ld	r24, Z+
 6fe:	6f 01       	movw	r12, r30
 700:	88 23       	and	r24, r24
 702:	09 f4       	brne	.+2      	; 0x706 <vfprintf+0x3a>
 704:	ab c1       	rjmp	.+854    	; 0xa5c <__stack+0x1fd>
 706:	85 32       	cpi	r24, 0x25	; 37
 708:	39 f4       	brne	.+14     	; 0x718 <vfprintf+0x4c>
 70a:	93 fd       	sbrc	r25, 3
 70c:	85 91       	lpm	r24, Z+
 70e:	93 ff       	sbrs	r25, 3
 710:	81 91       	ld	r24, Z+
 712:	6f 01       	movw	r12, r30
 714:	85 32       	cpi	r24, 0x25	; 37
 716:	29 f4       	brne	.+10     	; 0x722 <vfprintf+0x56>
 718:	b7 01       	movw	r22, r14
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 720:	e7 cf       	rjmp	.-50     	; 0x6f0 <vfprintf+0x24>
 722:	51 2c       	mov	r5, r1
 724:	31 2c       	mov	r3, r1
 726:	20 e0       	ldi	r18, 0x00	; 0
 728:	20 32       	cpi	r18, 0x20	; 32
 72a:	a0 f4       	brcc	.+40     	; 0x754 <vfprintf+0x88>
 72c:	8b 32       	cpi	r24, 0x2B	; 43
 72e:	69 f0       	breq	.+26     	; 0x74a <vfprintf+0x7e>
 730:	30 f4       	brcc	.+12     	; 0x73e <vfprintf+0x72>
 732:	80 32       	cpi	r24, 0x20	; 32
 734:	59 f0       	breq	.+22     	; 0x74c <vfprintf+0x80>
 736:	83 32       	cpi	r24, 0x23	; 35
 738:	69 f4       	brne	.+26     	; 0x754 <vfprintf+0x88>
 73a:	20 61       	ori	r18, 0x10	; 16
 73c:	2c c0       	rjmp	.+88     	; 0x796 <vfprintf+0xca>
 73e:	8d 32       	cpi	r24, 0x2D	; 45
 740:	39 f0       	breq	.+14     	; 0x750 <vfprintf+0x84>
 742:	80 33       	cpi	r24, 0x30	; 48
 744:	39 f4       	brne	.+14     	; 0x754 <vfprintf+0x88>
 746:	21 60       	ori	r18, 0x01	; 1
 748:	26 c0       	rjmp	.+76     	; 0x796 <vfprintf+0xca>
 74a:	22 60       	ori	r18, 0x02	; 2
 74c:	24 60       	ori	r18, 0x04	; 4
 74e:	23 c0       	rjmp	.+70     	; 0x796 <vfprintf+0xca>
 750:	28 60       	ori	r18, 0x08	; 8
 752:	21 c0       	rjmp	.+66     	; 0x796 <vfprintf+0xca>
 754:	27 fd       	sbrc	r18, 7
 756:	27 c0       	rjmp	.+78     	; 0x7a6 <vfprintf+0xda>
 758:	30 ed       	ldi	r19, 0xD0	; 208
 75a:	38 0f       	add	r19, r24
 75c:	3a 30       	cpi	r19, 0x0A	; 10
 75e:	78 f4       	brcc	.+30     	; 0x77e <vfprintf+0xb2>
 760:	26 ff       	sbrs	r18, 6
 762:	06 c0       	rjmp	.+12     	; 0x770 <vfprintf+0xa4>
 764:	fa e0       	ldi	r31, 0x0A	; 10
 766:	5f 9e       	mul	r5, r31
 768:	30 0d       	add	r19, r0
 76a:	11 24       	eor	r1, r1
 76c:	53 2e       	mov	r5, r19
 76e:	13 c0       	rjmp	.+38     	; 0x796 <vfprintf+0xca>
 770:	8a e0       	ldi	r24, 0x0A	; 10
 772:	38 9e       	mul	r3, r24
 774:	30 0d       	add	r19, r0
 776:	11 24       	eor	r1, r1
 778:	33 2e       	mov	r3, r19
 77a:	20 62       	ori	r18, 0x20	; 32
 77c:	0c c0       	rjmp	.+24     	; 0x796 <vfprintf+0xca>
 77e:	8e 32       	cpi	r24, 0x2E	; 46
 780:	21 f4       	brne	.+8      	; 0x78a <vfprintf+0xbe>
 782:	26 fd       	sbrc	r18, 6
 784:	6b c1       	rjmp	.+726    	; 0xa5c <__stack+0x1fd>
 786:	20 64       	ori	r18, 0x40	; 64
 788:	06 c0       	rjmp	.+12     	; 0x796 <vfprintf+0xca>
 78a:	8c 36       	cpi	r24, 0x6C	; 108
 78c:	11 f4       	brne	.+4      	; 0x792 <vfprintf+0xc6>
 78e:	20 68       	ori	r18, 0x80	; 128
 790:	02 c0       	rjmp	.+4      	; 0x796 <vfprintf+0xca>
 792:	88 36       	cpi	r24, 0x68	; 104
 794:	41 f4       	brne	.+16     	; 0x7a6 <vfprintf+0xda>
 796:	f6 01       	movw	r30, r12
 798:	93 fd       	sbrc	r25, 3
 79a:	85 91       	lpm	r24, Z+
 79c:	93 ff       	sbrs	r25, 3
 79e:	81 91       	ld	r24, Z+
 7a0:	6f 01       	movw	r12, r30
 7a2:	81 11       	cpse	r24, r1
 7a4:	c1 cf       	rjmp	.-126    	; 0x728 <vfprintf+0x5c>
 7a6:	98 2f       	mov	r25, r24
 7a8:	9f 7d       	andi	r25, 0xDF	; 223
 7aa:	95 54       	subi	r25, 0x45	; 69
 7ac:	93 30       	cpi	r25, 0x03	; 3
 7ae:	28 f4       	brcc	.+10     	; 0x7ba <vfprintf+0xee>
 7b0:	0c 5f       	subi	r16, 0xFC	; 252
 7b2:	1f 4f       	sbci	r17, 0xFF	; 255
 7b4:	ff e3       	ldi	r31, 0x3F	; 63
 7b6:	f9 83       	std	Y+1, r31	; 0x01
 7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <vfprintf+0x108>
 7ba:	83 36       	cpi	r24, 0x63	; 99
 7bc:	31 f0       	breq	.+12     	; 0x7ca <vfprintf+0xfe>
 7be:	83 37       	cpi	r24, 0x73	; 115
 7c0:	71 f0       	breq	.+28     	; 0x7de <vfprintf+0x112>
 7c2:	83 35       	cpi	r24, 0x53	; 83
 7c4:	09 f0       	breq	.+2      	; 0x7c8 <vfprintf+0xfc>
 7c6:	5b c0       	rjmp	.+182    	; 0x87e <__stack+0x1f>
 7c8:	22 c0       	rjmp	.+68     	; 0x80e <vfprintf+0x142>
 7ca:	f8 01       	movw	r30, r16
 7cc:	80 81       	ld	r24, Z
 7ce:	89 83       	std	Y+1, r24	; 0x01
 7d0:	0e 5f       	subi	r16, 0xFE	; 254
 7d2:	1f 4f       	sbci	r17, 0xFF	; 255
 7d4:	44 24       	eor	r4, r4
 7d6:	43 94       	inc	r4
 7d8:	51 2c       	mov	r5, r1
 7da:	54 01       	movw	r10, r8
 7dc:	15 c0       	rjmp	.+42     	; 0x808 <vfprintf+0x13c>
 7de:	38 01       	movw	r6, r16
 7e0:	f2 e0       	ldi	r31, 0x02	; 2
 7e2:	6f 0e       	add	r6, r31
 7e4:	71 1c       	adc	r7, r1
 7e6:	f8 01       	movw	r30, r16
 7e8:	a0 80       	ld	r10, Z
 7ea:	b1 80       	ldd	r11, Z+1	; 0x01
 7ec:	26 ff       	sbrs	r18, 6
 7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <vfprintf+0x12a>
 7f0:	65 2d       	mov	r22, r5
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <vfprintf+0x12e>
 7f6:	6f ef       	ldi	r22, 0xFF	; 255
 7f8:	7f ef       	ldi	r23, 0xFF	; 255
 7fa:	c5 01       	movw	r24, r10
 7fc:	2c 87       	std	Y+12, r18	; 0x0c
 7fe:	0e 94 43 05 	call	0xa86	; 0xa86 <strnlen>
 802:	2c 01       	movw	r4, r24
 804:	83 01       	movw	r16, r6
 806:	2c 85       	ldd	r18, Y+12	; 0x0c
 808:	2f 77       	andi	r18, 0x7F	; 127
 80a:	22 2e       	mov	r2, r18
 80c:	17 c0       	rjmp	.+46     	; 0x83c <vfprintf+0x170>
 80e:	38 01       	movw	r6, r16
 810:	f2 e0       	ldi	r31, 0x02	; 2
 812:	6f 0e       	add	r6, r31
 814:	71 1c       	adc	r7, r1
 816:	f8 01       	movw	r30, r16
 818:	a0 80       	ld	r10, Z
 81a:	b1 80       	ldd	r11, Z+1	; 0x01
 81c:	26 ff       	sbrs	r18, 6
 81e:	03 c0       	rjmp	.+6      	; 0x826 <vfprintf+0x15a>
 820:	65 2d       	mov	r22, r5
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <vfprintf+0x15e>
 826:	6f ef       	ldi	r22, 0xFF	; 255
 828:	7f ef       	ldi	r23, 0xFF	; 255
 82a:	c5 01       	movw	r24, r10
 82c:	2c 87       	std	Y+12, r18	; 0x0c
 82e:	0e 94 38 05 	call	0xa70	; 0xa70 <strnlen_P>
 832:	2c 01       	movw	r4, r24
 834:	2c 85       	ldd	r18, Y+12	; 0x0c
 836:	20 68       	ori	r18, 0x80	; 128
 838:	22 2e       	mov	r2, r18
 83a:	83 01       	movw	r16, r6
 83c:	23 fc       	sbrc	r2, 3
 83e:	1b c0       	rjmp	.+54     	; 0x876 <__stack+0x17>
 840:	83 2d       	mov	r24, r3
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	48 16       	cp	r4, r24
 846:	59 06       	cpc	r5, r25
 848:	b0 f4       	brcc	.+44     	; 0x876 <__stack+0x17>
 84a:	b7 01       	movw	r22, r14
 84c:	80 e2       	ldi	r24, 0x20	; 32
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 854:	3a 94       	dec	r3
 856:	f4 cf       	rjmp	.-24     	; 0x840 <vfprintf+0x174>
 858:	f5 01       	movw	r30, r10
 85a:	27 fc       	sbrc	r2, 7
 85c:	85 91       	lpm	r24, Z+
 85e:	27 fe       	sbrs	r2, 7
 860:	81 91       	ld	r24, Z+
 862:	5f 01       	movw	r10, r30
 864:	b7 01       	movw	r22, r14
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 86c:	31 10       	cpse	r3, r1
 86e:	3a 94       	dec	r3
 870:	f1 e0       	ldi	r31, 0x01	; 1
 872:	4f 1a       	sub	r4, r31
 874:	51 08       	sbc	r5, r1
 876:	41 14       	cp	r4, r1
 878:	51 04       	cpc	r5, r1
 87a:	71 f7       	brne	.-36     	; 0x858 <vfprintf+0x18c>
 87c:	e5 c0       	rjmp	.+458    	; 0xa48 <__stack+0x1e9>
 87e:	84 36       	cpi	r24, 0x64	; 100
 880:	11 f0       	breq	.+4      	; 0x886 <__stack+0x27>
 882:	89 36       	cpi	r24, 0x69	; 105
 884:	39 f5       	brne	.+78     	; 0x8d4 <__stack+0x75>
 886:	f8 01       	movw	r30, r16
 888:	27 ff       	sbrs	r18, 7
 88a:	07 c0       	rjmp	.+14     	; 0x89a <__stack+0x3b>
 88c:	60 81       	ld	r22, Z
 88e:	71 81       	ldd	r23, Z+1	; 0x01
 890:	82 81       	ldd	r24, Z+2	; 0x02
 892:	93 81       	ldd	r25, Z+3	; 0x03
 894:	0c 5f       	subi	r16, 0xFC	; 252
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	08 c0       	rjmp	.+16     	; 0x8aa <__stack+0x4b>
 89a:	60 81       	ld	r22, Z
 89c:	71 81       	ldd	r23, Z+1	; 0x01
 89e:	88 27       	eor	r24, r24
 8a0:	77 fd       	sbrc	r23, 7
 8a2:	80 95       	com	r24
 8a4:	98 2f       	mov	r25, r24
 8a6:	0e 5f       	subi	r16, 0xFE	; 254
 8a8:	1f 4f       	sbci	r17, 0xFF	; 255
 8aa:	2f 76       	andi	r18, 0x6F	; 111
 8ac:	b2 2e       	mov	r11, r18
 8ae:	97 ff       	sbrs	r25, 7
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <__stack+0x65>
 8b2:	90 95       	com	r25
 8b4:	80 95       	com	r24
 8b6:	70 95       	com	r23
 8b8:	61 95       	neg	r22
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	8f 4f       	sbci	r24, 0xFF	; 255
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	20 68       	ori	r18, 0x80	; 128
 8c2:	b2 2e       	mov	r11, r18
 8c4:	2a e0       	ldi	r18, 0x0A	; 10
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	a4 01       	movw	r20, r8
 8ca:	0e 94 80 05 	call	0xb00	; 0xb00 <__ultoa_invert>
 8ce:	a8 2e       	mov	r10, r24
 8d0:	a8 18       	sub	r10, r8
 8d2:	44 c0       	rjmp	.+136    	; 0x95c <__stack+0xfd>
 8d4:	85 37       	cpi	r24, 0x75	; 117
 8d6:	29 f4       	brne	.+10     	; 0x8e2 <__stack+0x83>
 8d8:	2f 7e       	andi	r18, 0xEF	; 239
 8da:	b2 2e       	mov	r11, r18
 8dc:	2a e0       	ldi	r18, 0x0A	; 10
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	25 c0       	rjmp	.+74     	; 0x92c <__stack+0xcd>
 8e2:	f2 2f       	mov	r31, r18
 8e4:	f9 7f       	andi	r31, 0xF9	; 249
 8e6:	bf 2e       	mov	r11, r31
 8e8:	8f 36       	cpi	r24, 0x6F	; 111
 8ea:	c1 f0       	breq	.+48     	; 0x91c <__stack+0xbd>
 8ec:	18 f4       	brcc	.+6      	; 0x8f4 <__stack+0x95>
 8ee:	88 35       	cpi	r24, 0x58	; 88
 8f0:	79 f0       	breq	.+30     	; 0x910 <__stack+0xb1>
 8f2:	b4 c0       	rjmp	.+360    	; 0xa5c <__stack+0x1fd>
 8f4:	80 37       	cpi	r24, 0x70	; 112
 8f6:	19 f0       	breq	.+6      	; 0x8fe <__stack+0x9f>
 8f8:	88 37       	cpi	r24, 0x78	; 120
 8fa:	21 f0       	breq	.+8      	; 0x904 <__stack+0xa5>
 8fc:	af c0       	rjmp	.+350    	; 0xa5c <__stack+0x1fd>
 8fe:	2f 2f       	mov	r18, r31
 900:	20 61       	ori	r18, 0x10	; 16
 902:	b2 2e       	mov	r11, r18
 904:	b4 fe       	sbrs	r11, 4
 906:	0d c0       	rjmp	.+26     	; 0x922 <__stack+0xc3>
 908:	8b 2d       	mov	r24, r11
 90a:	84 60       	ori	r24, 0x04	; 4
 90c:	b8 2e       	mov	r11, r24
 90e:	09 c0       	rjmp	.+18     	; 0x922 <__stack+0xc3>
 910:	24 ff       	sbrs	r18, 4
 912:	0a c0       	rjmp	.+20     	; 0x928 <__stack+0xc9>
 914:	9f 2f       	mov	r25, r31
 916:	96 60       	ori	r25, 0x06	; 6
 918:	b9 2e       	mov	r11, r25
 91a:	06 c0       	rjmp	.+12     	; 0x928 <__stack+0xc9>
 91c:	28 e0       	ldi	r18, 0x08	; 8
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	05 c0       	rjmp	.+10     	; 0x92c <__stack+0xcd>
 922:	20 e1       	ldi	r18, 0x10	; 16
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0xcd>
 928:	20 e1       	ldi	r18, 0x10	; 16
 92a:	32 e0       	ldi	r19, 0x02	; 2
 92c:	f8 01       	movw	r30, r16
 92e:	b7 fe       	sbrs	r11, 7
 930:	07 c0       	rjmp	.+14     	; 0x940 <__stack+0xe1>
 932:	60 81       	ld	r22, Z
 934:	71 81       	ldd	r23, Z+1	; 0x01
 936:	82 81       	ldd	r24, Z+2	; 0x02
 938:	93 81       	ldd	r25, Z+3	; 0x03
 93a:	0c 5f       	subi	r16, 0xFC	; 252
 93c:	1f 4f       	sbci	r17, 0xFF	; 255
 93e:	06 c0       	rjmp	.+12     	; 0x94c <__stack+0xed>
 940:	60 81       	ld	r22, Z
 942:	71 81       	ldd	r23, Z+1	; 0x01
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 5f       	subi	r16, 0xFE	; 254
 94a:	1f 4f       	sbci	r17, 0xFF	; 255
 94c:	a4 01       	movw	r20, r8
 94e:	0e 94 80 05 	call	0xb00	; 0xb00 <__ultoa_invert>
 952:	a8 2e       	mov	r10, r24
 954:	a8 18       	sub	r10, r8
 956:	fb 2d       	mov	r31, r11
 958:	ff 77       	andi	r31, 0x7F	; 127
 95a:	bf 2e       	mov	r11, r31
 95c:	b6 fe       	sbrs	r11, 6
 95e:	0b c0       	rjmp	.+22     	; 0x976 <__stack+0x117>
 960:	2b 2d       	mov	r18, r11
 962:	2e 7f       	andi	r18, 0xFE	; 254
 964:	a5 14       	cp	r10, r5
 966:	50 f4       	brcc	.+20     	; 0x97c <__stack+0x11d>
 968:	b4 fe       	sbrs	r11, 4
 96a:	0a c0       	rjmp	.+20     	; 0x980 <__stack+0x121>
 96c:	b2 fc       	sbrc	r11, 2
 96e:	08 c0       	rjmp	.+16     	; 0x980 <__stack+0x121>
 970:	2b 2d       	mov	r18, r11
 972:	2e 7e       	andi	r18, 0xEE	; 238
 974:	05 c0       	rjmp	.+10     	; 0x980 <__stack+0x121>
 976:	7a 2c       	mov	r7, r10
 978:	2b 2d       	mov	r18, r11
 97a:	03 c0       	rjmp	.+6      	; 0x982 <__stack+0x123>
 97c:	7a 2c       	mov	r7, r10
 97e:	01 c0       	rjmp	.+2      	; 0x982 <__stack+0x123>
 980:	75 2c       	mov	r7, r5
 982:	24 ff       	sbrs	r18, 4
 984:	0d c0       	rjmp	.+26     	; 0x9a0 <__stack+0x141>
 986:	fe 01       	movw	r30, r28
 988:	ea 0d       	add	r30, r10
 98a:	f1 1d       	adc	r31, r1
 98c:	80 81       	ld	r24, Z
 98e:	80 33       	cpi	r24, 0x30	; 48
 990:	11 f4       	brne	.+4      	; 0x996 <__stack+0x137>
 992:	29 7e       	andi	r18, 0xE9	; 233
 994:	09 c0       	rjmp	.+18     	; 0x9a8 <__stack+0x149>
 996:	22 ff       	sbrs	r18, 2
 998:	06 c0       	rjmp	.+12     	; 0x9a6 <__stack+0x147>
 99a:	73 94       	inc	r7
 99c:	73 94       	inc	r7
 99e:	04 c0       	rjmp	.+8      	; 0x9a8 <__stack+0x149>
 9a0:	82 2f       	mov	r24, r18
 9a2:	86 78       	andi	r24, 0x86	; 134
 9a4:	09 f0       	breq	.+2      	; 0x9a8 <__stack+0x149>
 9a6:	73 94       	inc	r7
 9a8:	23 fd       	sbrc	r18, 3
 9aa:	13 c0       	rjmp	.+38     	; 0x9d2 <__stack+0x173>
 9ac:	20 ff       	sbrs	r18, 0
 9ae:	06 c0       	rjmp	.+12     	; 0x9bc <__stack+0x15d>
 9b0:	5a 2c       	mov	r5, r10
 9b2:	73 14       	cp	r7, r3
 9b4:	18 f4       	brcc	.+6      	; 0x9bc <__stack+0x15d>
 9b6:	53 0c       	add	r5, r3
 9b8:	57 18       	sub	r5, r7
 9ba:	73 2c       	mov	r7, r3
 9bc:	73 14       	cp	r7, r3
 9be:	68 f4       	brcc	.+26     	; 0x9da <__stack+0x17b>
 9c0:	b7 01       	movw	r22, r14
 9c2:	80 e2       	ldi	r24, 0x20	; 32
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	2c 87       	std	Y+12, r18	; 0x0c
 9c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 9cc:	73 94       	inc	r7
 9ce:	2c 85       	ldd	r18, Y+12	; 0x0c
 9d0:	f5 cf       	rjmp	.-22     	; 0x9bc <__stack+0x15d>
 9d2:	73 14       	cp	r7, r3
 9d4:	10 f4       	brcc	.+4      	; 0x9da <__stack+0x17b>
 9d6:	37 18       	sub	r3, r7
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <__stack+0x17d>
 9da:	31 2c       	mov	r3, r1
 9dc:	24 ff       	sbrs	r18, 4
 9de:	12 c0       	rjmp	.+36     	; 0xa04 <__stack+0x1a5>
 9e0:	b7 01       	movw	r22, r14
 9e2:	80 e3       	ldi	r24, 0x30	; 48
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	2c 87       	std	Y+12, r18	; 0x0c
 9e8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 9ec:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ee:	22 ff       	sbrs	r18, 2
 9f0:	17 c0       	rjmp	.+46     	; 0xa20 <__stack+0x1c1>
 9f2:	21 ff       	sbrs	r18, 1
 9f4:	03 c0       	rjmp	.+6      	; 0x9fc <__stack+0x19d>
 9f6:	88 e5       	ldi	r24, 0x58	; 88
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <__stack+0x1a1>
 9fc:	88 e7       	ldi	r24, 0x78	; 120
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	b7 01       	movw	r22, r14
 a02:	0c c0       	rjmp	.+24     	; 0xa1c <__stack+0x1bd>
 a04:	82 2f       	mov	r24, r18
 a06:	86 78       	andi	r24, 0x86	; 134
 a08:	59 f0       	breq	.+22     	; 0xa20 <__stack+0x1c1>
 a0a:	21 fd       	sbrc	r18, 1
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <__stack+0x1b3>
 a0e:	80 e2       	ldi	r24, 0x20	; 32
 a10:	01 c0       	rjmp	.+2      	; 0xa14 <__stack+0x1b5>
 a12:	8b e2       	ldi	r24, 0x2B	; 43
 a14:	27 fd       	sbrc	r18, 7
 a16:	8d e2       	ldi	r24, 0x2D	; 45
 a18:	b7 01       	movw	r22, r14
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 a20:	a5 14       	cp	r10, r5
 a22:	38 f4       	brcc	.+14     	; 0xa32 <__stack+0x1d3>
 a24:	b7 01       	movw	r22, r14
 a26:	80 e3       	ldi	r24, 0x30	; 48
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 a2e:	5a 94       	dec	r5
 a30:	f7 cf       	rjmp	.-18     	; 0xa20 <__stack+0x1c1>
 a32:	aa 94       	dec	r10
 a34:	f4 01       	movw	r30, r8
 a36:	ea 0d       	add	r30, r10
 a38:	f1 1d       	adc	r31, r1
 a3a:	80 81       	ld	r24, Z
 a3c:	b7 01       	movw	r22, r14
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 a44:	a1 10       	cpse	r10, r1
 a46:	f5 cf       	rjmp	.-22     	; 0xa32 <__stack+0x1d3>
 a48:	33 20       	and	r3, r3
 a4a:	09 f4       	brne	.+2      	; 0xa4e <__stack+0x1ef>
 a4c:	51 ce       	rjmp	.-862    	; 0x6f0 <vfprintf+0x24>
 a4e:	b7 01       	movw	r22, r14
 a50:	80 e2       	ldi	r24, 0x20	; 32
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	0e 94 4e 05 	call	0xa9c	; 0xa9c <fputc>
 a58:	3a 94       	dec	r3
 a5a:	f6 cf       	rjmp	.-20     	; 0xa48 <__stack+0x1e9>
 a5c:	f7 01       	movw	r30, r14
 a5e:	86 81       	ldd	r24, Z+6	; 0x06
 a60:	97 81       	ldd	r25, Z+7	; 0x07
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <__stack+0x209>
 a64:	8f ef       	ldi	r24, 0xFF	; 255
 a66:	9f ef       	ldi	r25, 0xFF	; 255
 a68:	2c 96       	adiw	r28, 0x0c	; 12
 a6a:	e2 e1       	ldi	r30, 0x12	; 18
 a6c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__epilogue_restores__>

00000a70 <strnlen_P>:
 a70:	fc 01       	movw	r30, r24
 a72:	05 90       	lpm	r0, Z+
 a74:	61 50       	subi	r22, 0x01	; 1
 a76:	70 40       	sbci	r23, 0x00	; 0
 a78:	01 10       	cpse	r0, r1
 a7a:	d8 f7       	brcc	.-10     	; 0xa72 <strnlen_P+0x2>
 a7c:	80 95       	com	r24
 a7e:	90 95       	com	r25
 a80:	8e 0f       	add	r24, r30
 a82:	9f 1f       	adc	r25, r31
 a84:	08 95       	ret

00000a86 <strnlen>:
 a86:	fc 01       	movw	r30, r24
 a88:	61 50       	subi	r22, 0x01	; 1
 a8a:	70 40       	sbci	r23, 0x00	; 0
 a8c:	01 90       	ld	r0, Z+
 a8e:	01 10       	cpse	r0, r1
 a90:	d8 f7       	brcc	.-10     	; 0xa88 <strnlen+0x2>
 a92:	80 95       	com	r24
 a94:	90 95       	com	r25
 a96:	8e 0f       	add	r24, r30
 a98:	9f 1f       	adc	r25, r31
 a9a:	08 95       	ret

00000a9c <fputc>:
 a9c:	0f 93       	push	r16
 a9e:	1f 93       	push	r17
 aa0:	cf 93       	push	r28
 aa2:	df 93       	push	r29
 aa4:	18 2f       	mov	r17, r24
 aa6:	09 2f       	mov	r16, r25
 aa8:	eb 01       	movw	r28, r22
 aaa:	8b 81       	ldd	r24, Y+3	; 0x03
 aac:	81 fd       	sbrc	r24, 1
 aae:	03 c0       	rjmp	.+6      	; 0xab6 <fputc+0x1a>
 ab0:	8f ef       	ldi	r24, 0xFF	; 255
 ab2:	9f ef       	ldi	r25, 0xFF	; 255
 ab4:	20 c0       	rjmp	.+64     	; 0xaf6 <fputc+0x5a>
 ab6:	82 ff       	sbrs	r24, 2
 ab8:	10 c0       	rjmp	.+32     	; 0xada <fputc+0x3e>
 aba:	4e 81       	ldd	r20, Y+6	; 0x06
 abc:	5f 81       	ldd	r21, Y+7	; 0x07
 abe:	2c 81       	ldd	r18, Y+4	; 0x04
 ac0:	3d 81       	ldd	r19, Y+5	; 0x05
 ac2:	42 17       	cp	r20, r18
 ac4:	53 07       	cpc	r21, r19
 ac6:	7c f4       	brge	.+30     	; 0xae6 <fputc+0x4a>
 ac8:	e8 81       	ld	r30, Y
 aca:	f9 81       	ldd	r31, Y+1	; 0x01
 acc:	9f 01       	movw	r18, r30
 ace:	2f 5f       	subi	r18, 0xFF	; 255
 ad0:	3f 4f       	sbci	r19, 0xFF	; 255
 ad2:	39 83       	std	Y+1, r19	; 0x01
 ad4:	28 83       	st	Y, r18
 ad6:	10 83       	st	Z, r17
 ad8:	06 c0       	rjmp	.+12     	; 0xae6 <fputc+0x4a>
 ada:	e8 85       	ldd	r30, Y+8	; 0x08
 adc:	f9 85       	ldd	r31, Y+9	; 0x09
 ade:	81 2f       	mov	r24, r17
 ae0:	09 95       	icall
 ae2:	89 2b       	or	r24, r25
 ae4:	29 f7       	brne	.-54     	; 0xab0 <fputc+0x14>
 ae6:	2e 81       	ldd	r18, Y+6	; 0x06
 ae8:	3f 81       	ldd	r19, Y+7	; 0x07
 aea:	2f 5f       	subi	r18, 0xFF	; 255
 aec:	3f 4f       	sbci	r19, 0xFF	; 255
 aee:	3f 83       	std	Y+7, r19	; 0x07
 af0:	2e 83       	std	Y+6, r18	; 0x06
 af2:	81 2f       	mov	r24, r17
 af4:	90 2f       	mov	r25, r16
 af6:	df 91       	pop	r29
 af8:	cf 91       	pop	r28
 afa:	1f 91       	pop	r17
 afc:	0f 91       	pop	r16
 afe:	08 95       	ret

00000b00 <__ultoa_invert>:
 b00:	fa 01       	movw	r30, r20
 b02:	aa 27       	eor	r26, r26
 b04:	28 30       	cpi	r18, 0x08	; 8
 b06:	51 f1       	breq	.+84     	; 0xb5c <__ultoa_invert+0x5c>
 b08:	20 31       	cpi	r18, 0x10	; 16
 b0a:	81 f1       	breq	.+96     	; 0xb6c <__ultoa_invert+0x6c>
 b0c:	e8 94       	clt
 b0e:	6f 93       	push	r22
 b10:	6e 7f       	andi	r22, 0xFE	; 254
 b12:	6e 5f       	subi	r22, 0xFE	; 254
 b14:	7f 4f       	sbci	r23, 0xFF	; 255
 b16:	8f 4f       	sbci	r24, 0xFF	; 255
 b18:	9f 4f       	sbci	r25, 0xFF	; 255
 b1a:	af 4f       	sbci	r26, 0xFF	; 255
 b1c:	b1 e0       	ldi	r27, 0x01	; 1
 b1e:	3e d0       	rcall	.+124    	; 0xb9c <__ultoa_invert+0x9c>
 b20:	b4 e0       	ldi	r27, 0x04	; 4
 b22:	3c d0       	rcall	.+120    	; 0xb9c <__ultoa_invert+0x9c>
 b24:	67 0f       	add	r22, r23
 b26:	78 1f       	adc	r23, r24
 b28:	89 1f       	adc	r24, r25
 b2a:	9a 1f       	adc	r25, r26
 b2c:	a1 1d       	adc	r26, r1
 b2e:	68 0f       	add	r22, r24
 b30:	79 1f       	adc	r23, r25
 b32:	8a 1f       	adc	r24, r26
 b34:	91 1d       	adc	r25, r1
 b36:	a1 1d       	adc	r26, r1
 b38:	6a 0f       	add	r22, r26
 b3a:	71 1d       	adc	r23, r1
 b3c:	81 1d       	adc	r24, r1
 b3e:	91 1d       	adc	r25, r1
 b40:	a1 1d       	adc	r26, r1
 b42:	20 d0       	rcall	.+64     	; 0xb84 <__ultoa_invert+0x84>
 b44:	09 f4       	brne	.+2      	; 0xb48 <__ultoa_invert+0x48>
 b46:	68 94       	set
 b48:	3f 91       	pop	r19
 b4a:	2a e0       	ldi	r18, 0x0A	; 10
 b4c:	26 9f       	mul	r18, r22
 b4e:	11 24       	eor	r1, r1
 b50:	30 19       	sub	r19, r0
 b52:	30 5d       	subi	r19, 0xD0	; 208
 b54:	31 93       	st	Z+, r19
 b56:	de f6       	brtc	.-74     	; 0xb0e <__ultoa_invert+0xe>
 b58:	cf 01       	movw	r24, r30
 b5a:	08 95       	ret
 b5c:	46 2f       	mov	r20, r22
 b5e:	47 70       	andi	r20, 0x07	; 7
 b60:	40 5d       	subi	r20, 0xD0	; 208
 b62:	41 93       	st	Z+, r20
 b64:	b3 e0       	ldi	r27, 0x03	; 3
 b66:	0f d0       	rcall	.+30     	; 0xb86 <__ultoa_invert+0x86>
 b68:	c9 f7       	brne	.-14     	; 0xb5c <__ultoa_invert+0x5c>
 b6a:	f6 cf       	rjmp	.-20     	; 0xb58 <__ultoa_invert+0x58>
 b6c:	46 2f       	mov	r20, r22
 b6e:	4f 70       	andi	r20, 0x0F	; 15
 b70:	40 5d       	subi	r20, 0xD0	; 208
 b72:	4a 33       	cpi	r20, 0x3A	; 58
 b74:	18 f0       	brcs	.+6      	; 0xb7c <__ultoa_invert+0x7c>
 b76:	49 5d       	subi	r20, 0xD9	; 217
 b78:	31 fd       	sbrc	r19, 1
 b7a:	40 52       	subi	r20, 0x20	; 32
 b7c:	41 93       	st	Z+, r20
 b7e:	02 d0       	rcall	.+4      	; 0xb84 <__ultoa_invert+0x84>
 b80:	a9 f7       	brne	.-22     	; 0xb6c <__ultoa_invert+0x6c>
 b82:	ea cf       	rjmp	.-44     	; 0xb58 <__ultoa_invert+0x58>
 b84:	b4 e0       	ldi	r27, 0x04	; 4
 b86:	a6 95       	lsr	r26
 b88:	97 95       	ror	r25
 b8a:	87 95       	ror	r24
 b8c:	77 95       	ror	r23
 b8e:	67 95       	ror	r22
 b90:	ba 95       	dec	r27
 b92:	c9 f7       	brne	.-14     	; 0xb86 <__ultoa_invert+0x86>
 b94:	00 97       	sbiw	r24, 0x00	; 0
 b96:	61 05       	cpc	r22, r1
 b98:	71 05       	cpc	r23, r1
 b9a:	08 95       	ret
 b9c:	9b 01       	movw	r18, r22
 b9e:	ac 01       	movw	r20, r24
 ba0:	0a 2e       	mov	r0, r26
 ba2:	06 94       	lsr	r0
 ba4:	57 95       	ror	r21
 ba6:	47 95       	ror	r20
 ba8:	37 95       	ror	r19
 baa:	27 95       	ror	r18
 bac:	ba 95       	dec	r27
 bae:	c9 f7       	brne	.-14     	; 0xba2 <__ultoa_invert+0xa2>
 bb0:	62 0f       	add	r22, r18
 bb2:	73 1f       	adc	r23, r19
 bb4:	84 1f       	adc	r24, r20
 bb6:	95 1f       	adc	r25, r21
 bb8:	a0 1d       	adc	r26, r0
 bba:	08 95       	ret

00000bbc <__prologue_saves__>:
 bbc:	2f 92       	push	r2
 bbe:	3f 92       	push	r3
 bc0:	4f 92       	push	r4
 bc2:	5f 92       	push	r5
 bc4:	6f 92       	push	r6
 bc6:	7f 92       	push	r7
 bc8:	8f 92       	push	r8
 bca:	9f 92       	push	r9
 bcc:	af 92       	push	r10
 bce:	bf 92       	push	r11
 bd0:	cf 92       	push	r12
 bd2:	df 92       	push	r13
 bd4:	ef 92       	push	r14
 bd6:	ff 92       	push	r15
 bd8:	0f 93       	push	r16
 bda:	1f 93       	push	r17
 bdc:	cf 93       	push	r28
 bde:	df 93       	push	r29
 be0:	cd b7       	in	r28, 0x3d	; 61
 be2:	de b7       	in	r29, 0x3e	; 62
 be4:	ca 1b       	sub	r28, r26
 be6:	db 0b       	sbc	r29, r27
 be8:	0f b6       	in	r0, 0x3f	; 63
 bea:	f8 94       	cli
 bec:	de bf       	out	0x3e, r29	; 62
 bee:	0f be       	out	0x3f, r0	; 63
 bf0:	cd bf       	out	0x3d, r28	; 61
 bf2:	09 94       	ijmp

00000bf4 <__epilogue_restores__>:
 bf4:	2a 88       	ldd	r2, Y+18	; 0x12
 bf6:	39 88       	ldd	r3, Y+17	; 0x11
 bf8:	48 88       	ldd	r4, Y+16	; 0x10
 bfa:	5f 84       	ldd	r5, Y+15	; 0x0f
 bfc:	6e 84       	ldd	r6, Y+14	; 0x0e
 bfe:	7d 84       	ldd	r7, Y+13	; 0x0d
 c00:	8c 84       	ldd	r8, Y+12	; 0x0c
 c02:	9b 84       	ldd	r9, Y+11	; 0x0b
 c04:	aa 84       	ldd	r10, Y+10	; 0x0a
 c06:	b9 84       	ldd	r11, Y+9	; 0x09
 c08:	c8 84       	ldd	r12, Y+8	; 0x08
 c0a:	df 80       	ldd	r13, Y+7	; 0x07
 c0c:	ee 80       	ldd	r14, Y+6	; 0x06
 c0e:	fd 80       	ldd	r15, Y+5	; 0x05
 c10:	0c 81       	ldd	r16, Y+4	; 0x04
 c12:	1b 81       	ldd	r17, Y+3	; 0x03
 c14:	aa 81       	ldd	r26, Y+2	; 0x02
 c16:	b9 81       	ldd	r27, Y+1	; 0x01
 c18:	ce 0f       	add	r28, r30
 c1a:	d1 1d       	adc	r29, r1
 c1c:	0f b6       	in	r0, 0x3f	; 63
 c1e:	f8 94       	cli
 c20:	de bf       	out	0x3e, r29	; 62
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	cd bf       	out	0x3d, r28	; 61
 c26:	ed 01       	movw	r28, r26
 c28:	08 95       	ret

00000c2a <__do_global_dtors>:
 c2a:	10 e0       	ldi	r17, 0x00	; 0
 c2c:	c6 e5       	ldi	r28, 0x56	; 86
 c2e:	d0 e0       	ldi	r29, 0x00	; 0
 c30:	04 c0       	rjmp	.+8      	; 0xc3a <__do_global_dtors+0x10>
 c32:	fe 01       	movw	r30, r28
 c34:	0e 94 32 03 	call	0x664	; 0x664 <__tablejump__>
 c38:	22 96       	adiw	r28, 0x02	; 2
 c3a:	c8 35       	cpi	r28, 0x58	; 88
 c3c:	d1 07       	cpc	r29, r17
 c3e:	c9 f7       	brne	.-14     	; 0xc32 <__do_global_dtors+0x8>
 c40:	f8 94       	cli

00000c42 <__stop_program>:
 c42:	ff cf       	rjmp	.-2      	; 0xc42 <__stop_program>
